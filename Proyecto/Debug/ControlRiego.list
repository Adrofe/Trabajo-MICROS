
ControlRiego.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005980  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08005b10  08005b10  00015b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c30  08005c30  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005c30  08005c30  00015c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c38  08005c38  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c38  08005c38  00015c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c3c  08005c3c  00015c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          0000027c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002f0  200002f0  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000102ae  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002407  00000000  00000000  00030352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  00032760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c58  00000000  00000000  000334c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002345b  00000000  00000000  00034118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e9e4  00000000  00000000  00057573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d725d  00000000  00000000  00065f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013d1b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004128  00000000  00000000  0013d208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005af8 	.word	0x08005af8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005af8 	.word	0x08005af8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b96e 	b.w	8000b70 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	4604      	mov	r4, r0
 80008b4:	468c      	mov	ip, r1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f040 8083 	bne.w	80009c2 <__udivmoddi4+0x116>
 80008bc:	428a      	cmp	r2, r1
 80008be:	4617      	mov	r7, r2
 80008c0:	d947      	bls.n	8000952 <__udivmoddi4+0xa6>
 80008c2:	fab2 f282 	clz	r2, r2
 80008c6:	b142      	cbz	r2, 80008da <__udivmoddi4+0x2e>
 80008c8:	f1c2 0020 	rsb	r0, r2, #32
 80008cc:	fa24 f000 	lsr.w	r0, r4, r0
 80008d0:	4091      	lsls	r1, r2
 80008d2:	4097      	lsls	r7, r2
 80008d4:	ea40 0c01 	orr.w	ip, r0, r1
 80008d8:	4094      	lsls	r4, r2
 80008da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008de:	0c23      	lsrs	r3, r4, #16
 80008e0:	fbbc f6f8 	udiv	r6, ip, r8
 80008e4:	fa1f fe87 	uxth.w	lr, r7
 80008e8:	fb08 c116 	mls	r1, r8, r6, ip
 80008ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f0:	fb06 f10e 	mul.w	r1, r6, lr
 80008f4:	4299      	cmp	r1, r3
 80008f6:	d909      	bls.n	800090c <__udivmoddi4+0x60>
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80008fe:	f080 8119 	bcs.w	8000b34 <__udivmoddi4+0x288>
 8000902:	4299      	cmp	r1, r3
 8000904:	f240 8116 	bls.w	8000b34 <__udivmoddi4+0x288>
 8000908:	3e02      	subs	r6, #2
 800090a:	443b      	add	r3, r7
 800090c:	1a5b      	subs	r3, r3, r1
 800090e:	b2a4      	uxth	r4, r4
 8000910:	fbb3 f0f8 	udiv	r0, r3, r8
 8000914:	fb08 3310 	mls	r3, r8, r0, r3
 8000918:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800091c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000920:	45a6      	cmp	lr, r4
 8000922:	d909      	bls.n	8000938 <__udivmoddi4+0x8c>
 8000924:	193c      	adds	r4, r7, r4
 8000926:	f100 33ff 	add.w	r3, r0, #4294967295
 800092a:	f080 8105 	bcs.w	8000b38 <__udivmoddi4+0x28c>
 800092e:	45a6      	cmp	lr, r4
 8000930:	f240 8102 	bls.w	8000b38 <__udivmoddi4+0x28c>
 8000934:	3802      	subs	r0, #2
 8000936:	443c      	add	r4, r7
 8000938:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800093c:	eba4 040e 	sub.w	r4, r4, lr
 8000940:	2600      	movs	r6, #0
 8000942:	b11d      	cbz	r5, 800094c <__udivmoddi4+0xa0>
 8000944:	40d4      	lsrs	r4, r2
 8000946:	2300      	movs	r3, #0
 8000948:	e9c5 4300 	strd	r4, r3, [r5]
 800094c:	4631      	mov	r1, r6
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	b902      	cbnz	r2, 8000956 <__udivmoddi4+0xaa>
 8000954:	deff      	udf	#255	; 0xff
 8000956:	fab2 f282 	clz	r2, r2
 800095a:	2a00      	cmp	r2, #0
 800095c:	d150      	bne.n	8000a00 <__udivmoddi4+0x154>
 800095e:	1bcb      	subs	r3, r1, r7
 8000960:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000964:	fa1f f887 	uxth.w	r8, r7
 8000968:	2601      	movs	r6, #1
 800096a:	fbb3 fcfe 	udiv	ip, r3, lr
 800096e:	0c21      	lsrs	r1, r4, #16
 8000970:	fb0e 331c 	mls	r3, lr, ip, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb08 f30c 	mul.w	r3, r8, ip
 800097c:	428b      	cmp	r3, r1
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0xe4>
 8000980:	1879      	adds	r1, r7, r1
 8000982:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0xe2>
 8000988:	428b      	cmp	r3, r1
 800098a:	f200 80e9 	bhi.w	8000b60 <__udivmoddi4+0x2b4>
 800098e:	4684      	mov	ip, r0
 8000990:	1ac9      	subs	r1, r1, r3
 8000992:	b2a3      	uxth	r3, r4
 8000994:	fbb1 f0fe 	udiv	r0, r1, lr
 8000998:	fb0e 1110 	mls	r1, lr, r0, r1
 800099c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009a0:	fb08 f800 	mul.w	r8, r8, r0
 80009a4:	45a0      	cmp	r8, r4
 80009a6:	d907      	bls.n	80009b8 <__udivmoddi4+0x10c>
 80009a8:	193c      	adds	r4, r7, r4
 80009aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ae:	d202      	bcs.n	80009b6 <__udivmoddi4+0x10a>
 80009b0:	45a0      	cmp	r8, r4
 80009b2:	f200 80d9 	bhi.w	8000b68 <__udivmoddi4+0x2bc>
 80009b6:	4618      	mov	r0, r3
 80009b8:	eba4 0408 	sub.w	r4, r4, r8
 80009bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009c0:	e7bf      	b.n	8000942 <__udivmoddi4+0x96>
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d909      	bls.n	80009da <__udivmoddi4+0x12e>
 80009c6:	2d00      	cmp	r5, #0
 80009c8:	f000 80b1 	beq.w	8000b2e <__udivmoddi4+0x282>
 80009cc:	2600      	movs	r6, #0
 80009ce:	e9c5 0100 	strd	r0, r1, [r5]
 80009d2:	4630      	mov	r0, r6
 80009d4:	4631      	mov	r1, r6
 80009d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009da:	fab3 f683 	clz	r6, r3
 80009de:	2e00      	cmp	r6, #0
 80009e0:	d14a      	bne.n	8000a78 <__udivmoddi4+0x1cc>
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d302      	bcc.n	80009ec <__udivmoddi4+0x140>
 80009e6:	4282      	cmp	r2, r0
 80009e8:	f200 80b8 	bhi.w	8000b5c <__udivmoddi4+0x2b0>
 80009ec:	1a84      	subs	r4, r0, r2
 80009ee:	eb61 0103 	sbc.w	r1, r1, r3
 80009f2:	2001      	movs	r0, #1
 80009f4:	468c      	mov	ip, r1
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	d0a8      	beq.n	800094c <__udivmoddi4+0xa0>
 80009fa:	e9c5 4c00 	strd	r4, ip, [r5]
 80009fe:	e7a5      	b.n	800094c <__udivmoddi4+0xa0>
 8000a00:	f1c2 0320 	rsb	r3, r2, #32
 8000a04:	fa20 f603 	lsr.w	r6, r0, r3
 8000a08:	4097      	lsls	r7, r2
 8000a0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a12:	40d9      	lsrs	r1, r3
 8000a14:	4330      	orrs	r0, r6
 8000a16:	0c03      	lsrs	r3, r0, #16
 8000a18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a1c:	fa1f f887 	uxth.w	r8, r7
 8000a20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a28:	fb06 f108 	mul.w	r1, r6, r8
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a32:	d909      	bls.n	8000a48 <__udivmoddi4+0x19c>
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a3a:	f080 808d 	bcs.w	8000b58 <__udivmoddi4+0x2ac>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 808a 	bls.w	8000b58 <__udivmoddi4+0x2ac>
 8000a44:	3e02      	subs	r6, #2
 8000a46:	443b      	add	r3, r7
 8000a48:	1a5b      	subs	r3, r3, r1
 8000a4a:	b281      	uxth	r1, r0
 8000a4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a58:	fb00 f308 	mul.w	r3, r0, r8
 8000a5c:	428b      	cmp	r3, r1
 8000a5e:	d907      	bls.n	8000a70 <__udivmoddi4+0x1c4>
 8000a60:	1879      	adds	r1, r7, r1
 8000a62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a66:	d273      	bcs.n	8000b50 <__udivmoddi4+0x2a4>
 8000a68:	428b      	cmp	r3, r1
 8000a6a:	d971      	bls.n	8000b50 <__udivmoddi4+0x2a4>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	4439      	add	r1, r7
 8000a70:	1acb      	subs	r3, r1, r3
 8000a72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a76:	e778      	b.n	800096a <__udivmoddi4+0xbe>
 8000a78:	f1c6 0c20 	rsb	ip, r6, #32
 8000a7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a84:	431c      	orrs	r4, r3
 8000a86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a96:	431f      	orrs	r7, r3
 8000a98:	0c3b      	lsrs	r3, r7, #16
 8000a9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9e:	fa1f f884 	uxth.w	r8, r4
 8000aa2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000aa6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aaa:	fb09 fa08 	mul.w	sl, r9, r8
 8000aae:	458a      	cmp	sl, r1
 8000ab0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ab4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ab8:	d908      	bls.n	8000acc <__udivmoddi4+0x220>
 8000aba:	1861      	adds	r1, r4, r1
 8000abc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ac0:	d248      	bcs.n	8000b54 <__udivmoddi4+0x2a8>
 8000ac2:	458a      	cmp	sl, r1
 8000ac4:	d946      	bls.n	8000b54 <__udivmoddi4+0x2a8>
 8000ac6:	f1a9 0902 	sub.w	r9, r9, #2
 8000aca:	4421      	add	r1, r4
 8000acc:	eba1 010a 	sub.w	r1, r1, sl
 8000ad0:	b2bf      	uxth	r7, r7
 8000ad2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ada:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ade:	fb00 f808 	mul.w	r8, r0, r8
 8000ae2:	45b8      	cmp	r8, r7
 8000ae4:	d907      	bls.n	8000af6 <__udivmoddi4+0x24a>
 8000ae6:	19e7      	adds	r7, r4, r7
 8000ae8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aec:	d22e      	bcs.n	8000b4c <__udivmoddi4+0x2a0>
 8000aee:	45b8      	cmp	r8, r7
 8000af0:	d92c      	bls.n	8000b4c <__udivmoddi4+0x2a0>
 8000af2:	3802      	subs	r0, #2
 8000af4:	4427      	add	r7, r4
 8000af6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000afa:	eba7 0708 	sub.w	r7, r7, r8
 8000afe:	fba0 8902 	umull	r8, r9, r0, r2
 8000b02:	454f      	cmp	r7, r9
 8000b04:	46c6      	mov	lr, r8
 8000b06:	4649      	mov	r1, r9
 8000b08:	d31a      	bcc.n	8000b40 <__udivmoddi4+0x294>
 8000b0a:	d017      	beq.n	8000b3c <__udivmoddi4+0x290>
 8000b0c:	b15d      	cbz	r5, 8000b26 <__udivmoddi4+0x27a>
 8000b0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b12:	eb67 0701 	sbc.w	r7, r7, r1
 8000b16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b1a:	40f2      	lsrs	r2, r6
 8000b1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b20:	40f7      	lsrs	r7, r6
 8000b22:	e9c5 2700 	strd	r2, r7, [r5]
 8000b26:	2600      	movs	r6, #0
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	462e      	mov	r6, r5
 8000b30:	4628      	mov	r0, r5
 8000b32:	e70b      	b.n	800094c <__udivmoddi4+0xa0>
 8000b34:	4606      	mov	r6, r0
 8000b36:	e6e9      	b.n	800090c <__udivmoddi4+0x60>
 8000b38:	4618      	mov	r0, r3
 8000b3a:	e6fd      	b.n	8000938 <__udivmoddi4+0x8c>
 8000b3c:	4543      	cmp	r3, r8
 8000b3e:	d2e5      	bcs.n	8000b0c <__udivmoddi4+0x260>
 8000b40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b44:	eb69 0104 	sbc.w	r1, r9, r4
 8000b48:	3801      	subs	r0, #1
 8000b4a:	e7df      	b.n	8000b0c <__udivmoddi4+0x260>
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	e7d2      	b.n	8000af6 <__udivmoddi4+0x24a>
 8000b50:	4660      	mov	r0, ip
 8000b52:	e78d      	b.n	8000a70 <__udivmoddi4+0x1c4>
 8000b54:	4681      	mov	r9, r0
 8000b56:	e7b9      	b.n	8000acc <__udivmoddi4+0x220>
 8000b58:	4666      	mov	r6, ip
 8000b5a:	e775      	b.n	8000a48 <__udivmoddi4+0x19c>
 8000b5c:	4630      	mov	r0, r6
 8000b5e:	e74a      	b.n	80009f6 <__udivmoddi4+0x14a>
 8000b60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b64:	4439      	add	r1, r7
 8000b66:	e713      	b.n	8000990 <__udivmoddi4+0xe4>
 8000b68:	3802      	subs	r0, #2
 8000b6a:	443c      	add	r4, r7
 8000b6c:	e724      	b.n	80009b8 <__udivmoddi4+0x10c>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_idiv0>:
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <LCD1602_EnablePulse>:

//***** Functions definitions *****//
//Private functions
//1) Enable EN pulse
static void LCD1602_EnablePulse(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <LCD1602_EnablePulse+0x38>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0c      	ldr	r2, [pc, #48]	; (8000bb0 <LCD1602_EnablePulse+0x3c>)
 8000b7e:	8811      	ldrh	r1, [r2, #0]
 8000b80:	2201      	movs	r2, #1
 8000b82:	4618      	mov	r0, r3
 8000b84:	f002 fc6e 	bl	8003464 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(writeTimeConstant);
 8000b88:	230a      	movs	r3, #10
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f97c 	bl	8000e88 <LCD1602_TIM_MicorSecDelay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <LCD1602_EnablePulse+0x38>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <LCD1602_EnablePulse+0x3c>)
 8000b96:	8811      	ldrh	r1, [r2, #0]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f002 fc62 	bl	8003464 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(60);
 8000ba0:	203c      	movs	r0, #60	; 0x3c
 8000ba2:	f000 f971 	bl	8000e88 <LCD1602_TIM_MicorSecDelay>
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000090 	.word	0x20000090
 8000bb0:	20000096 	.word	0x20000096

08000bb4 <LCD1602_RS>:
//2) RS control
static void LCD1602_RS(bool state)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d008      	beq.n	8000bd6 <LCD1602_RS+0x22>
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <LCD1602_RS+0x3c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <LCD1602_RS+0x40>)
 8000bca:	8811      	ldrh	r1, [r2, #0]
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f002 fc48 	bl	8003464 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
}
 8000bd4:	e007      	b.n	8000be6 <LCD1602_RS+0x32>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <LCD1602_RS+0x3c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <LCD1602_RS+0x40>)
 8000bdc:	8811      	ldrh	r1, [r2, #0]
 8000bde:	2200      	movs	r2, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f002 fc3f 	bl	8003464 <HAL_GPIO_WritePin>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000090 	.word	0x20000090
 8000bf4:	20000094 	.word	0x20000094

08000bf8 <LCD1602_write>:

//3) Write Parallel interface
static void LCD1602_write(uint8_t byte)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	f003 030f 	and.w	r3, r3, #15
 8000c08:	73fb      	strb	r3, [r7, #15]
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	091b      	lsrs	r3, r3, #4
 8000c0e:	73bb      	strb	r3, [r7, #14]
	 
	if(mode_8_4_I2C == 1)		//8bits mode
 8000c10:	4b61      	ldr	r3, [pc, #388]	; (8000d98 <LCD1602_write+0x1a0>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d15a      	bne.n	8000cce <LCD1602_write+0xd6>
	{
		//write data to output pins
		//LSB data
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000c18:	4b60      	ldr	r3, [pc, #384]	; (8000d9c <LCD1602_write+0x1a4>)
 8000c1a:	6818      	ldr	r0, [r3, #0]
 8000c1c:	4b60      	ldr	r3, [pc, #384]	; (8000da0 <LCD1602_write+0x1a8>)
 8000c1e:	8819      	ldrh	r1, [r3, #0]
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	461a      	mov	r2, r3
 8000c2a:	f002 fc1b 	bl	8003464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000c2e:	4b5b      	ldr	r3, [pc, #364]	; (8000d9c <LCD1602_write+0x1a4>)
 8000c30:	6818      	ldr	r0, [r3, #0]
 8000c32:	4b5c      	ldr	r3, [pc, #368]	; (8000da4 <LCD1602_write+0x1ac>)
 8000c34:	8819      	ldrh	r1, [r3, #0]
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	f003 0302 	and.w	r3, r3, #2
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	461a      	mov	r2, r3
 8000c40:	f002 fc10 	bl	8003464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000c44:	4b55      	ldr	r3, [pc, #340]	; (8000d9c <LCD1602_write+0x1a4>)
 8000c46:	6818      	ldr	r0, [r3, #0]
 8000c48:	4b57      	ldr	r3, [pc, #348]	; (8000da8 <LCD1602_write+0x1b0>)
 8000c4a:	8819      	ldrh	r1, [r3, #0]
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	f003 0304 	and.w	r3, r3, #4
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	461a      	mov	r2, r3
 8000c56:	f002 fc05 	bl	8003464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000c5a:	4b50      	ldr	r3, [pc, #320]	; (8000d9c <LCD1602_write+0x1a4>)
 8000c5c:	6818      	ldr	r0, [r3, #0]
 8000c5e:	4b53      	ldr	r3, [pc, #332]	; (8000dac <LCD1602_write+0x1b4>)
 8000c60:	8819      	ldrh	r1, [r3, #0]
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	f003 0308 	and.w	r3, r3, #8
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	f002 fbfa 	bl	8003464 <HAL_GPIO_WritePin>
		//MSB data
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000c70:	4b4f      	ldr	r3, [pc, #316]	; (8000db0 <LCD1602_write+0x1b8>)
 8000c72:	6818      	ldr	r0, [r3, #0]
 8000c74:	4b4f      	ldr	r3, [pc, #316]	; (8000db4 <LCD1602_write+0x1bc>)
 8000c76:	8819      	ldrh	r1, [r3, #0]
 8000c78:	7bbb      	ldrb	r3, [r7, #14]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	461a      	mov	r2, r3
 8000c82:	f002 fbef 	bl	8003464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000c86:	4b4a      	ldr	r3, [pc, #296]	; (8000db0 <LCD1602_write+0x1b8>)
 8000c88:	6818      	ldr	r0, [r3, #0]
 8000c8a:	4b4b      	ldr	r3, [pc, #300]	; (8000db8 <LCD1602_write+0x1c0>)
 8000c8c:	8819      	ldrh	r1, [r3, #0]
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	461a      	mov	r2, r3
 8000c98:	f002 fbe4 	bl	8003464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000c9c:	4b44      	ldr	r3, [pc, #272]	; (8000db0 <LCD1602_write+0x1b8>)
 8000c9e:	6818      	ldr	r0, [r3, #0]
 8000ca0:	4b46      	ldr	r3, [pc, #280]	; (8000dbc <LCD1602_write+0x1c4>)
 8000ca2:	8819      	ldrh	r1, [r3, #0]
 8000ca4:	7bbb      	ldrb	r3, [r7, #14]
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	461a      	mov	r2, r3
 8000cae:	f002 fbd9 	bl	8003464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000cb2:	4b3f      	ldr	r3, [pc, #252]	; (8000db0 <LCD1602_write+0x1b8>)
 8000cb4:	6818      	ldr	r0, [r3, #0]
 8000cb6:	4b42      	ldr	r3, [pc, #264]	; (8000dc0 <LCD1602_write+0x1c8>)
 8000cb8:	8819      	ldrh	r1, [r3, #0]
 8000cba:	7bbb      	ldrb	r3, [r7, #14]
 8000cbc:	f003 0308 	and.w	r3, r3, #8
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	f002 fbce 	bl	8003464 <HAL_GPIO_WritePin>
		//Write the Enable pulse
		LCD1602_EnablePulse();
 8000cc8:	f7ff ff54 	bl	8000b74 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
		//Write the Enable pulse
		LCD1602_EnablePulse();
	}
}
 8000ccc:	e05f      	b.n	8000d8e <LCD1602_write+0x196>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 8000cce:	4b32      	ldr	r3, [pc, #200]	; (8000d98 <LCD1602_write+0x1a0>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d15b      	bne.n	8000d8e <LCD1602_write+0x196>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000cd6:	4b36      	ldr	r3, [pc, #216]	; (8000db0 <LCD1602_write+0x1b8>)
 8000cd8:	6818      	ldr	r0, [r3, #0]
 8000cda:	4b36      	ldr	r3, [pc, #216]	; (8000db4 <LCD1602_write+0x1bc>)
 8000cdc:	8819      	ldrh	r1, [r3, #0]
 8000cde:	7bbb      	ldrb	r3, [r7, #14]
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	f002 fbbc 	bl	8003464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000cec:	4b30      	ldr	r3, [pc, #192]	; (8000db0 <LCD1602_write+0x1b8>)
 8000cee:	6818      	ldr	r0, [r3, #0]
 8000cf0:	4b31      	ldr	r3, [pc, #196]	; (8000db8 <LCD1602_write+0x1c0>)
 8000cf2:	8819      	ldrh	r1, [r3, #0]
 8000cf4:	7bbb      	ldrb	r3, [r7, #14]
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	f002 fbb1 	bl	8003464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000d02:	4b2b      	ldr	r3, [pc, #172]	; (8000db0 <LCD1602_write+0x1b8>)
 8000d04:	6818      	ldr	r0, [r3, #0]
 8000d06:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <LCD1602_write+0x1c4>)
 8000d08:	8819      	ldrh	r1, [r3, #0]
 8000d0a:	7bbb      	ldrb	r3, [r7, #14]
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	461a      	mov	r2, r3
 8000d14:	f002 fba6 	bl	8003464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000d18:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <LCD1602_write+0x1b8>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <LCD1602_write+0x1c8>)
 8000d1e:	8819      	ldrh	r1, [r3, #0]
 8000d20:	7bbb      	ldrb	r3, [r7, #14]
 8000d22:	f003 0308 	and.w	r3, r3, #8
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	461a      	mov	r2, r3
 8000d2a:	f002 fb9b 	bl	8003464 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8000d2e:	f7ff ff21 	bl	8000b74 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000d32:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <LCD1602_write+0x1b8>)
 8000d34:	6818      	ldr	r0, [r3, #0]
 8000d36:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <LCD1602_write+0x1bc>)
 8000d38:	8819      	ldrh	r1, [r3, #0]
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	461a      	mov	r2, r3
 8000d44:	f002 fb8e 	bl	8003464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000d48:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <LCD1602_write+0x1b8>)
 8000d4a:	6818      	ldr	r0, [r3, #0]
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <LCD1602_write+0x1c0>)
 8000d4e:	8819      	ldrh	r1, [r3, #0]
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	f002 fb83 	bl	8003464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <LCD1602_write+0x1b8>)
 8000d60:	6818      	ldr	r0, [r3, #0]
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <LCD1602_write+0x1c4>)
 8000d64:	8819      	ldrh	r1, [r3, #0]
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	f003 0304 	and.w	r3, r3, #4
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	461a      	mov	r2, r3
 8000d70:	f002 fb78 	bl	8003464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <LCD1602_write+0x1b8>)
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <LCD1602_write+0x1c8>)
 8000d7a:	8819      	ldrh	r1, [r3, #0]
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	461a      	mov	r2, r3
 8000d86:	f002 fb6d 	bl	8003464 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8000d8a:	f7ff fef3 	bl	8000b74 <LCD1602_EnablePulse>
}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	20000098 	.word	0x20000098
 8000da0:	2000009c 	.word	0x2000009c
 8000da4:	2000009e 	.word	0x2000009e
 8000da8:	200000a0 	.word	0x200000a0
 8000dac:	200000a2 	.word	0x200000a2
 8000db0:	200000a4 	.word	0x200000a4
 8000db4:	200000a8 	.word	0x200000a8
 8000db8:	200000aa 	.word	0x200000aa
 8000dbc:	200000ac 	.word	0x200000ac
 8000dc0:	200000ae 	.word	0x200000ae
 8000dc4:	00000000 	.word	0x00000000

08000dc8 <LCD1602_TIM_Config>:
//4) Microsecond delay functions
static void LCD1602_TIM_Config(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef myCLKtypeDef;
	uint32_t clockSpeed;
	uint32_t flashLatencyVar;
	HAL_RCC_GetClockConfig(&myCLKtypeDef, &flashLatencyVar);
 8000dce:	1d3a      	adds	r2, r7, #4
 8000dd0:	f107 0308 	add.w	r3, r7, #8
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f002 ffea 	bl	8003db0 <HAL_RCC_GetClockConfig>
	if(myCLKtypeDef.APB1CLKDivider == RCC_HCLK_DIV1)
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d103      	bne.n	8000dea <LCD1602_TIM_Config+0x22>
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq();
 8000de2:	f002 ffbd 	bl	8003d60 <HAL_RCC_GetPCLK1Freq>
 8000de6:	61f8      	str	r0, [r7, #28]
 8000de8:	e004      	b.n	8000df4 <LCD1602_TIM_Config+0x2c>
	}
	else
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq()*2;
 8000dea:	f002 ffb9 	bl	8003d60 <HAL_RCC_GetPCLK1Freq>
 8000dee:	4603      	mov	r3, r0
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	61fb      	str	r3, [r7, #28]
	}
	clockSpeed *= 0.000001;
 8000df4:	69f8      	ldr	r0, [r7, #28]
 8000df6:	f7ff fca7 	bl	8000748 <__aeabi_ui2d>
 8000dfa:	a321      	add	r3, pc, #132	; (adr r3, 8000e80 <LCD1602_TIM_Config+0xb8>)
 8000dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e00:	f7ff fa36 	bl	8000270 <__aeabi_dmul>
 8000e04:	4602      	mov	r2, r0
 8000e06:	460b      	mov	r3, r1
 8000e08:	4610      	mov	r0, r2
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f7ff fd16 	bl	800083c <__aeabi_d2uiz>
 8000e10:	4603      	mov	r3, r0
 8000e12:	61fb      	str	r3, [r7, #28]
	
	//Enable clock for TIM2 timer
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <LCD1602_TIM_Config+0xb0>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	4a17      	ldr	r2, [pc, #92]	; (8000e78 <LCD1602_TIM_Config+0xb0>)
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	6413      	str	r3, [r2, #64]	; 0x40
	//Set the mode to Count up
	TIM3->CR1 &= ~(0x0010);
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <LCD1602_TIM_Config+0xb4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a15      	ldr	r2, [pc, #84]	; (8000e7c <LCD1602_TIM_Config+0xb4>)
 8000e26:	f023 0310 	bic.w	r3, r3, #16
 8000e2a:	6013      	str	r3, [r2, #0]
	//Enable Update Event
	TIM3->CR1 &= ~(0x0001);
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <LCD1602_TIM_Config+0xb4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <LCD1602_TIM_Config+0xb4>)
 8000e32:	f023 0301 	bic.w	r3, r3, #1
 8000e36:	6013      	str	r3, [r2, #0]
	//Update request source 
	TIM3->CR1 &= ~(1UL << 2);
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <LCD1602_TIM_Config+0xb4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0f      	ldr	r2, [pc, #60]	; (8000e7c <LCD1602_TIM_Config+0xb4>)
 8000e3e:	f023 0304 	bic.w	r3, r3, #4
 8000e42:	6013      	str	r3, [r2, #0]
	// Set bit 3 High to enable One-Pulse mode
	TIM3->CR1 |= (1UL << 3);				  
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <LCD1602_TIM_Config+0xb4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0c      	ldr	r2, [pc, #48]	; (8000e7c <LCD1602_TIM_Config+0xb4>)
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	6013      	str	r3, [r2, #0]
	//Set the Prescalar
	TIM3->PSC = clockSpeed-1;
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <LCD1602_TIM_Config+0xb4>)
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	6293      	str	r3, [r2, #40]	; 0x28
	//Set and Auto-Reload Value to delay the timer 1 sec
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <LCD1602_TIM_Config+0xb4>)
 8000e5a:	2209      	movs	r2, #9
 8000e5c:	62da      	str	r2, [r3, #44]	; 0x2c
	//Event generation handling to reset the counter
	TIM3->EGR = 1; 					//Update generate auto
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <LCD1602_TIM_Config+0xb4>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	615a      	str	r2, [r3, #20]
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <LCD1602_TIM_Config+0xb4>)
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <LCD1602_TIM_Config+0xb4>)
 8000e6a:	f023 0301 	bic.w	r3, r3, #1
 8000e6e:	6113      	str	r3, [r2, #16]
}
 8000e70:	bf00      	nop
 8000e72:	3720      	adds	r7, #32
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40000400 	.word	0x40000400
 8000e80:	a0b5ed8d 	.word	0xa0b5ed8d
 8000e84:	3eb0c6f7 	.word	0x3eb0c6f7

08000e88 <LCD1602_TIM_MicorSecDelay>:
static void LCD1602_TIM_MicorSecDelay(uint32_t uSecDelay)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	TIM3->ARR = uSecDelay-1;
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <LCD1602_TIM_MicorSecDelay+0x44>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3b01      	subs	r3, #1
 8000e96:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->SR &= ~(0x0001);  // Clear UEV flag
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <LCD1602_TIM_MicorSecDelay+0x44>)
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <LCD1602_TIM_MicorSecDelay+0x44>)
 8000e9e:	f023 0301 	bic.w	r3, r3, #1
 8000ea2:	6113      	str	r3, [r2, #16]
	TIM3->CR1 |= 1UL;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <LCD1602_TIM_MicorSecDelay+0x44>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <LCD1602_TIM_MicorSecDelay+0x44>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6013      	str	r3, [r2, #0]
	while((TIM3->SR&0x0001) != 1);
 8000eb0:	bf00      	nop
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <LCD1602_TIM_MicorSecDelay+0x44>)
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d1f9      	bne.n	8000eb2 <LCD1602_TIM_MicorSecDelay+0x2a>
}
 8000ebe:	bf00      	nop
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	40000400 	.word	0x40000400

08000ed0 <LCD1602_writeCommand>:
//5) Write command
static void LCD1602_writeCommand(uint8_t command)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
	//Set RS to 0
	LCD1602_RS(false);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f7ff fe6a 	bl	8000bb4 <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(command);
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fe88 	bl	8000bf8 <LCD1602_write>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <LCD1602_writeData>:
//6) Write 8 bits data
static void LCD1602_writeData(uint8_t data)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	//Set RS to 1
	LCD1602_RS(true);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f7ff fe5a 	bl	8000bb4 <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(data);
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fe78 	bl	8000bf8 <LCD1602_write>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <LCD1602_Begin8BIT>:
}

//Public functions
//1) LCD begin 8 bits function
void LCD1602_Begin8BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_LSBs0to3, uint16_t D0, uint16_t D1, uint16_t D2, uint16_t D3, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	817b      	strh	r3, [r7, #10]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	813b      	strh	r3, [r7, #8]
	//Set GPIO Ports and Pins data
	PORT_RS_and_E = PORT_RS_E;
 8000f22:	4a2a      	ldr	r2, [pc, #168]	; (8000fcc <LCD1602_Begin8BIT+0xbc>)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6013      	str	r3, [r2, #0]
	PIN_RS = RS;
 8000f28:	4a29      	ldr	r2, [pc, #164]	; (8000fd0 <LCD1602_Begin8BIT+0xc0>)
 8000f2a:	897b      	ldrh	r3, [r7, #10]
 8000f2c:	8013      	strh	r3, [r2, #0]
	PIN_E = E;
 8000f2e:	4a29      	ldr	r2, [pc, #164]	; (8000fd4 <LCD1602_Begin8BIT+0xc4>)
 8000f30:	893b      	ldrh	r3, [r7, #8]
 8000f32:	8013      	strh	r3, [r2, #0]
	PORT_LSB = PORT_LSBs0to3;
 8000f34:	4a28      	ldr	r2, [pc, #160]	; (8000fd8 <LCD1602_Begin8BIT+0xc8>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
	D0_PIN = D0;
 8000f3a:	4a28      	ldr	r2, [pc, #160]	; (8000fdc <LCD1602_Begin8BIT+0xcc>)
 8000f3c:	8b3b      	ldrh	r3, [r7, #24]
 8000f3e:	8013      	strh	r3, [r2, #0]
	D1_PIN = D1;
 8000f40:	4a27      	ldr	r2, [pc, #156]	; (8000fe0 <LCD1602_Begin8BIT+0xd0>)
 8000f42:	8bbb      	ldrh	r3, [r7, #28]
 8000f44:	8013      	strh	r3, [r2, #0]
	D2_PIN = D2;
 8000f46:	4a27      	ldr	r2, [pc, #156]	; (8000fe4 <LCD1602_Begin8BIT+0xd4>)
 8000f48:	8c3b      	ldrh	r3, [r7, #32]
 8000f4a:	8013      	strh	r3, [r2, #0]
	D3_PIN = D3;
 8000f4c:	4a26      	ldr	r2, [pc, #152]	; (8000fe8 <LCD1602_Begin8BIT+0xd8>)
 8000f4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f50:	8013      	strh	r3, [r2, #0]
	PORT_MSB = PORT_MSBs4to7;
 8000f52:	4a26      	ldr	r2, [pc, #152]	; (8000fec <LCD1602_Begin8BIT+0xdc>)
 8000f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f56:	6013      	str	r3, [r2, #0]
	D4_PIN = D4;
 8000f58:	4a25      	ldr	r2, [pc, #148]	; (8000ff0 <LCD1602_Begin8BIT+0xe0>)
 8000f5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000f5c:	8013      	strh	r3, [r2, #0]
	D5_PIN = D5;
 8000f5e:	4a25      	ldr	r2, [pc, #148]	; (8000ff4 <LCD1602_Begin8BIT+0xe4>)
 8000f60:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000f62:	8013      	strh	r3, [r2, #0]
	D6_PIN = D6;
 8000f64:	4a24      	ldr	r2, [pc, #144]	; (8000ff8 <LCD1602_Begin8BIT+0xe8>)
 8000f66:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000f68:	8013      	strh	r3, [r2, #0]
	D7_PIN = D7;
 8000f6a:	4a24      	ldr	r2, [pc, #144]	; (8000ffc <LCD1602_Begin8BIT+0xec>)
 8000f6c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000f6e:	8013      	strh	r3, [r2, #0]
	//Initialise microsecond timer
	LCD1602_TIM_Config();
 8000f70:	f7ff ff2a 	bl	8000dc8 <LCD1602_TIM_Config>
	//Set the mode to 8 bits
	mode_8_4_I2C = 1;
 8000f74:	4b22      	ldr	r3, [pc, #136]	; (8001000 <LCD1602_Begin8BIT+0xf0>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
	//Function set variable to 8 bits mode
	FunctionSet = 0x38;
 8000f7a:	4b22      	ldr	r3, [pc, #136]	; (8001004 <LCD1602_Begin8BIT+0xf4>)
 8000f7c:	2238      	movs	r2, #56	; 0x38
 8000f7e:	701a      	strb	r2, [r3, #0]
	
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 8000f80:	2014      	movs	r0, #20
 8000f82:	f001 fb09 	bl	8002598 <HAL_Delay>
	//2. Attentions sequence
	LCD1602_writeCommand(0x30);
 8000f86:	2030      	movs	r0, #48	; 0x30
 8000f88:	f7ff ffa2 	bl	8000ed0 <LCD1602_writeCommand>
	HAL_Delay(5);
 8000f8c:	2005      	movs	r0, #5
 8000f8e:	f001 fb03 	bl	8002598 <HAL_Delay>
	LCD1602_writeCommand(0x30);
 8000f92:	2030      	movs	r0, #48	; 0x30
 8000f94:	f7ff ff9c 	bl	8000ed0 <LCD1602_writeCommand>
	HAL_Delay(1);
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f001 fafd 	bl	8002598 <HAL_Delay>
	LCD1602_writeCommand(0x30);
 8000f9e:	2030      	movs	r0, #48	; 0x30
 8000fa0:	f7ff ff96 	bl	8000ed0 <LCD1602_writeCommand>
	HAL_Delay(1);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f001 faf7 	bl	8002598 <HAL_Delay>
	//3. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N | LCD_FUNCTION_DL);
 8000faa:	2038      	movs	r0, #56	; 0x38
 8000fac:	f7ff ff90 	bl	8000ed0 <LCD1602_writeCommand>
	//4. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8000fb0:	200f      	movs	r0, #15
 8000fb2:	f7ff ff8d 	bl	8000ed0 <LCD1602_writeCommand>
	//5. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f7ff ff8a 	bl	8000ed0 <LCD1602_writeCommand>
	HAL_Delay(2);
 8000fbc:	2002      	movs	r0, #2
 8000fbe:	f001 faeb 	bl	8002598 <HAL_Delay>
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000090 	.word	0x20000090
 8000fd0:	20000094 	.word	0x20000094
 8000fd4:	20000096 	.word	0x20000096
 8000fd8:	20000098 	.word	0x20000098
 8000fdc:	2000009c 	.word	0x2000009c
 8000fe0:	2000009e 	.word	0x2000009e
 8000fe4:	200000a0 	.word	0x200000a0
 8000fe8:	200000a2 	.word	0x200000a2
 8000fec:	200000a4 	.word	0x200000a4
 8000ff0:	200000a8 	.word	0x200000a8
 8000ff4:	200000aa 	.word	0x200000aa
 8000ff8:	200000ac 	.word	0x200000ac
 8000ffc:	200000ae 	.word	0x200000ae
 8001000:	20000000 	.word	0x20000000
 8001004:	20000001 	.word	0x20000001

08001008 <LCD1602_print>:
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
	HAL_Delay(3);
}
//3) LCD print string
void LCD1602_print(char string[])
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	e009      	b.n	800102a <LCD1602_print+0x22>
	{
		LCD1602_writeData((uint8_t)string[i]);
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff66 	bl	8000ef0 <LCD1602_writeData>
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	3301      	adds	r3, #1
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	2b0f      	cmp	r3, #15
 800102e:	d805      	bhi.n	800103c <LCD1602_print+0x34>
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1ec      	bne.n	8001016 <LCD1602_print+0xe>
	}
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <LCD1602_setCursor>:
//4) set cursor position
void LCD1602_setCursor(uint8_t row, uint8_t col)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	460a      	mov	r2, r1
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	4613      	mov	r3, r2
 8001052:	71bb      	strb	r3, [r7, #6]
	uint8_t maskData;
	maskData = (col-1)&0x0F;
 8001054:	79bb      	ldrb	r3, [r7, #6]
 8001056:	3b01      	subs	r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	73fb      	strb	r3, [r7, #15]
	if(row==1)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d108      	bne.n	8001078 <LCD1602_setCursor+0x34>
	{
		maskData |= (0x80);
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800106c:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff2d 	bl	8000ed0 <LCD1602_writeCommand>
	else
	{
		maskData |= (0xc0);
		LCD1602_writeCommand(maskData);
	}
}	
 8001076:	e007      	b.n	8001088 <LCD1602_setCursor+0x44>
		maskData |= (0xc0);
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800107e:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff24 	bl	8000ed0 <LCD1602_writeCommand>
}	
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <LCD1602_2ndLine>:
void LCD1602_1stLine(void)
{
	LCD1602_setCursor(1,1);
}
void LCD1602_2ndLine(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	LCD1602_setCursor(2,1);
 8001094:	2101      	movs	r1, #1
 8001096:	2002      	movs	r0, #2
 8001098:	f7ff ffd4 	bl	8001044 <LCD1602_setCursor>
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <LCD1602_clear>:
	DisplayControl |= (0x02);
	LCD1602_writeCommand(DisplayControl);
}
//7) Clear display
void LCD1602_clear(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff13 	bl	8000ed0 <LCD1602_writeCommand>
	HAL_Delay(3);
 80010aa:	2003      	movs	r0, #3
 80010ac:	f001 fa74 	bl	8002598 <HAL_Delay>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <LCD1602_PrintInt>:
}

//********** Print numbers to LCD **********//
//1. Integer
void LCD1602_PrintInt(int number)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	char numStr[16];
	sprintf(numStr,"%d", number);
 80010bc:	f107 0308 	add.w	r3, r7, #8
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	4906      	ldr	r1, [pc, #24]	; (80010dc <LCD1602_PrintInt+0x28>)
 80010c4:	4618      	mov	r0, r3
 80010c6:	f003 fc07 	bl	80048d8 <siprintf>
	LCD1602_print(numStr);
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff9a 	bl	8001008 <LCD1602_print>
}
 80010d4:	bf00      	nop
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	08005b10 	.word	0x08005b10

080010e0 <LCD1602_PrintFloat>:
	LCD1602_print(numStr);
}
*/

void LCD1602_PrintFloat(float number)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08c      	sub	sp, #48	; 0x30
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	ed87 0a01 	vstr	s0, [r7, #4]
	int num[5];
	number = number * 100;
 80010ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ee:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001310 <LCD1602_PrintFloat+0x230>
 80010f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f6:	edc7 7a01 	vstr	s15, [r7, #4]
	num[0] = (int)number / 10000;
 80010fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80010fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001102:	ee17 1a90 	vmov	r1, s15
 8001106:	4b83      	ldr	r3, [pc, #524]	; (8001314 <LCD1602_PrintFloat+0x234>)
 8001108:	fb83 2301 	smull	r2, r3, r3, r1
 800110c:	131a      	asrs	r2, r3, #12
 800110e:	17cb      	asrs	r3, r1, #31
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	60fb      	str	r3, [r7, #12]
	number = (int)number % 10000;
 8001114:	edd7 7a01 	vldr	s15, [r7, #4]
 8001118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800111c:	ee17 2a90 	vmov	r2, s15
 8001120:	4b7c      	ldr	r3, [pc, #496]	; (8001314 <LCD1602_PrintFloat+0x234>)
 8001122:	fb83 1302 	smull	r1, r3, r3, r2
 8001126:	1319      	asrs	r1, r3, #12
 8001128:	17d3      	asrs	r3, r2, #31
 800112a:	1acb      	subs	r3, r1, r3
 800112c:	f242 7110 	movw	r1, #10000	; 0x2710
 8001130:	fb01 f303 	mul.w	r3, r1, r3
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113e:	edc7 7a01 	vstr	s15, [r7, #4]
	num[1] = (int)number / 1000;
 8001142:	edd7 7a01 	vldr	s15, [r7, #4]
 8001146:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800114a:	ee17 1a90 	vmov	r1, s15
 800114e:	4b72      	ldr	r3, [pc, #456]	; (8001318 <LCD1602_PrintFloat+0x238>)
 8001150:	fb83 2301 	smull	r2, r3, r3, r1
 8001154:	119a      	asrs	r2, r3, #6
 8001156:	17cb      	asrs	r3, r1, #31
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	613b      	str	r3, [r7, #16]
	number = (int)number % 1000;
 800115c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001164:	ee17 2a90 	vmov	r2, s15
 8001168:	4b6b      	ldr	r3, [pc, #428]	; (8001318 <LCD1602_PrintFloat+0x238>)
 800116a:	fb83 1302 	smull	r1, r3, r3, r2
 800116e:	1199      	asrs	r1, r3, #6
 8001170:	17d3      	asrs	r3, r2, #31
 8001172:	1acb      	subs	r3, r1, r3
 8001174:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001178:	fb01 f303 	mul.w	r3, r1, r3
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001186:	edc7 7a01 	vstr	s15, [r7, #4]
	num[2] = (int)number / 100;
 800118a:	edd7 7a01 	vldr	s15, [r7, #4]
 800118e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001192:	ee17 1a90 	vmov	r1, s15
 8001196:	4b61      	ldr	r3, [pc, #388]	; (800131c <LCD1602_PrintFloat+0x23c>)
 8001198:	fb83 2301 	smull	r2, r3, r3, r1
 800119c:	115a      	asrs	r2, r3, #5
 800119e:	17cb      	asrs	r3, r1, #31
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	617b      	str	r3, [r7, #20]
	number = (int)number % 100;
 80011a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ac:	ee17 2a90 	vmov	r2, s15
 80011b0:	4b5a      	ldr	r3, [pc, #360]	; (800131c <LCD1602_PrintFloat+0x23c>)
 80011b2:	fb83 1302 	smull	r1, r3, r3, r2
 80011b6:	1159      	asrs	r1, r3, #5
 80011b8:	17d3      	asrs	r3, r2, #31
 80011ba:	1acb      	subs	r3, r1, r3
 80011bc:	2164      	movs	r1, #100	; 0x64
 80011be:	fb01 f303 	mul.w	r3, r1, r3
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011cc:	edc7 7a01 	vstr	s15, [r7, #4]
	num[3] = (int)number / 10;
 80011d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d8:	ee17 1a90 	vmov	r1, s15
 80011dc:	4b50      	ldr	r3, [pc, #320]	; (8001320 <LCD1602_PrintFloat+0x240>)
 80011de:	fb83 2301 	smull	r2, r3, r3, r1
 80011e2:	109a      	asrs	r2, r3, #2
 80011e4:	17cb      	asrs	r3, r1, #31
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	61bb      	str	r3, [r7, #24]
	number = (int)number % 10;
 80011ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f2:	ee17 1a90 	vmov	r1, s15
 80011f6:	4b4a      	ldr	r3, [pc, #296]	; (8001320 <LCD1602_PrintFloat+0x240>)
 80011f8:	fb83 2301 	smull	r2, r3, r3, r1
 80011fc:	109a      	asrs	r2, r3, #2
 80011fe:	17cb      	asrs	r3, r1, #31
 8001200:	1ad2      	subs	r2, r2, r3
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	1aca      	subs	r2, r1, r3
 800120c:	ee07 2a90 	vmov	s15, r2
 8001210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001214:	edc7 7a01 	vstr	s15, [r7, #4]
	num[4] = (int)number;
 8001218:	edd7 7a01 	vldr	s15, [r7, #4]
 800121c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001220:	ee17 3a90 	vmov	r3, s15
 8001224:	61fb      	str	r3, [r7, #28]

	if (num[0] == 0) {
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d153      	bne.n	80012d4 <LCD1602_PrintFloat+0x1f4>
		if (num[1] == 0) {
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d136      	bne.n	80012a0 <LCD1602_PrintFloat+0x1c0>
			if (num[2] == 0) {
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d119      	bne.n	800126c <LCD1602_PrintFloat+0x18c>
				LCD1602_PrintInt(0);
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff ff3b 	bl	80010b4 <LCD1602_PrintInt>
				LCD1602_print(".");
 800123e:	4839      	ldr	r0, [pc, #228]	; (8001324 <LCD1602_PrintFloat+0x244>)
 8001240:	f7ff fee2 	bl	8001008 <LCD1602_print>
				for (int i = 3; i < 5; i++) {
 8001244:	2303      	movs	r3, #3
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001248:	e00c      	b.n	8001264 <LCD1602_PrintFloat+0x184>
					LCD1602_PrintInt(num[i]);
 800124a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001252:	4413      	add	r3, r2
 8001254:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff2b 	bl	80010b4 <LCD1602_PrintInt>
				for (int i = 3; i < 5; i++) {
 800125e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001260:	3301      	adds	r3, #1
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001266:	2b04      	cmp	r3, #4
 8001268:	ddef      	ble.n	800124a <LCD1602_PrintFloat+0x16a>
		for (int i = 0; i < 5; i++) {
			printf(num[i]);
			if (i == 2) LCD1602_print(".");
		}
	}
}
 800126a:	e04c      	b.n	8001306 <LCD1602_PrintFloat+0x226>
				for (int i = 2; i < 5; i++) {
 800126c:	2302      	movs	r3, #2
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001270:	e012      	b.n	8001298 <LCD1602_PrintFloat+0x1b8>
					LCD1602_PrintInt(num[i]);
 8001272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800127a:	4413      	add	r3, r2
 800127c:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff17 	bl	80010b4 <LCD1602_PrintInt>
					if (i == 2) LCD1602_print(".");
 8001286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001288:	2b02      	cmp	r3, #2
 800128a:	d102      	bne.n	8001292 <LCD1602_PrintFloat+0x1b2>
 800128c:	4825      	ldr	r0, [pc, #148]	; (8001324 <LCD1602_PrintFloat+0x244>)
 800128e:	f7ff febb 	bl	8001008 <LCD1602_print>
				for (int i = 2; i < 5; i++) {
 8001292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001294:	3301      	adds	r3, #1
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
 8001298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129a:	2b04      	cmp	r3, #4
 800129c:	dde9      	ble.n	8001272 <LCD1602_PrintFloat+0x192>
}
 800129e:	e032      	b.n	8001306 <LCD1602_PrintFloat+0x226>
			for (int i = 1; i < 5; i++) {
 80012a0:	2301      	movs	r3, #1
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
 80012a4:	e012      	b.n	80012cc <LCD1602_PrintFloat+0x1ec>
				LCD1602_PrintInt(num[i]);
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80012ae:	4413      	add	r3, r2
 80012b0:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fefd 	bl	80010b4 <LCD1602_PrintInt>
				if (i == 2) LCD1602_print(".");
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d102      	bne.n	80012c6 <LCD1602_PrintFloat+0x1e6>
 80012c0:	4818      	ldr	r0, [pc, #96]	; (8001324 <LCD1602_PrintFloat+0x244>)
 80012c2:	f7ff fea1 	bl	8001008 <LCD1602_print>
			for (int i = 1; i < 5; i++) {
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	3301      	adds	r3, #1
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	dde9      	ble.n	80012a6 <LCD1602_PrintFloat+0x1c6>
}
 80012d2:	e018      	b.n	8001306 <LCD1602_PrintFloat+0x226>
		for (int i = 0; i < 5; i++) {
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
 80012d8:	e012      	b.n	8001300 <LCD1602_PrintFloat+0x220>
			printf(num[i]);
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80012e2:	4413      	add	r3, r2
 80012e4:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f003 fadd 	bl	80048a8 <iprintf>
			if (i == 2) LCD1602_print(".");
 80012ee:	6a3b      	ldr	r3, [r7, #32]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d102      	bne.n	80012fa <LCD1602_PrintFloat+0x21a>
 80012f4:	480b      	ldr	r0, [pc, #44]	; (8001324 <LCD1602_PrintFloat+0x244>)
 80012f6:	f7ff fe87 	bl	8001008 <LCD1602_print>
		for (int i = 0; i < 5; i++) {
 80012fa:	6a3b      	ldr	r3, [r7, #32]
 80012fc:	3301      	adds	r3, #1
 80012fe:	623b      	str	r3, [r7, #32]
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	2b04      	cmp	r3, #4
 8001304:	dde9      	ble.n	80012da <LCD1602_PrintFloat+0x1fa>
}
 8001306:	bf00      	nop
 8001308:	3730      	adds	r7, #48	; 0x30
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	42c80000 	.word	0x42c80000
 8001314:	68db8bad 	.word	0x68db8bad
 8001318:	10624dd3 	.word	0x10624dd3
 800131c:	51eb851f 	.word	0x51eb851f
 8001320:	66666667 	.word	0x66666667
 8001324:	08005b14 	.word	0x08005b14

08001328 <Set_Pin_Output>:
//Definir los puertos donde esta el sensor:
#define DHT11_PORT DHT11_GPIO_Port
#define DHT11_PIN DHT11_Pin

void Set_Pin_Output (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) //pin como out
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001344:	887b      	ldrh	r3, [r7, #2]
 8001346:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	4619      	mov	r1, r3
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f001 fed0 	bl	80030fc <HAL_GPIO_Init>
}
 800135c:	bf00      	nop
 800135e:	3720      	adds	r7, #32
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <Set_Pin_Input>:
void Set_Pin_Input (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)  //pin como in
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001380:	887b      	ldrh	r3, [r7, #2]
 8001382:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	4619      	mov	r1, r3
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f001 feb2 	bl	80030fc <HAL_GPIO_Init>
}
 8001398:	bf00      	nop
 800139a:	3720      	adds	r7, #32
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <delay>:

void delay (uint16_t time)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	80fb      	strh	r3, [r7, #6]
	/*Para generar un delay en microsegundos*/
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <delay+0x30>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2200      	movs	r2, #0
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 80013b2:	bf00      	nop
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <delay+0x30>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d3f9      	bcc.n	80013b4 <delay+0x14>
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	200001fc 	.word	0x200001fc

080013d4 <DHT11_Start>:

void DHT11_Start (void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);    //Inicia el pin como HIGH
 80013d8:	2201      	movs	r2, #1
 80013da:	2102      	movs	r1, #2
 80013dc:	480c      	ldr	r0, [pc, #48]	; (8001410 <DHT11_Start+0x3c>)
 80013de:	f002 f841 	bl	8003464 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80013e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80013e6:	f001 f8d7 	bl	8002598 <HAL_Delay>
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);         //pin como out para transmitir
 80013ea:	2102      	movs	r1, #2
 80013ec:	4808      	ldr	r0, [pc, #32]	; (8001410 <DHT11_Start+0x3c>)
 80013ee:	f7ff ff9b 	bl	8001328 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   //pin en LOW para iniciar la comunicacion
 80013f2:	2200      	movs	r2, #0
 80013f4:	2102      	movs	r1, #2
 80013f6:	4806      	ldr	r0, [pc, #24]	; (8001410 <DHT11_Start+0x3c>)
 80013f8:	f002 f834 	bl	8003464 <HAL_GPIO_WritePin>
	delay (18000);   								//18ms
 80013fc:	f244 6050 	movw	r0, #18000	; 0x4650
 8001400:	f7ff ffce 	bl	80013a0 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);           //pin como in para recibir
 8001404:	2102      	movs	r1, #2
 8001406:	4802      	ldr	r0, [pc, #8]	; (8001410 <DHT11_Start+0x3c>)
 8001408:	f7ff ffac 	bl	8001364 <Set_Pin_Input>
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40020000 	.word	0x40020000

08001414 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	71fb      	strb	r3, [r7, #7]
	delay (40);
 800141e:	2028      	movs	r0, #40	; 0x28
 8001420:	f7ff ffbe 	bl	80013a0 <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001424:	2102      	movs	r1, #2
 8001426:	4811      	ldr	r0, [pc, #68]	; (800146c <DHT11_Check_Response+0x58>)
 8001428:	f002 f804 	bl	8003434 <HAL_GPIO_ReadPin>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10e      	bne.n	8001450 <DHT11_Check_Response+0x3c>
	{
		delay (80);
 8001432:	2050      	movs	r0, #80	; 0x50
 8001434:	f7ff ffb4 	bl	80013a0 <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;   //El pin responde
 8001438:	2102      	movs	r1, #2
 800143a:	480c      	ldr	r0, [pc, #48]	; (800146c <DHT11_Check_Response+0x58>)
 800143c:	f001 fffa 	bl	8003434 <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d002      	beq.n	800144c <DHT11_Check_Response+0x38>
 8001446:	2301      	movs	r3, #1
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	e001      	b.n	8001450 <DHT11_Check_Response+0x3c>
		else Response = -1;
 800144c:	23ff      	movs	r3, #255	; 0xff
 800144e:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));      			//Espera a que el pin se ponga LOW
 8001450:	bf00      	nop
 8001452:	2102      	movs	r1, #2
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <DHT11_Check_Response+0x58>)
 8001456:	f001 ffed 	bl	8003434 <HAL_GPIO_ReadPin>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f8      	bne.n	8001452 <DHT11_Check_Response+0x3e>

	return Response;
 8001460:	79fb      	ldrb	r3, [r7, #7]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40020000 	.word	0x40020000

08001470 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001476:	2300      	movs	r3, #0
 8001478:	71bb      	strb	r3, [r7, #6]
 800147a:	e037      	b.n	80014ec <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));     //Espera a que el pin se ponga HIGH
 800147c:	bf00      	nop
 800147e:	2102      	movs	r1, #2
 8001480:	481e      	ldr	r0, [pc, #120]	; (80014fc <DHT11_Read+0x8c>)
 8001482:	f001 ffd7 	bl	8003434 <HAL_GPIO_ReadPin>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f8      	beq.n	800147e <DHT11_Read+0xe>
		delay (40);  											 //40 us
 800148c:	2028      	movs	r0, #40	; 0x28
 800148e:	f7ff ff87 	bl	80013a0 <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))  		 //Si el pin esta en LOW
 8001492:	2102      	movs	r1, #2
 8001494:	4819      	ldr	r0, [pc, #100]	; (80014fc <DHT11_Read+0x8c>)
 8001496:	f001 ffcd 	bl	8003434 <HAL_GPIO_ReadPin>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d10e      	bne.n	80014be <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   									 // write 0
 80014a0:	79bb      	ldrb	r3, [r7, #6]
 80014a2:	f1c3 0307 	rsb	r3, r3, #7
 80014a6:	2201      	movs	r2, #1
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	b25b      	sxtb	r3, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	b25a      	sxtb	r2, r3
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	4013      	ands	r3, r2
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	71fb      	strb	r3, [r7, #7]
 80014bc:	e00b      	b.n	80014d6 <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  									 //Si el pin esta en HIHG, write 1
 80014be:	79bb      	ldrb	r3, [r7, #6]
 80014c0:	f1c3 0307 	rsb	r3, r3, #7
 80014c4:	2201      	movs	r2, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	b25a      	sxtb	r2, r3
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  	 //Espera a que el pin se ponga LOW
 80014d6:	bf00      	nop
 80014d8:	2102      	movs	r1, #2
 80014da:	4808      	ldr	r0, [pc, #32]	; (80014fc <DHT11_Read+0x8c>)
 80014dc:	f001 ffaa 	bl	8003434 <HAL_GPIO_ReadPin>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f8      	bne.n	80014d8 <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 80014e6:	79bb      	ldrb	r3, [r7, #6]
 80014e8:	3301      	adds	r3, #1
 80014ea:	71bb      	strb	r3, [r7, #6]
 80014ec:	79bb      	ldrb	r3, [r7, #6]
 80014ee:	2b07      	cmp	r3, #7
 80014f0:	d9c4      	bls.n	800147c <DHT11_Read+0xc>
	}
	return i;
 80014f2:	79fb      	ldrb	r3, [r7, #7]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40020000 	.word	0x40020000

08001500 <leerDatosSensorDHT11>:
void leerDatosSensorDHT11(){
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	  DHT11_Start();              		  //se inicializa el sensor
 8001504:	f7ff ff66 	bl	80013d4 <DHT11_Start>
	  presencia = DHT11_Check_Response(); //esperamos a su respuesta
 8001508:	f7ff ff84 	bl	8001414 <DHT11_Check_Response>
 800150c:	4603      	mov	r3, r0
 800150e:	461a      	mov	r2, r3
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <leerDatosSensorDHT11+0x8c>)
 8001512:	701a      	strb	r2, [r3, #0]
	  Rh_byte1 = DHT11_Read();			  //
 8001514:	f7ff ffac 	bl	8001470 <DHT11_Read>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <leerDatosSensorDHT11+0x90>)
 800151e:	701a      	strb	r2, [r3, #0]
	  Rh_byte2 = DHT11_Read();			  // Se leen los 5 siguientes bytes de datos correspondientes a la humedad y temperatura
 8001520:	f7ff ffa6 	bl	8001470 <DHT11_Read>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <leerDatosSensorDHT11+0x94>)
 800152a:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT11_Read();          //
 800152c:	f7ff ffa0 	bl	8001470 <DHT11_Read>
 8001530:	4603      	mov	r3, r0
 8001532:	461a      	mov	r2, r3
 8001534:	4b18      	ldr	r3, [pc, #96]	; (8001598 <leerDatosSensorDHT11+0x98>)
 8001536:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT11_Read();          //
 8001538:	f7ff ff9a 	bl	8001470 <DHT11_Read>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <leerDatosSensorDHT11+0x9c>)
 8001542:	701a      	strb	r2, [r3, #0]
	  SUM = DHT11_Read();
 8001544:	f7ff ff94 	bl	8001470 <DHT11_Read>
 8001548:	4603      	mov	r3, r0
 800154a:	b29a      	uxth	r2, r3
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <leerDatosSensorDHT11+0xa0>)
 800154e:	801a      	strh	r2, [r3, #0]

	  TEMP = Temp_byte1;                  //valor de temperatura
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <leerDatosSensorDHT11+0x98>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	b29a      	uxth	r2, r3
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <leerDatosSensorDHT11+0xa4>)
 8001558:	801a      	strh	r2, [r3, #0]
	  RH = Rh_byte1;					  //valor de humedad
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <leerDatosSensorDHT11+0x90>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b29a      	uxth	r2, r3
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <leerDatosSensorDHT11+0xa8>)
 8001562:	801a      	strh	r2, [r3, #0]

	  temperatura = (float) TEMP;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <leerDatosSensorDHT11+0xa4>)
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <leerDatosSensorDHT11+0xac>)
 8001572:	edc3 7a00 	vstr	s15, [r3]
	  humedad = (float) RH;
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <leerDatosSensorDHT11+0xa8>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	ee07 3a90 	vmov	s15, r3
 800157e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <leerDatosSensorDHT11+0xb0>)
 8001584:	edc3 7a00 	vstr	s15, [r3]
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200000bc 	.word	0x200000bc
 8001590:	2000015c 	.word	0x2000015c
 8001594:	200001f5 	.word	0x200001f5
 8001598:	200001f4 	.word	0x200001f4
 800159c:	2000028e 	.word	0x2000028e
 80015a0:	2000028c 	.word	0x2000028c
 80015a4:	200001a8 	.word	0x200001a8
 80015a8:	2000015e 	.word	0x2000015e
 80015ac:	200000b4 	.word	0x200000b4
 80015b0:	200000b8 	.word	0x200000b8

080015b4 <escribirDatosDHT11aLCD>:

void  escribirDatosDHT11aLCD(){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	LCD1602_clear();
 80015b8:	f7ff fd72 	bl	80010a0 <LCD1602_clear>
	LCD1602_print("Temp: ");            //valores mostrados en la LCD
 80015bc:	480e      	ldr	r0, [pc, #56]	; (80015f8 <escribirDatosDHT11aLCD+0x44>)
 80015be:	f7ff fd23 	bl	8001008 <LCD1602_print>
	LCD1602_PrintFloat(temperatura);
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <escribirDatosDHT11aLCD+0x48>)
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	eeb0 0a67 	vmov.f32	s0, s15
 80015cc:	f7ff fd88 	bl	80010e0 <LCD1602_PrintFloat>
	LCD1602_print(" *C");
 80015d0:	480b      	ldr	r0, [pc, #44]	; (8001600 <escribirDatosDHT11aLCD+0x4c>)
 80015d2:	f7ff fd19 	bl	8001008 <LCD1602_print>
	LCD1602_2ndLine();
 80015d6:	f7ff fd5b 	bl	8001090 <LCD1602_2ndLine>
	LCD1602_print("RH: ");
 80015da:	480a      	ldr	r0, [pc, #40]	; (8001604 <escribirDatosDHT11aLCD+0x50>)
 80015dc:	f7ff fd14 	bl	8001008 <LCD1602_print>
	LCD1602_PrintFloat(humedad);
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <escribirDatosDHT11aLCD+0x54>)
 80015e2:	edd3 7a00 	vldr	s15, [r3]
 80015e6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ea:	f7ff fd79 	bl	80010e0 <LCD1602_PrintFloat>
	LCD1602_print("%");
 80015ee:	4807      	ldr	r0, [pc, #28]	; (800160c <escribirDatosDHT11aLCD+0x58>)
 80015f0:	f7ff fd0a 	bl	8001008 <LCD1602_print>
}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	08005b18 	.word	0x08005b18
 80015fc:	200000b4 	.word	0x200000b4
 8001600:	08005b20 	.word	0x08005b20
 8001604:	08005b24 	.word	0x08005b24
 8001608:	200000b8 	.word	0x200000b8
 800160c:	08005b2c 	.word	0x08005b2c

08001610 <HAL_GPIO_EXTI_Callback>:
////////////////////////////////*****CALLBACKS*****///////////////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin == Boton_Pin) && (bomba==0)){
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d128      	bne.n	8001672 <HAL_GPIO_EXTI_Callback+0x62>
 8001620:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <HAL_GPIO_EXTI_Callback+0x80>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	f083 0301 	eor.w	r3, r3, #1
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d021      	beq.n	8001672 <HAL_GPIO_EXTI_Callback+0x62>
		if((valorAgua>1350)&&(humedad<60)){
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_GPIO_EXTI_Callback+0x84>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f240 5246 	movw	r2, #1350	; 0x546
 8001636:	4293      	cmp	r3, r2
 8001638:	d915      	bls.n	8001666 <HAL_GPIO_EXTI_Callback+0x56>
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_GPIO_EXTI_Callback+0x88>)
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800169c <HAL_GPIO_EXTI_Callback+0x8c>
 8001644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164c:	d50b      	bpl.n	8001666 <HAL_GPIO_EXTI_Callback+0x56>
			HAL_TIM_Base_Start_IT(&htim2);
 800164e:	4814      	ldr	r0, [pc, #80]	; (80016a0 <HAL_GPIO_EXTI_Callback+0x90>)
 8001650:	f002 fc98 	bl	8003f84 <HAL_TIM_Base_Start_IT>
			HAL_GPIO_WritePin(GPIOD,BombaAgua_Pin,1);
 8001654:	2201      	movs	r2, #1
 8001656:	2110      	movs	r1, #16
 8001658:	4812      	ldr	r0, [pc, #72]	; (80016a4 <HAL_GPIO_EXTI_Callback+0x94>)
 800165a:	f001 ff03 	bl	8003464 <HAL_GPIO_WritePin>
			bomba = 1;
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <HAL_GPIO_EXTI_Callback+0x80>)
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
		if((valorAgua>1350)&&(humedad<60)){
 8001664:	e010      	b.n	8001688 <HAL_GPIO_EXTI_Callback+0x78>
		}
		else{
			LCD1602_clear();
 8001666:	f7ff fd1b 	bl	80010a0 <LCD1602_clear>
			LCD1602_print("No hay agua");
 800166a:	480f      	ldr	r0, [pc, #60]	; (80016a8 <HAL_GPIO_EXTI_Callback+0x98>)
 800166c:	f7ff fccc 	bl	8001008 <LCD1602_print>
		if((valorAgua>1350)&&(humedad<60)){
 8001670:	e00a      	b.n	8001688 <HAL_GPIO_EXTI_Callback+0x78>
		}

	}
	else{
		LCD1602_clear();
 8001672:	f7ff fd15 	bl	80010a0 <LCD1602_clear>
		LCD1602_print(" La bomba ya ");
 8001676:	480d      	ldr	r0, [pc, #52]	; (80016ac <HAL_GPIO_EXTI_Callback+0x9c>)
 8001678:	f7ff fcc6 	bl	8001008 <LCD1602_print>
		LCD1602_2ndLine();
 800167c:	f7ff fd08 	bl	8001090 <LCD1602_2ndLine>
		LCD1602_print("   esta ON   ");
 8001680:	480b      	ldr	r0, [pc, #44]	; (80016b0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001682:	f7ff fcc1 	bl	8001008 <LCD1602_print>
	}
}
 8001686:	bf00      	nop
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	200000b0 	.word	0x200000b0
 8001694:	200001f8 	.word	0x200001f8
 8001698:	200000b8 	.word	0x200000b8
 800169c:	42700000 	.word	0x42700000
 80016a0:	20000244 	.word	0x20000244
 80016a4:	40020c00 	.word	0x40020c00
 80016a8:	08005b30 	.word	0x08005b30
 80016ac:	08005b3c 	.word	0x08005b3c
 80016b0:	08005b4c 	.word	0x08005b4c

080016b4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc){ //Conversores
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

	if (hadc->Instance == ADC1){
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <HAL_ADC_ConvCpltCallback+0x48>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d108      	bne.n	80016d8 <HAL_ADC_ConvCpltCallback+0x24>
		valorAgua = HAL_ADC_GetValue(&hadc1);
 80016c6:	480e      	ldr	r0, [pc, #56]	; (8001700 <HAL_ADC_ConvCpltCallback+0x4c>)
 80016c8:	f001 f9ed 	bl	8002aa6 <HAL_ADC_GetValue>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <HAL_ADC_ConvCpltCallback+0x50>)
 80016d0:	6013      	str	r3, [r2, #0]
		HAL_TIM_Base_Start_IT(&htim4);
 80016d2:	480d      	ldr	r0, [pc, #52]	; (8001708 <HAL_ADC_ConvCpltCallback+0x54>)
 80016d4:	f002 fc56 	bl	8003f84 <HAL_TIM_Base_Start_IT>
	}

	if (hadc->Instance == ADC2){
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0b      	ldr	r2, [pc, #44]	; (800170c <HAL_ADC_ConvCpltCallback+0x58>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d108      	bne.n	80016f4 <HAL_ADC_ConvCpltCallback+0x40>
		valorLDR = HAL_ADC_GetValue(&hadc2);
 80016e2:	480b      	ldr	r0, [pc, #44]	; (8001710 <HAL_ADC_ConvCpltCallback+0x5c>)
 80016e4:	f001 f9df 	bl	8002aa6 <HAL_ADC_GetValue>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <HAL_ADC_ConvCpltCallback+0x60>)
 80016ec:	6013      	str	r3, [r2, #0]
		HAL_TIM_Base_Start_IT(&htim4);
 80016ee:	4806      	ldr	r0, [pc, #24]	; (8001708 <HAL_ADC_ConvCpltCallback+0x54>)
 80016f0:	f002 fc48 	bl	8003f84 <HAL_TIM_Base_Start_IT>
	}

}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40012000 	.word	0x40012000
 8001700:	200001ac 	.word	0x200001ac
 8001704:	200001f8 	.word	0x200001f8
 8001708:	200000cc 	.word	0x200000cc
 800170c:	40012100 	.word	0x40012100
 8001710:	20000114 	.word	0x20000114
 8001714:	20000290 	.word	0x20000290

08001718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08c      	sub	sp, #48	; 0x30
 800171c:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800171e:	f000 fef9 	bl	8002514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001722:	f000 f8fd 	bl	8001920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001726:	f000 fb29 	bl	8001d7c <MX_GPIO_Init>
  MX_TIM2_Init();
 800172a:	f000 fa07 	bl	8001b3c <MX_TIM2_Init>
  MX_ADC1_Init();
 800172e:	f000 f961 	bl	80019f4 <MX_ADC1_Init>
  MX_TIM6_Init();
 8001732:	f000 faed 	bl	8001d10 <MX_TIM6_Init>
  MX_TIM3_Init();
 8001736:	f000 fa4f 	bl	8001bd8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800173a:	f000 fa9b 	bl	8001c74 <MX_TIM4_Init>
  MX_ADC2_Init();
 800173e:	f000 f9ab 	bl	8001a98 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  //Inicializacion LCD
  LCD1602_Begin8BIT(RS_GPIO_Port, RS_Pin, E_Pin, D0_GPIO_Port, D0_Pin, D1_Pin, D2_Pin, D3_Pin, D4_GPIO_Port, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
 8001742:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001746:	9308      	str	r3, [sp, #32]
 8001748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800174c:	9307      	str	r3, [sp, #28]
 800174e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001752:	9306      	str	r3, [sp, #24]
 8001754:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001758:	9305      	str	r3, [sp, #20]
 800175a:	4b61      	ldr	r3, [pc, #388]	; (80018e0 <main+0x1c8>)
 800175c:	9304      	str	r3, [sp, #16]
 800175e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001762:	9303      	str	r3, [sp, #12]
 8001764:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001768:	9302      	str	r3, [sp, #8]
 800176a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176e:	9301      	str	r3, [sp, #4]
 8001770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	4b5b      	ldr	r3, [pc, #364]	; (80018e4 <main+0x1cc>)
 8001778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800177c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001780:	4858      	ldr	r0, [pc, #352]	; (80018e4 <main+0x1cc>)
 8001782:	f7ff fbc5 	bl	8000f10 <LCD1602_Begin8BIT>
  LCD1602_clear();
 8001786:	f7ff fc8b 	bl	80010a0 <LCD1602_clear>
  LCD1602_print("   Iniciando   ");
 800178a:	4857      	ldr	r0, [pc, #348]	; (80018e8 <main+0x1d0>)
 800178c:	f7ff fc3c 	bl	8001008 <LCD1602_print>
  LCD1602_2ndLine();
 8001790:	f7ff fc7e 	bl	8001090 <LCD1602_2ndLine>
  LCD1602_print("    sistema    ");
 8001794:	4855      	ldr	r0, [pc, #340]	; (80018ec <main+0x1d4>)
 8001796:	f7ff fc37 	bl	8001008 <LCD1602_print>
  //LCD1602_PrintFloat(temperatura);

  HAL_TIM_Base_Start(&htim6); //Se inicia el temporizador del sensor de humedad
 800179a:	4855      	ldr	r0, [pc, #340]	; (80018f0 <main+0x1d8>)
 800179c:	f002 fb8a 	bl	8003eb4 <HAL_TIM_Base_Start>

  HAL_Delay(2000);            //2s
 80017a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017a4:	f000 fef8 	bl	8002598 <HAL_Delay>

  //Inicializamos los ADC
  HAL_ADC_Start_IT(&hadc1);
 80017a8:	4852      	ldr	r0, [pc, #328]	; (80018f4 <main+0x1dc>)
 80017aa:	f000 ff5d 	bl	8002668 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc2);
 80017ae:	4852      	ldr	r0, [pc, #328]	; (80018f8 <main+0x1e0>)
 80017b0:	f000 ff5a 	bl	8002668 <HAL_ADC_Start_IT>

    /* USER CODE BEGIN 3 */
	  //HAL_Delay(10); //10ms

	  //AGUA
	  if (valorAgua<1300){
 80017b4:	4b51      	ldr	r3, [pc, #324]	; (80018fc <main+0x1e4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f240 5213 	movw	r2, #1299	; 0x513
 80017bc:	4293      	cmp	r3, r2
 80017be:	d80c      	bhi.n	80017da <main+0xc2>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,1);
 80017c0:	2201      	movs	r2, #1
 80017c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017c6:	4846      	ldr	r0, [pc, #280]	; (80018e0 <main+0x1c8>)
 80017c8:	f001 fe4c 	bl	8003464 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017d2:	4843      	ldr	r0, [pc, #268]	; (80018e0 <main+0x1c8>)
 80017d4:	f001 fe46 	bl	8003464 <HAL_GPIO_WritePin>
 80017d8:	e00b      	b.n	80017f2 <main+0xda>
	  }
	  else {
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,0);
 80017da:	2200      	movs	r2, #0
 80017dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017e0:	483f      	ldr	r0, [pc, #252]	; (80018e0 <main+0x1c8>)
 80017e2:	f001 fe3f 	bl	8003464 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,1);
 80017e6:	2201      	movs	r2, #1
 80017e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ec:	483c      	ldr	r0, [pc, #240]	; (80018e0 <main+0x1c8>)
 80017ee:	f001 fe39 	bl	8003464 <HAL_GPIO_WritePin>
	  }

	  //Control de regadio por luminosidad (riego automatico por la noche)
	  if ((valorLDR<225)&&(bomba==0)) {
 80017f2:	4b43      	ldr	r3, [pc, #268]	; (8001900 <main+0x1e8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2be0      	cmp	r3, #224	; 0xe0
 80017f8:	d831      	bhi.n	800185e <main+0x146>
 80017fa:	4b42      	ldr	r3, [pc, #264]	; (8001904 <main+0x1ec>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	f083 0301 	eor.w	r3, r3, #1
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d02a      	beq.n	800185e <main+0x146>
		  if((valorAgua>1350)&&(humedad<60)){
 8001808:	4b3c      	ldr	r3, [pc, #240]	; (80018fc <main+0x1e4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f240 5246 	movw	r2, #1350	; 0x546
 8001810:	4293      	cmp	r3, r2
 8001812:	d915      	bls.n	8001840 <main+0x128>
 8001814:	4b3c      	ldr	r3, [pc, #240]	; (8001908 <main+0x1f0>)
 8001816:	edd3 7a00 	vldr	s15, [r3]
 800181a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800190c <main+0x1f4>
 800181e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001826:	d50b      	bpl.n	8001840 <main+0x128>
		  		HAL_TIM_Base_Start_IT(&htim2);
 8001828:	4839      	ldr	r0, [pc, #228]	; (8001910 <main+0x1f8>)
 800182a:	f002 fbab 	bl	8003f84 <HAL_TIM_Base_Start_IT>
		  		HAL_GPIO_WritePin(GPIOD,BombaAgua_Pin,1);
 800182e:	2201      	movs	r2, #1
 8001830:	2110      	movs	r1, #16
 8001832:	482b      	ldr	r0, [pc, #172]	; (80018e0 <main+0x1c8>)
 8001834:	f001 fe16 	bl	8003464 <HAL_GPIO_WritePin>
		  		bomba = 1;
 8001838:	4b32      	ldr	r3, [pc, #200]	; (8001904 <main+0x1ec>)
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
 800183e:	e007      	b.n	8001850 <main+0x138>
		  		}
		  else{
		  		LCD1602_print("No hay agua");
 8001840:	4834      	ldr	r0, [pc, #208]	; (8001914 <main+0x1fc>)
 8001842:	f7ff fbe1 	bl	8001008 <LCD1602_print>
		  		LCD1602_2ndLine();
 8001846:	f7ff fc23 	bl	8001090 <LCD1602_2ndLine>
		  		LCD1602_print(" ");
 800184a:	4833      	ldr	r0, [pc, #204]	; (8001918 <main+0x200>)
 800184c:	f7ff fbdc 	bl	8001008 <LCD1602_print>
		  		}
	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8001850:	2201      	movs	r2, #1
 8001852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001856:	4822      	ldr	r0, [pc, #136]	; (80018e0 <main+0x1c8>)
 8001858:	f001 fe04 	bl	8003464 <HAL_GPIO_WritePin>
 800185c:	e005      	b.n	800186a <main+0x152>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001864:	481e      	ldr	r0, [pc, #120]	; (80018e0 <main+0x1c8>)
 8001866:	f001 fdfd 	bl	8003464 <HAL_GPIO_WritePin>

	  //Apagado de regadio en caso de lluvia (aumento de la humedad)
	  if(humedad>60){
 800186a:	4b27      	ldr	r3, [pc, #156]	; (8001908 <main+0x1f0>)
 800186c:	edd3 7a00 	vldr	s15, [r3]
 8001870:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800190c <main+0x1f4>
 8001874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187c:	dd07      	ble.n	800188e <main+0x176>
		  HAL_GPIO_WritePin(GPIOD,BombaAgua_Pin,0);
 800187e:	2200      	movs	r2, #0
 8001880:	2110      	movs	r1, #16
 8001882:	4817      	ldr	r0, [pc, #92]	; (80018e0 <main+0x1c8>)
 8001884:	f001 fdee 	bl	8003464 <HAL_GPIO_WritePin>
		  bomba = 0;
 8001888:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <main+0x1ec>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
	  }

	  //VENTILADOR
	  if (temperatura > 25.0){ //Ventilacion en caso de alta temperatura
 800188e:	4b23      	ldr	r3, [pc, #140]	; (800191c <main+0x204>)
 8001890:	edd3 7a00 	vldr	s15, [r3]
 8001894:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800189c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a0:	dd05      	ble.n	80018ae <main+0x196>
		  HAL_GPIO_WritePin(GPIOD,Ventilador_Pin,1);
 80018a2:	2201      	movs	r2, #1
 80018a4:	2101      	movs	r1, #1
 80018a6:	480e      	ldr	r0, [pc, #56]	; (80018e0 <main+0x1c8>)
 80018a8:	f001 fddc 	bl	8003464 <HAL_GPIO_WritePin>
 80018ac:	e004      	b.n	80018b8 <main+0x1a0>
	  }
	  else {
		  HAL_GPIO_WritePin(GPIOD,Ventilador_Pin,0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2101      	movs	r1, #1
 80018b2:	480b      	ldr	r0, [pc, #44]	; (80018e0 <main+0x1c8>)
 80018b4:	f001 fdd6 	bl	8003464 <HAL_GPIO_WritePin>
	  }

	  //SENSOR HUMEDAD
	  uint32_t tiempo_espera = 1000;
 80018b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018bc:	607b      	str	r3, [r7, #4]
	  uint32_t tickstart = HAL_GetTick(); //se crea un delay de 2s sin bloquear el micro
 80018be:	f000 fe5f 	bl	8002580 <HAL_GetTick>
 80018c2:	6038      	str	r0, [r7, #0]
	  while((HAL_GetTick() - tickstart) < tiempo_espera){
 80018c4:	bf00      	nop
 80018c6:	f000 fe5b 	bl	8002580 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d8f7      	bhi.n	80018c6 <main+0x1ae>

	  }

	  leerDatosSensorDHT11();
 80018d6:	f7ff fe13 	bl	8001500 <leerDatosSensorDHT11>

	  escribirDatosDHT11aLCD();
 80018da:	f7ff fe6b 	bl	80015b4 <escribirDatosDHT11aLCD>
  {
 80018de:	e769      	b.n	80017b4 <main+0x9c>
 80018e0:	40020c00 	.word	0x40020c00
 80018e4:	40020400 	.word	0x40020400
 80018e8:	08005b5c 	.word	0x08005b5c
 80018ec:	08005b6c 	.word	0x08005b6c
 80018f0:	200001fc 	.word	0x200001fc
 80018f4:	200001ac 	.word	0x200001ac
 80018f8:	20000114 	.word	0x20000114
 80018fc:	200001f8 	.word	0x200001f8
 8001900:	20000290 	.word	0x20000290
 8001904:	200000b0 	.word	0x200000b0
 8001908:	200000b8 	.word	0x200000b8
 800190c:	42700000 	.word	0x42700000
 8001910:	20000244 	.word	0x20000244
 8001914:	08005b30 	.word	0x08005b30
 8001918:	08005b7c 	.word	0x08005b7c
 800191c:	200000b4 	.word	0x200000b4

08001920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b094      	sub	sp, #80	; 0x50
 8001924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001926:	f107 0320 	add.w	r3, r7, #32
 800192a:	2230      	movs	r2, #48	; 0x30
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f002 ffb2 	bl	8004898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	4b28      	ldr	r3, [pc, #160]	; (80019ec <SystemClock_Config+0xcc>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	4a27      	ldr	r2, [pc, #156]	; (80019ec <SystemClock_Config+0xcc>)
 800194e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001952:	6413      	str	r3, [r2, #64]	; 0x40
 8001954:	4b25      	ldr	r3, [pc, #148]	; (80019ec <SystemClock_Config+0xcc>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001960:	2300      	movs	r3, #0
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <SystemClock_Config+0xd0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a21      	ldr	r2, [pc, #132]	; (80019f0 <SystemClock_Config+0xd0>)
 800196a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <SystemClock_Config+0xd0>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800197c:	2301      	movs	r3, #1
 800197e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001980:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001986:	2302      	movs	r3, #2
 8001988:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800198a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800198e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001990:	2304      	movs	r3, #4
 8001992:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001994:	2332      	movs	r3, #50	; 0x32
 8001996:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001998:	2302      	movs	r3, #2
 800199a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800199c:	2307      	movs	r3, #7
 800199e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a0:	f107 0320 	add.w	r3, r7, #32
 80019a4:	4618      	mov	r0, r3
 80019a6:	f001 fd8f 	bl	80034c8 <HAL_RCC_OscConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019b0:	f000 fae4 	bl	8001f7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b4:	230f      	movs	r3, #15
 80019b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b8:	2302      	movs	r3, #2
 80019ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019cc:	f107 030c 	add.w	r3, r7, #12
 80019d0:	2101      	movs	r1, #1
 80019d2:	4618      	mov	r0, r3
 80019d4:	f001 fff0 	bl	80039b8 <HAL_RCC_ClockConfig>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019de:	f000 facd 	bl	8001f7c <Error_Handler>
  }
}
 80019e2:	bf00      	nop
 80019e4:	3750      	adds	r7, #80	; 0x50
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40007000 	.word	0x40007000

080019f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019fa:	463b      	mov	r3, r7
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a06:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a08:	4a21      	ldr	r2, [pc, #132]	; (8001a90 <MX_ADC1_Init+0x9c>)
 8001a0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a0e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a14:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a20:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a26:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a2e:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a34:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a36:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <MX_ADC1_Init+0xa0>)
 8001a38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a54:	480d      	ldr	r0, [pc, #52]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a56:	f000 fdc3 	bl	80025e0 <HAL_ADC_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a60:	f000 fa8c 	bl	8001f7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001a64:	230f      	movs	r3, #15
 8001a66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001a6c:	2307      	movs	r3, #7
 8001a6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a70:	463b      	mov	r3, r7
 8001a72:	4619      	mov	r1, r3
 8001a74:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_ADC1_Init+0x98>)
 8001a76:	f001 f837 	bl	8002ae8 <HAL_ADC_ConfigChannel>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a80:	f000 fa7c 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a84:	bf00      	nop
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200001ac 	.word	0x200001ac
 8001a90:	40012000 	.word	0x40012000
 8001a94:	0f000001 	.word	0x0f000001

08001a98 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <MX_ADC2_Init+0x98>)
 8001aac:	4a21      	ldr	r2, [pc, #132]	; (8001b34 <MX_ADC2_Init+0x9c>)
 8001aae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <MX_ADC2_Init+0x98>)
 8001ab2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ab6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <MX_ADC2_Init+0x98>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001abe:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <MX_ADC2_Init+0x98>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <MX_ADC2_Init+0x98>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001aca:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <MX_ADC2_Init+0x98>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <MX_ADC2_Init+0x98>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <MX_ADC2_Init+0x98>)
 8001ada:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <MX_ADC2_Init+0xa0>)
 8001adc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ade:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <MX_ADC2_Init+0x98>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <MX_ADC2_Init+0x98>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <MX_ADC2_Init+0x98>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001af2:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <MX_ADC2_Init+0x98>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001af8:	480d      	ldr	r0, [pc, #52]	; (8001b30 <MX_ADC2_Init+0x98>)
 8001afa:	f000 fd71 	bl	80025e0 <HAL_ADC_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001b04:	f000 fa3a 	bl	8001f7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001b08:	230a      	movs	r3, #10
 8001b0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001b10:	2307      	movs	r3, #7
 8001b12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b14:	463b      	mov	r3, r7
 8001b16:	4619      	mov	r1, r3
 8001b18:	4805      	ldr	r0, [pc, #20]	; (8001b30 <MX_ADC2_Init+0x98>)
 8001b1a:	f000 ffe5 	bl	8002ae8 <HAL_ADC_ConfigChannel>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001b24:	f000 fa2a 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000114 	.word	0x20000114
 8001b34:	40012100 	.word	0x40012100
 8001b38:	0f000001 	.word	0x0f000001

08001b3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b42:	f107 0308 	add.w	r3, r7, #8
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b50:	463b      	mov	r3, r7
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b58:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <MX_TIM2_Init+0x98>)
 8001b5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 8001b60:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <MX_TIM2_Init+0x98>)
 8001b62:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b68:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <MX_TIM2_Init+0x98>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <MX_TIM2_Init+0x98>)
 8001b70:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <MX_TIM2_Init+0x98>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <MX_TIM2_Init+0x98>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b82:	4814      	ldr	r0, [pc, #80]	; (8001bd4 <MX_TIM2_Init+0x98>)
 8001b84:	f002 f946 	bl	8003e14 <HAL_TIM_Base_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b8e:	f000 f9f5 	bl	8001f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b98:	f107 0308 	add.w	r3, r7, #8
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <MX_TIM2_Init+0x98>)
 8001ba0:	f002 fb97 	bl	80042d2 <HAL_TIM_ConfigClockSource>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001baa:	f000 f9e7 	bl	8001f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <MX_TIM2_Init+0x98>)
 8001bbc:	f002 fdb2 	bl	8004724 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001bc6:	f000 f9d9 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000244 	.word	0x20000244

08001bd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bde:	f107 0308 	add.w	r3, r7, #8
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bec:	463b      	mov	r3, r7
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bf4:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <MX_TIM3_Init+0x94>)
 8001bf6:	4a1e      	ldr	r2, [pc, #120]	; (8001c70 <MX_TIM3_Init+0x98>)
 8001bf8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 8001bfa:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <MX_TIM3_Init+0x94>)
 8001bfc:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c02:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <MX_TIM3_Init+0x94>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 8001c08:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <MX_TIM3_Init+0x94>)
 8001c0a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c10:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <MX_TIM3_Init+0x94>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <MX_TIM3_Init+0x94>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c1c:	4813      	ldr	r0, [pc, #76]	; (8001c6c <MX_TIM3_Init+0x94>)
 8001c1e:	f002 f8f9 	bl	8003e14 <HAL_TIM_Base_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001c28:	f000 f9a8 	bl	8001f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	4619      	mov	r1, r3
 8001c38:	480c      	ldr	r0, [pc, #48]	; (8001c6c <MX_TIM3_Init+0x94>)
 8001c3a:	f002 fb4a 	bl	80042d2 <HAL_TIM_ConfigClockSource>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001c44:	f000 f99a 	bl	8001f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c50:	463b      	mov	r3, r7
 8001c52:	4619      	mov	r1, r3
 8001c54:	4805      	ldr	r0, [pc, #20]	; (8001c6c <MX_TIM3_Init+0x94>)
 8001c56:	f002 fd65 	bl	8004724 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001c60:	f000 f98c 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c64:	bf00      	nop
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000160 	.word	0x20000160
 8001c70:	40000400 	.word	0x40000400

08001c74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7a:	f107 0308 	add.w	r3, r7, #8
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c88:	463b      	mov	r3, r7
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c90:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <MX_TIM4_Init+0x94>)
 8001c92:	4a1e      	ldr	r2, [pc, #120]	; (8001d0c <MX_TIM4_Init+0x98>)
 8001c94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500;
 8001c96:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <MX_TIM4_Init+0x94>)
 8001c98:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <MX_TIM4_Init+0x94>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <MX_TIM4_Init+0x94>)
 8001ca6:	f242 7210 	movw	r2, #10000	; 0x2710
 8001caa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <MX_TIM4_Init+0x94>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <MX_TIM4_Init+0x94>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cb8:	4813      	ldr	r0, [pc, #76]	; (8001d08 <MX_TIM4_Init+0x94>)
 8001cba:	f002 f8ab 	bl	8003e14 <HAL_TIM_Base_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001cc4:	f000 f95a 	bl	8001f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cce:	f107 0308 	add.w	r3, r7, #8
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	480c      	ldr	r0, [pc, #48]	; (8001d08 <MX_TIM4_Init+0x94>)
 8001cd6:	f002 fafc 	bl	80042d2 <HAL_TIM_ConfigClockSource>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001ce0:	f000 f94c 	bl	8001f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cec:	463b      	mov	r3, r7
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4805      	ldr	r0, [pc, #20]	; (8001d08 <MX_TIM4_Init+0x94>)
 8001cf2:	f002 fd17 	bl	8004724 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001cfc:	f000 f93e 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d00:	bf00      	nop
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	200000cc 	.word	0x200000cc
 8001d0c:	40000800 	.word	0x40000800

08001d10 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d16:	463b      	mov	r3, r7
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <MX_TIM6_Init+0x64>)
 8001d20:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <MX_TIM6_Init+0x68>)
 8001d22:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <MX_TIM6_Init+0x64>)
 8001d26:	2231      	movs	r2, #49	; 0x31
 8001d28:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2a:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <MX_TIM6_Init+0x64>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8001d30:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <MX_TIM6_Init+0x64>)
 8001d32:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001d36:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d38:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <MX_TIM6_Init+0x64>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d3e:	480d      	ldr	r0, [pc, #52]	; (8001d74 <MX_TIM6_Init+0x64>)
 8001d40:	f002 f868 	bl	8003e14 <HAL_TIM_Base_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001d4a:	f000 f917 	bl	8001f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d56:	463b      	mov	r3, r7
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4806      	ldr	r0, [pc, #24]	; (8001d74 <MX_TIM6_Init+0x64>)
 8001d5c:	f002 fce2 	bl	8004724 <HAL_TIMEx_MasterConfigSynchronization>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001d66:	f000 f909 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200001fc 	.word	0x200001fc
 8001d78:	40001000 	.word	0x40001000

08001d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
 8001d90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	4b4d      	ldr	r3, [pc, #308]	; (8001ecc <MX_GPIO_Init+0x150>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a4c      	ldr	r2, [pc, #304]	; (8001ecc <MX_GPIO_Init+0x150>)
 8001d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b4a      	ldr	r3, [pc, #296]	; (8001ecc <MX_GPIO_Init+0x150>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b46      	ldr	r3, [pc, #280]	; (8001ecc <MX_GPIO_Init+0x150>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a45      	ldr	r2, [pc, #276]	; (8001ecc <MX_GPIO_Init+0x150>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b43      	ldr	r3, [pc, #268]	; (8001ecc <MX_GPIO_Init+0x150>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <MX_GPIO_Init+0x150>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a3e      	ldr	r2, [pc, #248]	; (8001ecc <MX_GPIO_Init+0x150>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b3c      	ldr	r3, [pc, #240]	; (8001ecc <MX_GPIO_Init+0x150>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	4b38      	ldr	r3, [pc, #224]	; (8001ecc <MX_GPIO_Init+0x150>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a37      	ldr	r2, [pc, #220]	; (8001ecc <MX_GPIO_Init+0x150>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <MX_GPIO_Init+0x150>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	4b31      	ldr	r3, [pc, #196]	; (8001ecc <MX_GPIO_Init+0x150>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a30      	ldr	r2, [pc, #192]	; (8001ecc <MX_GPIO_Init+0x150>)
 8001e0c:	f043 0308 	orr.w	r3, r3, #8
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <MX_GPIO_Init+0x150>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2102      	movs	r1, #2
 8001e22:	482b      	ldr	r0, [pc, #172]	; (8001ed0 <MX_GPIO_Init+0x154>)
 8001e24:	f001 fb1e 	bl	8003464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f24f 3120 	movw	r1, #62240	; 0xf320
 8001e2e:	4829      	ldr	r0, [pc, #164]	; (8001ed4 <MX_GPIO_Init+0x158>)
 8001e30:	f001 fb18 	bl	8003464 <HAL_GPIO_WritePin>
                          |Buzzer_Pin|E_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001e34:	2200      	movs	r2, #0
 8001e36:	f64e 7111 	movw	r1, #61201	; 0xef11
 8001e3a:	4827      	ldr	r0, [pc, #156]	; (8001ed8 <MX_GPIO_Init+0x15c>)
 8001e3c:	f001 fb12 	bl	8003464 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|Ventilador_Pin
                          |BombaAgua_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Boton_Pin */
  GPIO_InitStruct.Pin = Boton_Pin;
 8001e40:	2301      	movs	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boton_GPIO_Port, &GPIO_InitStruct);
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	4619      	mov	r1, r3
 8001e54:	481e      	ldr	r0, [pc, #120]	; (8001ed0 <MX_GPIO_Init+0x154>)
 8001e56:	f001 f951 	bl	80030fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e66:	2300      	movs	r3, #0
 8001e68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4817      	ldr	r0, [pc, #92]	; (8001ed0 <MX_GPIO_Init+0x154>)
 8001e72:	f001 f943 	bl	80030fc <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           Buzzer_Pin E_Pin RS_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001e76:	f24f 3320 	movw	r3, #62240	; 0xf320
 8001e7a:	617b      	str	r3, [r7, #20]
                          |Buzzer_Pin|E_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4811      	ldr	r0, [pc, #68]	; (8001ed4 <MX_GPIO_Init+0x158>)
 8001e90:	f001 f934 	bl	80030fc <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           PD13 PD14 PD15 Ventilador_Pin
                           BombaAgua_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001e94:	f64e 7311 	movw	r3, #61201	; 0xef11
 8001e98:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|Ventilador_Pin
                          |BombaAgua_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	480a      	ldr	r0, [pc, #40]	; (8001ed8 <MX_GPIO_Init+0x15c>)
 8001eae:	f001 f925 	bl	80030fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2006      	movs	r0, #6
 8001eb8:	f001 f8f6 	bl	80030a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ebc:	2006      	movs	r0, #6
 8001ebe:	f001 f90f 	bl	80030e0 <HAL_NVIC_EnableIRQ>

}
 8001ec2:	bf00      	nop
 8001ec4:	3728      	adds	r7, #40	; 0x28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40020400 	.word	0x40020400
 8001ed8:	40020c00 	.word	0x40020c00

08001edc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a19      	ldr	r2, [pc, #100]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d101      	bne.n	8001ef2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001eee:	f000 fb33 	bl	8002558 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2){  //temporizador del regado
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001efa:	d10a      	bne.n	8001f12 <HAL_TIM_PeriodElapsedCallback+0x36>
	  bomba = 0;
 8001efc:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOD,BombaAgua_Pin,0);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2110      	movs	r1, #16
 8001f06:	4814      	ldr	r0, [pc, #80]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001f08:	f001 faac 	bl	8003464 <HAL_GPIO_WritePin>
	  HAL_TIM_Base_Stop_IT(&htim2);
 8001f0c:	4813      	ldr	r0, [pc, #76]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001f0e:	f002 f8a9 	bl	8004064 <HAL_TIM_Base_Stop_IT>
  }
  if (htim->Instance == TIM3){  //temporizador buzzer
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d107      	bne.n	8001f2c <HAL_TIM_PeriodElapsedCallback+0x50>
	  HAL_TIM_Base_Stop_IT(&htim3);
 8001f1c:	4811      	ldr	r0, [pc, #68]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001f1e:	f002 f8a1 	bl	8004064 <HAL_TIM_Base_Stop_IT>
	  HAL_GPIO_WritePin(GPIOB,Buzzer_Pin,0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2120      	movs	r1, #32
 8001f26:	4810      	ldr	r0, [pc, #64]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001f28:	f001 fa9c 	bl	8003464 <HAL_GPIO_WritePin>
  }
  if (htim->Instance == TIM4){  //temporizador sensores
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d108      	bne.n	8001f48 <HAL_TIM_PeriodElapsedCallback+0x6c>
  	  HAL_TIM_Base_Stop_IT(&htim4);
 8001f36:	480e      	ldr	r0, [pc, #56]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001f38:	f002 f894 	bl	8004064 <HAL_TIM_Base_Stop_IT>
  	  HAL_ADC_Start_IT(&hadc1);
 8001f3c:	480d      	ldr	r0, [pc, #52]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001f3e:	f000 fb93 	bl	8002668 <HAL_ADC_Start_IT>
  	  HAL_ADC_Start_IT(&hadc2);
 8001f42:	480d      	ldr	r0, [pc, #52]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001f44:	f000 fb90 	bl	8002668 <HAL_ADC_Start_IT>
    }
  /* USER CODE END Callback 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40010000 	.word	0x40010000
 8001f54:	200000b0 	.word	0x200000b0
 8001f58:	40020c00 	.word	0x40020c00
 8001f5c:	20000244 	.word	0x20000244
 8001f60:	40000400 	.word	0x40000400
 8001f64:	20000160 	.word	0x20000160
 8001f68:	40020400 	.word	0x40020400
 8001f6c:	40000800 	.word	0x40000800
 8001f70:	200000cc 	.word	0x200000cc
 8001f74:	200001ac 	.word	0x200001ac
 8001f78:	20000114 	.word	0x20000114

08001f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f80:	b672      	cpsid	i
}
 8001f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <Error_Handler+0x8>
	...

08001f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <HAL_MspInit+0x4c>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	4a0f      	ldr	r2, [pc, #60]	; (8001fd4 <HAL_MspInit+0x4c>)
 8001f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <HAL_MspInit+0x4c>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_MspInit+0x4c>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	4a08      	ldr	r2, [pc, #32]	; (8001fd4 <HAL_MspInit+0x4c>)
 8001fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_MspInit+0x4c>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fc6:	2007      	movs	r0, #7
 8001fc8:	f001 f863 	bl	8003092 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40023800 	.word	0x40023800

08001fd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08c      	sub	sp, #48	; 0x30
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 031c 	add.w	r3, r7, #28
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a36      	ldr	r2, [pc, #216]	; (80020d0 <HAL_ADC_MspInit+0xf8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d130      	bne.n	800205c <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	4b35      	ldr	r3, [pc, #212]	; (80020d4 <HAL_ADC_MspInit+0xfc>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4a34      	ldr	r2, [pc, #208]	; (80020d4 <HAL_ADC_MspInit+0xfc>)
 8002004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002008:	6453      	str	r3, [r2, #68]	; 0x44
 800200a:	4b32      	ldr	r3, [pc, #200]	; (80020d4 <HAL_ADC_MspInit+0xfc>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <HAL_ADC_MspInit+0xfc>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a2d      	ldr	r2, [pc, #180]	; (80020d4 <HAL_ADC_MspInit+0xfc>)
 8002020:	f043 0304 	orr.w	r3, r3, #4
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <HAL_ADC_MspInit+0xfc>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = sensorAgua_Pin;
 8002032:	2320      	movs	r3, #32
 8002034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002036:	2303      	movs	r3, #3
 8002038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(sensorAgua_GPIO_Port, &GPIO_InitStruct);
 800203e:	f107 031c 	add.w	r3, r7, #28
 8002042:	4619      	mov	r1, r3
 8002044:	4824      	ldr	r0, [pc, #144]	; (80020d8 <HAL_ADC_MspInit+0x100>)
 8002046:	f001 f859 	bl	80030fc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2100      	movs	r1, #0
 800204e:	2012      	movs	r0, #18
 8002050:	f001 f82a 	bl	80030a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002054:	2012      	movs	r0, #18
 8002056:	f001 f843 	bl	80030e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800205a:	e034      	b.n	80020c6 <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1e      	ldr	r2, [pc, #120]	; (80020dc <HAL_ADC_MspInit+0x104>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d12f      	bne.n	80020c6 <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <HAL_ADC_MspInit+0xfc>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	4a19      	ldr	r2, [pc, #100]	; (80020d4 <HAL_ADC_MspInit+0xfc>)
 8002070:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002074:	6453      	str	r3, [r2, #68]	; 0x44
 8002076:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <HAL_ADC_MspInit+0xfc>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <HAL_ADC_MspInit+0xfc>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <HAL_ADC_MspInit+0xfc>)
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <HAL_ADC_MspInit+0xfc>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LDR_Pin;
 800209e:	2301      	movs	r3, #1
 80020a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a2:	2303      	movs	r3, #3
 80020a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 80020aa:	f107 031c 	add.w	r3, r7, #28
 80020ae:	4619      	mov	r1, r3
 80020b0:	4809      	ldr	r0, [pc, #36]	; (80020d8 <HAL_ADC_MspInit+0x100>)
 80020b2:	f001 f823 	bl	80030fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2100      	movs	r1, #0
 80020ba:	2012      	movs	r0, #18
 80020bc:	f000 fff4 	bl	80030a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020c0:	2012      	movs	r0, #18
 80020c2:	f001 f80d 	bl	80030e0 <HAL_NVIC_EnableIRQ>
}
 80020c6:	bf00      	nop
 80020c8:	3730      	adds	r7, #48	; 0x30
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40012000 	.word	0x40012000
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40020800 	.word	0x40020800
 80020dc:	40012100 	.word	0x40012100

080020e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f0:	d116      	bne.n	8002120 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <HAL_TIM_Base_MspInit+0xe0>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	4a31      	ldr	r2, [pc, #196]	; (80021c0 <HAL_TIM_Base_MspInit+0xe0>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6413      	str	r3, [r2, #64]	; 0x40
 8002102:	4b2f      	ldr	r3, [pc, #188]	; (80021c0 <HAL_TIM_Base_MspInit+0xe0>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2100      	movs	r1, #0
 8002112:	201c      	movs	r0, #28
 8002114:	f000 ffc8 	bl	80030a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002118:	201c      	movs	r0, #28
 800211a:	f000 ffe1 	bl	80030e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800211e:	e04a      	b.n	80021b6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a27      	ldr	r2, [pc, #156]	; (80021c4 <HAL_TIM_Base_MspInit+0xe4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d116      	bne.n	8002158 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <HAL_TIM_Base_MspInit+0xe0>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	4a23      	ldr	r2, [pc, #140]	; (80021c0 <HAL_TIM_Base_MspInit+0xe0>)
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	6413      	str	r3, [r2, #64]	; 0x40
 800213a:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <HAL_TIM_Base_MspInit+0xe0>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002146:	2200      	movs	r2, #0
 8002148:	2100      	movs	r1, #0
 800214a:	201d      	movs	r0, #29
 800214c:	f000 ffac 	bl	80030a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002150:	201d      	movs	r0, #29
 8002152:	f000 ffc5 	bl	80030e0 <HAL_NVIC_EnableIRQ>
}
 8002156:	e02e      	b.n	80021b6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1a      	ldr	r2, [pc, #104]	; (80021c8 <HAL_TIM_Base_MspInit+0xe8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d116      	bne.n	8002190 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <HAL_TIM_Base_MspInit+0xe0>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	4a15      	ldr	r2, [pc, #84]	; (80021c0 <HAL_TIM_Base_MspInit+0xe0>)
 800216c:	f043 0304 	orr.w	r3, r3, #4
 8002170:	6413      	str	r3, [r2, #64]	; 0x40
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <HAL_TIM_Base_MspInit+0xe0>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2100      	movs	r1, #0
 8002182:	201e      	movs	r0, #30
 8002184:	f000 ff90 	bl	80030a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002188:	201e      	movs	r0, #30
 800218a:	f000 ffa9 	bl	80030e0 <HAL_NVIC_EnableIRQ>
}
 800218e:	e012      	b.n	80021b6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a0d      	ldr	r2, [pc, #52]	; (80021cc <HAL_TIM_Base_MspInit+0xec>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d10d      	bne.n	80021b6 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <HAL_TIM_Base_MspInit+0xe0>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	4a07      	ldr	r2, [pc, #28]	; (80021c0 <HAL_TIM_Base_MspInit+0xe0>)
 80021a4:	f043 0310 	orr.w	r3, r3, #16
 80021a8:	6413      	str	r3, [r2, #64]	; 0x40
 80021aa:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <HAL_TIM_Base_MspInit+0xe0>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
}
 80021b6:	bf00      	nop
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40000400 	.word	0x40000400
 80021c8:	40000800 	.word	0x40000800
 80021cc:	40001000 	.word	0x40001000

080021d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08c      	sub	sp, #48	; 0x30
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80021e0:	2200      	movs	r2, #0
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	2019      	movs	r0, #25
 80021e6:	f000 ff5f 	bl	80030a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021ea:	2019      	movs	r0, #25
 80021ec:	f000 ff78 	bl	80030e0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <HAL_InitTick+0xa4>)
 80021f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f8:	4a1e      	ldr	r2, [pc, #120]	; (8002274 <HAL_InitTick+0xa4>)
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	6453      	str	r3, [r2, #68]	; 0x44
 8002200:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <HAL_InitTick+0xa4>)
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800220c:	f107 0210 	add.w	r2, r7, #16
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4611      	mov	r1, r2
 8002216:	4618      	mov	r0, r3
 8002218:	f001 fdca 	bl	8003db0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800221c:	f001 fdb4 	bl	8003d88 <HAL_RCC_GetPCLK2Freq>
 8002220:	4603      	mov	r3, r0
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002228:	4a13      	ldr	r2, [pc, #76]	; (8002278 <HAL_InitTick+0xa8>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	0c9b      	lsrs	r3, r3, #18
 8002230:	3b01      	subs	r3, #1
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_InitTick+0xac>)
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <HAL_InitTick+0xb0>)
 8002238:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <HAL_InitTick+0xac>)
 800223c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002240:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002242:	4a0e      	ldr	r2, [pc, #56]	; (800227c <HAL_InitTick+0xac>)
 8002244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002246:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <HAL_InitTick+0xac>)
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_InitTick+0xac>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002254:	4809      	ldr	r0, [pc, #36]	; (800227c <HAL_InitTick+0xac>)
 8002256:	f001 fddd 	bl	8003e14 <HAL_TIM_Base_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d104      	bne.n	800226a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002260:	4806      	ldr	r0, [pc, #24]	; (800227c <HAL_InitTick+0xac>)
 8002262:	f001 fe8f 	bl	8003f84 <HAL_TIM_Base_Start_IT>
 8002266:	4603      	mov	r3, r0
 8002268:	e000      	b.n	800226c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
}
 800226c:	4618      	mov	r0, r3
 800226e:	3730      	adds	r7, #48	; 0x30
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40023800 	.word	0x40023800
 8002278:	431bde83 	.word	0x431bde83
 800227c:	20000294 	.word	0x20000294
 8002280:	40010000 	.word	0x40010000

08002284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002288:	e7fe      	b.n	8002288 <NMI_Handler+0x4>

0800228a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800228e:	e7fe      	b.n	800228e <HardFault_Handler+0x4>

08002290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002294:	e7fe      	b.n	8002294 <MemManage_Handler+0x4>

08002296 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800229a:	e7fe      	b.n	800229a <BusFault_Handler+0x4>

0800229c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022a0:	e7fe      	b.n	80022a0 <UsageFault_Handler+0x4>

080022a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80022de:	2001      	movs	r0, #1
 80022e0:	f001 f8da 	bl	8003498 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022ec:	4803      	ldr	r0, [pc, #12]	; (80022fc <ADC_IRQHandler+0x14>)
 80022ee:	f000 fa99 	bl	8002824 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80022f2:	4803      	ldr	r0, [pc, #12]	; (8002300 <ADC_IRQHandler+0x18>)
 80022f4:	f000 fa96 	bl	8002824 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	200001ac 	.word	0x200001ac
 8002300:	20000114 	.word	0x20000114

08002304 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002308:	4802      	ldr	r0, [pc, #8]	; (8002314 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800230a:	f001 feda 	bl	80040c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000294 	.word	0x20000294

08002318 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800231c:	4802      	ldr	r0, [pc, #8]	; (8002328 <TIM2_IRQHandler+0x10>)
 800231e:	f001 fed0 	bl	80040c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000244 	.word	0x20000244

0800232c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002330:	4802      	ldr	r0, [pc, #8]	; (800233c <TIM3_IRQHandler+0x10>)
 8002332:	f001 fec6 	bl	80040c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000160 	.word	0x20000160

08002340 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002344:	4802      	ldr	r0, [pc, #8]	; (8002350 <TIM4_IRQHandler+0x10>)
 8002346:	f001 febc 	bl	80040c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	200000cc 	.word	0x200000cc

08002354 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	e00a      	b.n	800237c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002366:	f3af 8000 	nop.w
 800236a:	4601      	mov	r1, r0
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	60ba      	str	r2, [r7, #8]
 8002372:	b2ca      	uxtb	r2, r1
 8002374:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	3301      	adds	r3, #1
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	dbf0      	blt.n	8002366 <_read+0x12>
	}

return len;
 8002384:	687b      	ldr	r3, [r7, #4]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b086      	sub	sp, #24
 8002392:	af00      	add	r7, sp, #0
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	e009      	b.n	80023b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	60ba      	str	r2, [r7, #8]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	3301      	adds	r3, #1
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	dbf1      	blt.n	80023a0 <_write+0x12>
	}
	return len;
 80023bc:	687b      	ldr	r3, [r7, #4]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <_close>:

int _close(int file)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
	return -1;
 80023ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ee:	605a      	str	r2, [r3, #4]
	return 0;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <_isatty>:

int _isatty(int file)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
	return 1;
 8002406:	2301      	movs	r3, #1
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
	return 0;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002438:	4a14      	ldr	r2, [pc, #80]	; (800248c <_sbrk+0x5c>)
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <_sbrk+0x60>)
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002444:	4b13      	ldr	r3, [pc, #76]	; (8002494 <_sbrk+0x64>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d102      	bne.n	8002452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <_sbrk+0x64>)
 800244e:	4a12      	ldr	r2, [pc, #72]	; (8002498 <_sbrk+0x68>)
 8002450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	429a      	cmp	r2, r3
 800245e:	d207      	bcs.n	8002470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002460:	f002 f9f0 	bl	8004844 <__errno>
 8002464:	4603      	mov	r3, r0
 8002466:	220c      	movs	r2, #12
 8002468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295
 800246e:	e009      	b.n	8002484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <_sbrk+0x64>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002476:	4b07      	ldr	r3, [pc, #28]	; (8002494 <_sbrk+0x64>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	4a05      	ldr	r2, [pc, #20]	; (8002494 <_sbrk+0x64>)
 8002480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002482:	68fb      	ldr	r3, [r7, #12]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20020000 	.word	0x20020000
 8002490:	00000400 	.word	0x00000400
 8002494:	200000c0 	.word	0x200000c0
 8002498:	200002f0 	.word	0x200002f0

0800249c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <SystemInit+0x20>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a6:	4a05      	ldr	r2, [pc, #20]	; (80024bc <SystemInit+0x20>)
 80024a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024c4:	480d      	ldr	r0, [pc, #52]	; (80024fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024c6:	490e      	ldr	r1, [pc, #56]	; (8002500 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024c8:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024cc:	e002      	b.n	80024d4 <LoopCopyDataInit>

080024ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024d2:	3304      	adds	r3, #4

080024d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d8:	d3f9      	bcc.n	80024ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024da:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024dc:	4c0b      	ldr	r4, [pc, #44]	; (800250c <LoopFillZerobss+0x26>)
  movs r3, #0
 80024de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e0:	e001      	b.n	80024e6 <LoopFillZerobss>

080024e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e4:	3204      	adds	r2, #4

080024e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e8:	d3fb      	bcc.n	80024e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024ea:	f7ff ffd7 	bl	800249c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ee:	f002 f9af 	bl	8004850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024f2:	f7ff f911 	bl	8001718 <main>
  bx  lr    
 80024f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002500:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002504:	08005c40 	.word	0x08005c40
  ldr r2, =_sbss
 8002508:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800250c:	200002f0 	.word	0x200002f0

08002510 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002510:	e7fe      	b.n	8002510 <CAN1_RX0_IRQHandler>
	...

08002514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002518:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <HAL_Init+0x40>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0d      	ldr	r2, [pc, #52]	; (8002554 <HAL_Init+0x40>)
 800251e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_Init+0x40>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <HAL_Init+0x40>)
 800252a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800252e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002530:	4b08      	ldr	r3, [pc, #32]	; (8002554 <HAL_Init+0x40>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a07      	ldr	r2, [pc, #28]	; (8002554 <HAL_Init+0x40>)
 8002536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800253c:	2003      	movs	r0, #3
 800253e:	f000 fda8 	bl	8003092 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002542:	2000      	movs	r0, #0
 8002544:	f7ff fe44 	bl	80021d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002548:	f7ff fd1e 	bl	8001f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40023c00 	.word	0x40023c00

08002558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_IncTick+0x20>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_IncTick+0x24>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4413      	add	r3, r2
 8002568:	4a04      	ldr	r2, [pc, #16]	; (800257c <HAL_IncTick+0x24>)
 800256a:	6013      	str	r3, [r2, #0]
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	2000000c 	.word	0x2000000c
 800257c:	200002dc 	.word	0x200002dc

08002580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return uwTick;
 8002584:	4b03      	ldr	r3, [pc, #12]	; (8002594 <HAL_GetTick+0x14>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	200002dc 	.word	0x200002dc

08002598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025a0:	f7ff ffee 	bl	8002580 <HAL_GetTick>
 80025a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d005      	beq.n	80025be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025b2:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <HAL_Delay+0x44>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4413      	add	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025be:	bf00      	nop
 80025c0:	f7ff ffde 	bl	8002580 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d8f7      	bhi.n	80025c0 <HAL_Delay+0x28>
  {
  }
}
 80025d0:	bf00      	nop
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	2000000c 	.word	0x2000000c

080025e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e033      	b.n	800265e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff fcea 	bl	8001fd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b00      	cmp	r3, #0
 800261c:	d118      	bne.n	8002650 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002626:	f023 0302 	bic.w	r3, r3, #2
 800262a:	f043 0202 	orr.w	r2, r3, #2
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fb7a 	bl	8002d2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f023 0303 	bic.w	r3, r3, #3
 8002646:	f043 0201 	orr.w	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	641a      	str	r2, [r3, #64]	; 0x40
 800264e:	e001      	b.n	8002654 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800265c:	7bfb      	ldrb	r3, [r7, #15]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_ADC_Start_IT+0x1a>
 800267e:	2302      	movs	r3, #2
 8002680:	e0bd      	b.n	80027fe <HAL_ADC_Start_IT+0x196>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	d018      	beq.n	80026ca <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026a8:	4b58      	ldr	r3, [pc, #352]	; (800280c <HAL_ADC_Start_IT+0x1a4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a58      	ldr	r2, [pc, #352]	; (8002810 <HAL_ADC_Start_IT+0x1a8>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	0c9a      	lsrs	r2, r3, #18
 80026b4:	4613      	mov	r3, r2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4413      	add	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80026bc:	e002      	b.n	80026c4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f9      	bne.n	80026be <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	f040 8085 	bne.w	80027e4 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d007      	beq.n	800270c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002704:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002718:	d106      	bne.n	8002728 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f023 0206 	bic.w	r2, r3, #6
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	645a      	str	r2, [r3, #68]	; 0x44
 8002726:	e002      	b.n	800272e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002736:	4b37      	ldr	r3, [pc, #220]	; (8002814 <HAL_ADC_Start_IT+0x1ac>)
 8002738:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002742:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002752:	f043 0320 	orr.w	r3, r3, #32
 8002756:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 031f 	and.w	r3, r3, #31
 8002760:	2b00      	cmp	r3, #0
 8002762:	d12a      	bne.n	80027ba <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a2b      	ldr	r2, [pc, #172]	; (8002818 <HAL_ADC_Start_IT+0x1b0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d015      	beq.n	800279a <HAL_ADC_Start_IT+0x132>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a2a      	ldr	r2, [pc, #168]	; (800281c <HAL_ADC_Start_IT+0x1b4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d105      	bne.n	8002784 <HAL_ADC_Start_IT+0x11c>
 8002778:	4b26      	ldr	r3, [pc, #152]	; (8002814 <HAL_ADC_Start_IT+0x1ac>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a25      	ldr	r2, [pc, #148]	; (8002820 <HAL_ADC_Start_IT+0x1b8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d136      	bne.n	80027fc <HAL_ADC_Start_IT+0x194>
 800278e:	4b21      	ldr	r3, [pc, #132]	; (8002814 <HAL_ADC_Start_IT+0x1ac>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b00      	cmp	r3, #0
 8002798:	d130      	bne.n	80027fc <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d129      	bne.n	80027fc <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	e020      	b.n	80027fc <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a16      	ldr	r2, [pc, #88]	; (8002818 <HAL_ADC_Start_IT+0x1b0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d11b      	bne.n	80027fc <HAL_ADC_Start_IT+0x194>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d114      	bne.n	80027fc <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	e00b      	b.n	80027fc <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f043 0210 	orr.w	r2, r3, #16
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f4:	f043 0201 	orr.w	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	20000004 	.word	0x20000004
 8002810:	431bde83 	.word	0x431bde83
 8002814:	40012300 	.word	0x40012300
 8002818:	40012000 	.word	0x40012000
 800281c:	40012100 	.word	0x40012100
 8002820:	40012200 	.word	0x40012200

08002824 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	2300      	movs	r3, #0
 8002832:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b02      	cmp	r3, #2
 8002840:	bf0c      	ite	eq
 8002842:	2301      	moveq	r3, #1
 8002844:	2300      	movne	r3, #0
 8002846:	b2db      	uxtb	r3, r3
 8002848:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	2b20      	cmp	r3, #32
 8002856:	bf0c      	ite	eq
 8002858:	2301      	moveq	r3, #1
 800285a:	2300      	movne	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d049      	beq.n	80028fa <HAL_ADC_IRQHandler+0xd6>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d046      	beq.n	80028fa <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b00      	cmp	r3, #0
 8002876:	d105      	bne.n	8002884 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d12b      	bne.n	80028ea <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002896:	2b00      	cmp	r3, #0
 8002898:	d127      	bne.n	80028ea <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d006      	beq.n	80028b6 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d119      	bne.n	80028ea <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0220 	bic.w	r2, r2, #32
 80028c4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d105      	bne.n	80028ea <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f043 0201 	orr.w	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fe fee2 	bl	80016b4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0212 	mvn.w	r2, #18
 80028f8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b04      	cmp	r3, #4
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291a:	2b80      	cmp	r3, #128	; 0x80
 800291c:	bf0c      	ite	eq
 800291e:	2301      	moveq	r3, #1
 8002920:	2300      	movne	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d057      	beq.n	80029dc <HAL_ADC_IRQHandler+0x1b8>
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d054      	beq.n	80029dc <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	2b00      	cmp	r3, #0
 800293c:	d105      	bne.n	800294a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d139      	bne.n	80029cc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002962:	2b00      	cmp	r3, #0
 8002964:	d006      	beq.n	8002974 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002970:	2b00      	cmp	r3, #0
 8002972:	d12b      	bne.n	80029cc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800297e:	2b00      	cmp	r3, #0
 8002980:	d124      	bne.n	80029cc <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800298c:	2b00      	cmp	r3, #0
 800298e:	d11d      	bne.n	80029cc <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002994:	2b00      	cmp	r3, #0
 8002996:	d119      	bne.n	80029cc <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d105      	bne.n	80029cc <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	f043 0201 	orr.w	r2, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 faa9 	bl	8002f24 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f06f 020c 	mvn.w	r2, #12
 80029da:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	bf0c      	ite	eq
 80029ea:	2301      	moveq	r3, #1
 80029ec:	2300      	movne	r3, #0
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fc:	2b40      	cmp	r3, #64	; 0x40
 80029fe:	bf0c      	ite	eq
 8002a00:	2301      	moveq	r3, #1
 8002a02:	2300      	movne	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d017      	beq.n	8002a3e <HAL_ADC_IRQHandler+0x21a>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d014      	beq.n	8002a3e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d10d      	bne.n	8002a3e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f846 	bl	8002ac0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0201 	mvn.w	r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0320 	and.w	r3, r3, #32
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2301      	moveq	r3, #1
 8002a4e:	2300      	movne	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d015      	beq.n	8002a9e <HAL_ADC_IRQHandler+0x27a>
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d012      	beq.n	8002a9e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	f043 0202 	orr.w	r2, r3, #2
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0220 	mvn.w	r2, #32
 8002a8c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f820 	bl	8002ad4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0220 	mvn.w	r2, #32
 8002a9c:	601a      	str	r2, [r3, #0]
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x1c>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e105      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x228>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b09      	cmp	r3, #9
 8002b12:	d925      	bls.n	8002b60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68d9      	ldr	r1, [r3, #12]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	461a      	mov	r2, r3
 8002b22:	4613      	mov	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	3b1e      	subs	r3, #30
 8002b2a:	2207      	movs	r2, #7
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43da      	mvns	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	400a      	ands	r2, r1
 8002b38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68d9      	ldr	r1, [r3, #12]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4403      	add	r3, r0
 8002b52:	3b1e      	subs	r3, #30
 8002b54:	409a      	lsls	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	e022      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6919      	ldr	r1, [r3, #16]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4613      	mov	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	2207      	movs	r2, #7
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	400a      	ands	r2, r1
 8002b82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6919      	ldr	r1, [r3, #16]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	4618      	mov	r0, r3
 8002b96:	4603      	mov	r3, r0
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	4403      	add	r3, r0
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b06      	cmp	r3, #6
 8002bac:	d824      	bhi.n	8002bf8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3b05      	subs	r3, #5
 8002bc0:	221f      	movs	r2, #31
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43da      	mvns	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	400a      	ands	r2, r1
 8002bce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	4618      	mov	r0, r3
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	3b05      	subs	r3, #5
 8002bea:	fa00 f203 	lsl.w	r2, r0, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	635a      	str	r2, [r3, #52]	; 0x34
 8002bf6:	e04c      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b0c      	cmp	r3, #12
 8002bfe:	d824      	bhi.n	8002c4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	3b23      	subs	r3, #35	; 0x23
 8002c12:	221f      	movs	r2, #31
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43da      	mvns	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	400a      	ands	r2, r1
 8002c20:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	4618      	mov	r0, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	3b23      	subs	r3, #35	; 0x23
 8002c3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30
 8002c48:	e023      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	3b41      	subs	r3, #65	; 0x41
 8002c5c:	221f      	movs	r2, #31
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	400a      	ands	r2, r1
 8002c6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	4618      	mov	r0, r3
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	3b41      	subs	r3, #65	; 0x41
 8002c86:	fa00 f203 	lsl.w	r2, r0, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c92:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <HAL_ADC_ConfigChannel+0x234>)
 8002c94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a21      	ldr	r2, [pc, #132]	; (8002d20 <HAL_ADC_ConfigChannel+0x238>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d109      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x1cc>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b12      	cmp	r3, #18
 8002ca6:	d105      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a19      	ldr	r2, [pc, #100]	; (8002d20 <HAL_ADC_ConfigChannel+0x238>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d123      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x21e>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b10      	cmp	r3, #16
 8002cc4:	d003      	beq.n	8002cce <HAL_ADC_ConfigChannel+0x1e6>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b11      	cmp	r3, #17
 8002ccc:	d11b      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b10      	cmp	r3, #16
 8002ce0:	d111      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ce2:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <HAL_ADC_ConfigChannel+0x23c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a10      	ldr	r2, [pc, #64]	; (8002d28 <HAL_ADC_ConfigChannel+0x240>)
 8002ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cec:	0c9a      	lsrs	r2, r3, #18
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cf8:	e002      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f9      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	40012300 	.word	0x40012300
 8002d20:	40012000 	.word	0x40012000
 8002d24:	20000004 	.word	0x20000004
 8002d28:	431bde83 	.word	0x431bde83

08002d2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d34:	4b79      	ldr	r3, [pc, #484]	; (8002f1c <ADC_Init+0x1f0>)
 8002d36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6859      	ldr	r1, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	021a      	lsls	r2, r3, #8
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6859      	ldr	r1, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002da6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6899      	ldr	r1, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	4a58      	ldr	r2, [pc, #352]	; (8002f20 <ADC_Init+0x1f4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d022      	beq.n	8002e0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6899      	ldr	r1, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002df4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6899      	ldr	r1, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	e00f      	b.n	8002e2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0202 	bic.w	r2, r2, #2
 8002e38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6899      	ldr	r1, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	7e1b      	ldrb	r3, [r3, #24]
 8002e44:	005a      	lsls	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d01b      	beq.n	8002e90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6859      	ldr	r1, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	3b01      	subs	r3, #1
 8002e84:	035a      	lsls	r2, r3, #13
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	e007      	b.n	8002ea0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	051a      	lsls	r2, r3, #20
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ed4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6899      	ldr	r1, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ee2:	025a      	lsls	r2, r3, #9
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6899      	ldr	r1, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	029a      	lsls	r2, r3, #10
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	609a      	str	r2, [r3, #8]
}
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	40012300 	.word	0x40012300
 8002f20:	0f000001 	.word	0x0f000001

08002f24 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <__NVIC_SetPriorityGrouping+0x44>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f54:	4013      	ands	r3, r2
 8002f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f6a:	4a04      	ldr	r2, [pc, #16]	; (8002f7c <__NVIC_SetPriorityGrouping+0x44>)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	60d3      	str	r3, [r2, #12]
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <__NVIC_GetPriorityGrouping+0x18>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	0a1b      	lsrs	r3, r3, #8
 8002f8a:	f003 0307 	and.w	r3, r3, #7
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	db0b      	blt.n	8002fc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	f003 021f 	and.w	r2, r3, #31
 8002fb4:	4907      	ldr	r1, [pc, #28]	; (8002fd4 <__NVIC_EnableIRQ+0x38>)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	e000e100 	.word	0xe000e100

08002fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	6039      	str	r1, [r7, #0]
 8002fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	db0a      	blt.n	8003002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	490c      	ldr	r1, [pc, #48]	; (8003024 <__NVIC_SetPriority+0x4c>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	0112      	lsls	r2, r2, #4
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003000:	e00a      	b.n	8003018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	4908      	ldr	r1, [pc, #32]	; (8003028 <__NVIC_SetPriority+0x50>)
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	3b04      	subs	r3, #4
 8003010:	0112      	lsls	r2, r2, #4
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	440b      	add	r3, r1
 8003016:	761a      	strb	r2, [r3, #24]
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000e100 	.word	0xe000e100
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800302c:	b480      	push	{r7}
 800302e:	b089      	sub	sp, #36	; 0x24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f1c3 0307 	rsb	r3, r3, #7
 8003046:	2b04      	cmp	r3, #4
 8003048:	bf28      	it	cs
 800304a:	2304      	movcs	r3, #4
 800304c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3304      	adds	r3, #4
 8003052:	2b06      	cmp	r3, #6
 8003054:	d902      	bls.n	800305c <NVIC_EncodePriority+0x30>
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3b03      	subs	r3, #3
 800305a:	e000      	b.n	800305e <NVIC_EncodePriority+0x32>
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003060:	f04f 32ff 	mov.w	r2, #4294967295
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43da      	mvns	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	401a      	ands	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003074:	f04f 31ff 	mov.w	r1, #4294967295
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	fa01 f303 	lsl.w	r3, r1, r3
 800307e:	43d9      	mvns	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003084:	4313      	orrs	r3, r2
         );
}
 8003086:	4618      	mov	r0, r3
 8003088:	3724      	adds	r7, #36	; 0x24
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff ff4c 	bl	8002f38 <__NVIC_SetPriorityGrouping>
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ba:	f7ff ff61 	bl	8002f80 <__NVIC_GetPriorityGrouping>
 80030be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	68b9      	ldr	r1, [r7, #8]
 80030c4:	6978      	ldr	r0, [r7, #20]
 80030c6:	f7ff ffb1 	bl	800302c <NVIC_EncodePriority>
 80030ca:	4602      	mov	r2, r0
 80030cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030d0:	4611      	mov	r1, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff ff80 	bl	8002fd8 <__NVIC_SetPriority>
}
 80030d8:	bf00      	nop
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff ff54 	bl	8002f9c <__NVIC_EnableIRQ>
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b089      	sub	sp, #36	; 0x24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800310e:	2300      	movs	r3, #0
 8003110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
 8003116:	e16b      	b.n	80033f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003118:	2201      	movs	r2, #1
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4013      	ands	r3, r2
 800312a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	429a      	cmp	r2, r3
 8003132:	f040 815a 	bne.w	80033ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	2b01      	cmp	r3, #1
 8003140:	d005      	beq.n	800314e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800314a:	2b02      	cmp	r3, #2
 800314c:	d130      	bne.n	80031b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	2203      	movs	r2, #3
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4013      	ands	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003184:	2201      	movs	r2, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 0201 	and.w	r2, r3, #1
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 0303 	and.w	r3, r3, #3
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d017      	beq.n	80031ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	2203      	movs	r2, #3
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d123      	bne.n	8003240 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	08da      	lsrs	r2, r3, #3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3208      	adds	r2, #8
 8003200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003204:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	220f      	movs	r2, #15
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4013      	ands	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	08da      	lsrs	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3208      	adds	r2, #8
 800323a:	69b9      	ldr	r1, [r7, #24]
 800323c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	2203      	movs	r2, #3
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 0203 	and.w	r2, r3, #3
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4313      	orrs	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80b4 	beq.w	80033ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	4b60      	ldr	r3, [pc, #384]	; (8003408 <HAL_GPIO_Init+0x30c>)
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	4a5f      	ldr	r2, [pc, #380]	; (8003408 <HAL_GPIO_Init+0x30c>)
 800328c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003290:	6453      	str	r3, [r2, #68]	; 0x44
 8003292:	4b5d      	ldr	r3, [pc, #372]	; (8003408 <HAL_GPIO_Init+0x30c>)
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800329e:	4a5b      	ldr	r2, [pc, #364]	; (800340c <HAL_GPIO_Init+0x310>)
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	089b      	lsrs	r3, r3, #2
 80032a4:	3302      	adds	r3, #2
 80032a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	220f      	movs	r2, #15
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a52      	ldr	r2, [pc, #328]	; (8003410 <HAL_GPIO_Init+0x314>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d02b      	beq.n	8003322 <HAL_GPIO_Init+0x226>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a51      	ldr	r2, [pc, #324]	; (8003414 <HAL_GPIO_Init+0x318>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d025      	beq.n	800331e <HAL_GPIO_Init+0x222>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a50      	ldr	r2, [pc, #320]	; (8003418 <HAL_GPIO_Init+0x31c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d01f      	beq.n	800331a <HAL_GPIO_Init+0x21e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a4f      	ldr	r2, [pc, #316]	; (800341c <HAL_GPIO_Init+0x320>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d019      	beq.n	8003316 <HAL_GPIO_Init+0x21a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4e      	ldr	r2, [pc, #312]	; (8003420 <HAL_GPIO_Init+0x324>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d013      	beq.n	8003312 <HAL_GPIO_Init+0x216>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a4d      	ldr	r2, [pc, #308]	; (8003424 <HAL_GPIO_Init+0x328>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00d      	beq.n	800330e <HAL_GPIO_Init+0x212>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a4c      	ldr	r2, [pc, #304]	; (8003428 <HAL_GPIO_Init+0x32c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d007      	beq.n	800330a <HAL_GPIO_Init+0x20e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a4b      	ldr	r2, [pc, #300]	; (800342c <HAL_GPIO_Init+0x330>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d101      	bne.n	8003306 <HAL_GPIO_Init+0x20a>
 8003302:	2307      	movs	r3, #7
 8003304:	e00e      	b.n	8003324 <HAL_GPIO_Init+0x228>
 8003306:	2308      	movs	r3, #8
 8003308:	e00c      	b.n	8003324 <HAL_GPIO_Init+0x228>
 800330a:	2306      	movs	r3, #6
 800330c:	e00a      	b.n	8003324 <HAL_GPIO_Init+0x228>
 800330e:	2305      	movs	r3, #5
 8003310:	e008      	b.n	8003324 <HAL_GPIO_Init+0x228>
 8003312:	2304      	movs	r3, #4
 8003314:	e006      	b.n	8003324 <HAL_GPIO_Init+0x228>
 8003316:	2303      	movs	r3, #3
 8003318:	e004      	b.n	8003324 <HAL_GPIO_Init+0x228>
 800331a:	2302      	movs	r3, #2
 800331c:	e002      	b.n	8003324 <HAL_GPIO_Init+0x228>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <HAL_GPIO_Init+0x228>
 8003322:	2300      	movs	r3, #0
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	f002 0203 	and.w	r2, r2, #3
 800332a:	0092      	lsls	r2, r2, #2
 800332c:	4093      	lsls	r3, r2
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003334:	4935      	ldr	r1, [pc, #212]	; (800340c <HAL_GPIO_Init+0x310>)
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	089b      	lsrs	r3, r3, #2
 800333a:	3302      	adds	r3, #2
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003342:	4b3b      	ldr	r3, [pc, #236]	; (8003430 <HAL_GPIO_Init+0x334>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003366:	4a32      	ldr	r2, [pc, #200]	; (8003430 <HAL_GPIO_Init+0x334>)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800336c:	4b30      	ldr	r3, [pc, #192]	; (8003430 <HAL_GPIO_Init+0x334>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003390:	4a27      	ldr	r2, [pc, #156]	; (8003430 <HAL_GPIO_Init+0x334>)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003396:	4b26      	ldr	r3, [pc, #152]	; (8003430 <HAL_GPIO_Init+0x334>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033ba:	4a1d      	ldr	r2, [pc, #116]	; (8003430 <HAL_GPIO_Init+0x334>)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033c0:	4b1b      	ldr	r3, [pc, #108]	; (8003430 <HAL_GPIO_Init+0x334>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033e4:	4a12      	ldr	r2, [pc, #72]	; (8003430 <HAL_GPIO_Init+0x334>)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	3301      	adds	r3, #1
 80033ee:	61fb      	str	r3, [r7, #28]
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	2b0f      	cmp	r3, #15
 80033f4:	f67f ae90 	bls.w	8003118 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	3724      	adds	r7, #36	; 0x24
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800
 800340c:	40013800 	.word	0x40013800
 8003410:	40020000 	.word	0x40020000
 8003414:	40020400 	.word	0x40020400
 8003418:	40020800 	.word	0x40020800
 800341c:	40020c00 	.word	0x40020c00
 8003420:	40021000 	.word	0x40021000
 8003424:	40021400 	.word	0x40021400
 8003428:	40021800 	.word	0x40021800
 800342c:	40021c00 	.word	0x40021c00
 8003430:	40013c00 	.word	0x40013c00

08003434 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	887b      	ldrh	r3, [r7, #2]
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800344c:	2301      	movs	r3, #1
 800344e:	73fb      	strb	r3, [r7, #15]
 8003450:	e001      	b.n	8003456 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003452:	2300      	movs	r3, #0
 8003454:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003456:	7bfb      	ldrb	r3, [r7, #15]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	807b      	strh	r3, [r7, #2]
 8003470:	4613      	mov	r3, r2
 8003472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003474:	787b      	ldrb	r3, [r7, #1]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800347a:	887a      	ldrh	r2, [r7, #2]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003480:	e003      	b.n	800348a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003482:	887b      	ldrh	r3, [r7, #2]
 8003484:	041a      	lsls	r2, r3, #16
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	619a      	str	r2, [r3, #24]
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034a2:	4b08      	ldr	r3, [pc, #32]	; (80034c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	88fb      	ldrh	r3, [r7, #6]
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d006      	beq.n	80034bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034ae:	4a05      	ldr	r2, [pc, #20]	; (80034c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fe f8aa 	bl	8001610 <HAL_GPIO_EXTI_Callback>
  }
}
 80034bc:	bf00      	nop
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40013c00 	.word	0x40013c00

080034c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e264      	b.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d075      	beq.n	80035d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034e6:	4ba3      	ldr	r3, [pc, #652]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d00c      	beq.n	800350c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f2:	4ba0      	ldr	r3, [pc, #640]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d112      	bne.n	8003524 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034fe:	4b9d      	ldr	r3, [pc, #628]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800350a:	d10b      	bne.n	8003524 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800350c:	4b99      	ldr	r3, [pc, #612]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d05b      	beq.n	80035d0 <HAL_RCC_OscConfig+0x108>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d157      	bne.n	80035d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e23f      	b.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352c:	d106      	bne.n	800353c <HAL_RCC_OscConfig+0x74>
 800352e:	4b91      	ldr	r3, [pc, #580]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a90      	ldr	r2, [pc, #576]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 8003534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	e01d      	b.n	8003578 <HAL_RCC_OscConfig+0xb0>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003544:	d10c      	bne.n	8003560 <HAL_RCC_OscConfig+0x98>
 8003546:	4b8b      	ldr	r3, [pc, #556]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a8a      	ldr	r2, [pc, #552]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	4b88      	ldr	r3, [pc, #544]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a87      	ldr	r2, [pc, #540]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 8003558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	e00b      	b.n	8003578 <HAL_RCC_OscConfig+0xb0>
 8003560:	4b84      	ldr	r3, [pc, #528]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a83      	ldr	r2, [pc, #524]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 8003566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	4b81      	ldr	r3, [pc, #516]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a80      	ldr	r2, [pc, #512]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 8003572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d013      	beq.n	80035a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7fe fffe 	bl	8002580 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003588:	f7fe fffa 	bl	8002580 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b64      	cmp	r3, #100	; 0x64
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e204      	b.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	4b76      	ldr	r3, [pc, #472]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0xc0>
 80035a6:	e014      	b.n	80035d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a8:	f7fe ffea 	bl	8002580 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b0:	f7fe ffe6 	bl	8002580 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	; 0x64
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e1f0      	b.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c2:	4b6c      	ldr	r3, [pc, #432]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0xe8>
 80035ce:	e000      	b.n	80035d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d063      	beq.n	80036a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035de:	4b65      	ldr	r3, [pc, #404]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 030c 	and.w	r3, r3, #12
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00b      	beq.n	8003602 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ea:	4b62      	ldr	r3, [pc, #392]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d11c      	bne.n	8003630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035f6:	4b5f      	ldr	r3, [pc, #380]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d116      	bne.n	8003630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003602:	4b5c      	ldr	r3, [pc, #368]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <HAL_RCC_OscConfig+0x152>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d001      	beq.n	800361a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e1c4      	b.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361a:	4b56      	ldr	r3, [pc, #344]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4952      	ldr	r1, [pc, #328]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 800362a:	4313      	orrs	r3, r2
 800362c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362e:	e03a      	b.n	80036a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d020      	beq.n	800367a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003638:	4b4f      	ldr	r3, [pc, #316]	; (8003778 <HAL_RCC_OscConfig+0x2b0>)
 800363a:	2201      	movs	r2, #1
 800363c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363e:	f7fe ff9f 	bl	8002580 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003646:	f7fe ff9b 	bl	8002580 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e1a5      	b.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003658:	4b46      	ldr	r3, [pc, #280]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003664:	4b43      	ldr	r3, [pc, #268]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4940      	ldr	r1, [pc, #256]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 8003674:	4313      	orrs	r3, r2
 8003676:	600b      	str	r3, [r1, #0]
 8003678:	e015      	b.n	80036a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800367a:	4b3f      	ldr	r3, [pc, #252]	; (8003778 <HAL_RCC_OscConfig+0x2b0>)
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7fe ff7e 	bl	8002580 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003688:	f7fe ff7a 	bl	8002580 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e184      	b.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369a:	4b36      	ldr	r3, [pc, #216]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d030      	beq.n	8003714 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d016      	beq.n	80036e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ba:	4b30      	ldr	r3, [pc, #192]	; (800377c <HAL_RCC_OscConfig+0x2b4>)
 80036bc:	2201      	movs	r2, #1
 80036be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c0:	f7fe ff5e 	bl	8002580 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036c8:	f7fe ff5a 	bl	8002580 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e164      	b.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036da:	4b26      	ldr	r3, [pc, #152]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 80036dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCC_OscConfig+0x200>
 80036e6:	e015      	b.n	8003714 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e8:	4b24      	ldr	r3, [pc, #144]	; (800377c <HAL_RCC_OscConfig+0x2b4>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ee:	f7fe ff47 	bl	8002580 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f6:	f7fe ff43 	bl	8002580 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e14d      	b.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003708:	4b1a      	ldr	r3, [pc, #104]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 800370a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1f0      	bne.n	80036f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80a0 	beq.w	8003862 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003722:	2300      	movs	r3, #0
 8003724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003726:	4b13      	ldr	r3, [pc, #76]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10f      	bne.n	8003752 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003732:	2300      	movs	r3, #0
 8003734:	60bb      	str	r3, [r7, #8]
 8003736:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	4a0e      	ldr	r2, [pc, #56]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 800373c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003740:	6413      	str	r3, [r2, #64]	; 0x40
 8003742:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <HAL_RCC_OscConfig+0x2ac>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374a:	60bb      	str	r3, [r7, #8]
 800374c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800374e:	2301      	movs	r3, #1
 8003750:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <HAL_RCC_OscConfig+0x2b8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375a:	2b00      	cmp	r3, #0
 800375c:	d121      	bne.n	80037a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800375e:	4b08      	ldr	r3, [pc, #32]	; (8003780 <HAL_RCC_OscConfig+0x2b8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a07      	ldr	r2, [pc, #28]	; (8003780 <HAL_RCC_OscConfig+0x2b8>)
 8003764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800376a:	f7fe ff09 	bl	8002580 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003770:	e011      	b.n	8003796 <HAL_RCC_OscConfig+0x2ce>
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800
 8003778:	42470000 	.word	0x42470000
 800377c:	42470e80 	.word	0x42470e80
 8003780:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003784:	f7fe fefc 	bl	8002580 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e106      	b.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003796:	4b85      	ldr	r3, [pc, #532]	; (80039ac <HAL_RCC_OscConfig+0x4e4>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d106      	bne.n	80037b8 <HAL_RCC_OscConfig+0x2f0>
 80037aa:	4b81      	ldr	r3, [pc, #516]	; (80039b0 <HAL_RCC_OscConfig+0x4e8>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ae:	4a80      	ldr	r2, [pc, #512]	; (80039b0 <HAL_RCC_OscConfig+0x4e8>)
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	6713      	str	r3, [r2, #112]	; 0x70
 80037b6:	e01c      	b.n	80037f2 <HAL_RCC_OscConfig+0x32a>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b05      	cmp	r3, #5
 80037be:	d10c      	bne.n	80037da <HAL_RCC_OscConfig+0x312>
 80037c0:	4b7b      	ldr	r3, [pc, #492]	; (80039b0 <HAL_RCC_OscConfig+0x4e8>)
 80037c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c4:	4a7a      	ldr	r2, [pc, #488]	; (80039b0 <HAL_RCC_OscConfig+0x4e8>)
 80037c6:	f043 0304 	orr.w	r3, r3, #4
 80037ca:	6713      	str	r3, [r2, #112]	; 0x70
 80037cc:	4b78      	ldr	r3, [pc, #480]	; (80039b0 <HAL_RCC_OscConfig+0x4e8>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d0:	4a77      	ldr	r2, [pc, #476]	; (80039b0 <HAL_RCC_OscConfig+0x4e8>)
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	6713      	str	r3, [r2, #112]	; 0x70
 80037d8:	e00b      	b.n	80037f2 <HAL_RCC_OscConfig+0x32a>
 80037da:	4b75      	ldr	r3, [pc, #468]	; (80039b0 <HAL_RCC_OscConfig+0x4e8>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037de:	4a74      	ldr	r2, [pc, #464]	; (80039b0 <HAL_RCC_OscConfig+0x4e8>)
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	6713      	str	r3, [r2, #112]	; 0x70
 80037e6:	4b72      	ldr	r3, [pc, #456]	; (80039b0 <HAL_RCC_OscConfig+0x4e8>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	4a71      	ldr	r2, [pc, #452]	; (80039b0 <HAL_RCC_OscConfig+0x4e8>)
 80037ec:	f023 0304 	bic.w	r3, r3, #4
 80037f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d015      	beq.n	8003826 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fa:	f7fe fec1 	bl	8002580 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003800:	e00a      	b.n	8003818 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003802:	f7fe febd 	bl	8002580 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003810:	4293      	cmp	r3, r2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e0c5      	b.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003818:	4b65      	ldr	r3, [pc, #404]	; (80039b0 <HAL_RCC_OscConfig+0x4e8>)
 800381a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0ee      	beq.n	8003802 <HAL_RCC_OscConfig+0x33a>
 8003824:	e014      	b.n	8003850 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003826:	f7fe feab 	bl	8002580 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800382c:	e00a      	b.n	8003844 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800382e:	f7fe fea7 	bl	8002580 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	f241 3288 	movw	r2, #5000	; 0x1388
 800383c:	4293      	cmp	r3, r2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e0af      	b.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003844:	4b5a      	ldr	r3, [pc, #360]	; (80039b0 <HAL_RCC_OscConfig+0x4e8>)
 8003846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1ee      	bne.n	800382e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003850:	7dfb      	ldrb	r3, [r7, #23]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d105      	bne.n	8003862 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003856:	4b56      	ldr	r3, [pc, #344]	; (80039b0 <HAL_RCC_OscConfig+0x4e8>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	4a55      	ldr	r2, [pc, #340]	; (80039b0 <HAL_RCC_OscConfig+0x4e8>)
 800385c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003860:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 809b 	beq.w	80039a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800386c:	4b50      	ldr	r3, [pc, #320]	; (80039b0 <HAL_RCC_OscConfig+0x4e8>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 030c 	and.w	r3, r3, #12
 8003874:	2b08      	cmp	r3, #8
 8003876:	d05c      	beq.n	8003932 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d141      	bne.n	8003904 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003880:	4b4c      	ldr	r3, [pc, #304]	; (80039b4 <HAL_RCC_OscConfig+0x4ec>)
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003886:	f7fe fe7b 	bl	8002580 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800388e:	f7fe fe77 	bl	8002580 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e081      	b.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a0:	4b43      	ldr	r3, [pc, #268]	; (80039b0 <HAL_RCC_OscConfig+0x4e8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1f0      	bne.n	800388e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69da      	ldr	r2, [r3, #28]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	019b      	lsls	r3, r3, #6
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c2:	085b      	lsrs	r3, r3, #1
 80038c4:	3b01      	subs	r3, #1
 80038c6:	041b      	lsls	r3, r3, #16
 80038c8:	431a      	orrs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ce:	061b      	lsls	r3, r3, #24
 80038d0:	4937      	ldr	r1, [pc, #220]	; (80039b0 <HAL_RCC_OscConfig+0x4e8>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d6:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <HAL_RCC_OscConfig+0x4ec>)
 80038d8:	2201      	movs	r2, #1
 80038da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038dc:	f7fe fe50 	bl	8002580 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e4:	f7fe fe4c 	bl	8002580 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e056      	b.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f6:	4b2e      	ldr	r3, [pc, #184]	; (80039b0 <HAL_RCC_OscConfig+0x4e8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <HAL_RCC_OscConfig+0x41c>
 8003902:	e04e      	b.n	80039a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003904:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <HAL_RCC_OscConfig+0x4ec>)
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390a:	f7fe fe39 	bl	8002580 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003912:	f7fe fe35 	bl	8002580 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e03f      	b.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003924:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <HAL_RCC_OscConfig+0x4e8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1f0      	bne.n	8003912 <HAL_RCC_OscConfig+0x44a>
 8003930:	e037      	b.n	80039a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e032      	b.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800393e:	4b1c      	ldr	r3, [pc, #112]	; (80039b0 <HAL_RCC_OscConfig+0x4e8>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d028      	beq.n	800399e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003956:	429a      	cmp	r2, r3
 8003958:	d121      	bne.n	800399e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003964:	429a      	cmp	r2, r3
 8003966:	d11a      	bne.n	800399e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800396e:	4013      	ands	r3, r2
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003974:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003976:	4293      	cmp	r3, r2
 8003978:	d111      	bne.n	800399e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003984:	085b      	lsrs	r3, r3, #1
 8003986:	3b01      	subs	r3, #1
 8003988:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800398a:	429a      	cmp	r2, r3
 800398c:	d107      	bne.n	800399e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800399a:	429a      	cmp	r2, r3
 800399c:	d001      	beq.n	80039a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40007000 	.word	0x40007000
 80039b0:	40023800 	.word	0x40023800
 80039b4:	42470060 	.word	0x42470060

080039b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0cc      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039cc:	4b68      	ldr	r3, [pc, #416]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d90c      	bls.n	80039f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b65      	ldr	r3, [pc, #404]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b63      	ldr	r3, [pc, #396]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0b8      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d020      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a0c:	4b59      	ldr	r3, [pc, #356]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	4a58      	ldr	r2, [pc, #352]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a24:	4b53      	ldr	r3, [pc, #332]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4a52      	ldr	r2, [pc, #328]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a30:	4b50      	ldr	r3, [pc, #320]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	494d      	ldr	r1, [pc, #308]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d044      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d107      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a56:	4b47      	ldr	r3, [pc, #284]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d119      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e07f      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d003      	beq.n	8003a76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a76:	4b3f      	ldr	r3, [pc, #252]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e06f      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a86:	4b3b      	ldr	r3, [pc, #236]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e067      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a96:	4b37      	ldr	r3, [pc, #220]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f023 0203 	bic.w	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4934      	ldr	r1, [pc, #208]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa8:	f7fe fd6a 	bl	8002580 <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab0:	f7fe fd66 	bl	8002580 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e04f      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac6:	4b2b      	ldr	r3, [pc, #172]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 020c 	and.w	r2, r3, #12
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d1eb      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b25      	ldr	r3, [pc, #148]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d20c      	bcs.n	8003b00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b22      	ldr	r3, [pc, #136]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aee:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d001      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e032      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b0c:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4916      	ldr	r1, [pc, #88]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d009      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b2a:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	490e      	ldr	r1, [pc, #56]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b3e:	f000 f821 	bl	8003b84 <HAL_RCC_GetSysClockFreq>
 8003b42:	4602      	mov	r2, r0
 8003b44:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	091b      	lsrs	r3, r3, #4
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	490a      	ldr	r1, [pc, #40]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003b50:	5ccb      	ldrb	r3, [r1, r3]
 8003b52:	fa22 f303 	lsr.w	r3, r2, r3
 8003b56:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b5a:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <HAL_RCC_ClockConfig+0x1c8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fe fb36 	bl	80021d0 <HAL_InitTick>

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40023c00 	.word	0x40023c00
 8003b74:	40023800 	.word	0x40023800
 8003b78:	08005b80 	.word	0x08005b80
 8003b7c:	20000004 	.word	0x20000004
 8003b80:	20000008 	.word	0x20000008

08003b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	607b      	str	r3, [r7, #4]
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	2300      	movs	r3, #0
 8003b96:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b9c:	4b67      	ldr	r3, [pc, #412]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 030c 	and.w	r3, r3, #12
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d00d      	beq.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	f200 80bd 	bhi.w	8003d28 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d003      	beq.n	8003bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8003bb6:	e0b7      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bb8:	4b61      	ldr	r3, [pc, #388]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003bba:	60bb      	str	r3, [r7, #8]
       break;
 8003bbc:	e0b7      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bbe:	4b61      	ldr	r3, [pc, #388]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003bc0:	60bb      	str	r3, [r7, #8]
      break;
 8003bc2:	e0b4      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bc4:	4b5d      	ldr	r3, [pc, #372]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bcc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bce:	4b5b      	ldr	r3, [pc, #364]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d04d      	beq.n	8003c76 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bda:	4b58      	ldr	r3, [pc, #352]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	099b      	lsrs	r3, r3, #6
 8003be0:	461a      	mov	r2, r3
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bea:	f04f 0100 	mov.w	r1, #0
 8003bee:	ea02 0800 	and.w	r8, r2, r0
 8003bf2:	ea03 0901 	and.w	r9, r3, r1
 8003bf6:	4640      	mov	r0, r8
 8003bf8:	4649      	mov	r1, r9
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	014b      	lsls	r3, r1, #5
 8003c04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c08:	0142      	lsls	r2, r0, #5
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	ebb0 0008 	subs.w	r0, r0, r8
 8003c12:	eb61 0109 	sbc.w	r1, r1, r9
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	018b      	lsls	r3, r1, #6
 8003c20:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c24:	0182      	lsls	r2, r0, #6
 8003c26:	1a12      	subs	r2, r2, r0
 8003c28:	eb63 0301 	sbc.w	r3, r3, r1
 8003c2c:	f04f 0000 	mov.w	r0, #0
 8003c30:	f04f 0100 	mov.w	r1, #0
 8003c34:	00d9      	lsls	r1, r3, #3
 8003c36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c3a:	00d0      	lsls	r0, r2, #3
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	eb12 0208 	adds.w	r2, r2, r8
 8003c44:	eb43 0309 	adc.w	r3, r3, r9
 8003c48:	f04f 0000 	mov.w	r0, #0
 8003c4c:	f04f 0100 	mov.w	r1, #0
 8003c50:	0259      	lsls	r1, r3, #9
 8003c52:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003c56:	0250      	lsls	r0, r2, #9
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	4619      	mov	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	461a      	mov	r2, r3
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	f7fc fe08 	bl	800087c <__aeabi_uldivmod>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4613      	mov	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	e04a      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c76:	4b31      	ldr	r3, [pc, #196]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	099b      	lsrs	r3, r3, #6
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c86:	f04f 0100 	mov.w	r1, #0
 8003c8a:	ea02 0400 	and.w	r4, r2, r0
 8003c8e:	ea03 0501 	and.w	r5, r3, r1
 8003c92:	4620      	mov	r0, r4
 8003c94:	4629      	mov	r1, r5
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	014b      	lsls	r3, r1, #5
 8003ca0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ca4:	0142      	lsls	r2, r0, #5
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	4619      	mov	r1, r3
 8003caa:	1b00      	subs	r0, r0, r4
 8003cac:	eb61 0105 	sbc.w	r1, r1, r5
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	018b      	lsls	r3, r1, #6
 8003cba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003cbe:	0182      	lsls	r2, r0, #6
 8003cc0:	1a12      	subs	r2, r2, r0
 8003cc2:	eb63 0301 	sbc.w	r3, r3, r1
 8003cc6:	f04f 0000 	mov.w	r0, #0
 8003cca:	f04f 0100 	mov.w	r1, #0
 8003cce:	00d9      	lsls	r1, r3, #3
 8003cd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cd4:	00d0      	lsls	r0, r2, #3
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	1912      	adds	r2, r2, r4
 8003cdc:	eb45 0303 	adc.w	r3, r5, r3
 8003ce0:	f04f 0000 	mov.w	r0, #0
 8003ce4:	f04f 0100 	mov.w	r1, #0
 8003ce8:	0299      	lsls	r1, r3, #10
 8003cea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003cee:	0290      	lsls	r0, r2, #10
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	f7fc fdbc 	bl	800087c <__aeabi_uldivmod>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4613      	mov	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	3301      	adds	r3, #1
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d24:	60bb      	str	r3, [r7, #8]
      break;
 8003d26:	e002      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d2a:	60bb      	str	r3, [r7, #8]
      break;
 8003d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	00f42400 	.word	0x00f42400
 8003d44:	007a1200 	.word	0x007a1200

08003d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d4c:	4b03      	ldr	r3, [pc, #12]	; (8003d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	20000004 	.word	0x20000004

08003d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d64:	f7ff fff0 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	0a9b      	lsrs	r3, r3, #10
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	4903      	ldr	r1, [pc, #12]	; (8003d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d76:	5ccb      	ldrb	r3, [r1, r3]
 8003d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40023800 	.word	0x40023800
 8003d84:	08005b90 	.word	0x08005b90

08003d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d8c:	f7ff ffdc 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003d90:	4602      	mov	r2, r0
 8003d92:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	0b5b      	lsrs	r3, r3, #13
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	4903      	ldr	r1, [pc, #12]	; (8003dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d9e:	5ccb      	ldrb	r3, [r1, r3]
 8003da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40023800 	.word	0x40023800
 8003dac:	08005b90 	.word	0x08005b90

08003db0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	220f      	movs	r2, #15
 8003dbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003dc0:	4b12      	ldr	r3, [pc, #72]	; (8003e0c <HAL_RCC_GetClockConfig+0x5c>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 0203 	and.w	r2, r3, #3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003dcc:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <HAL_RCC_GetClockConfig+0x5c>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <HAL_RCC_GetClockConfig+0x5c>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003de4:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <HAL_RCC_GetClockConfig+0x5c>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	08db      	lsrs	r3, r3, #3
 8003dea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003df2:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <HAL_RCC_GetClockConfig+0x60>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0207 	and.w	r2, r3, #7
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	601a      	str	r2, [r3, #0]
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	40023c00 	.word	0x40023c00

08003e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e041      	b.n	8003eaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d106      	bne.n	8003e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fe f950 	bl	80020e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	4619      	mov	r1, r3
 8003e52:	4610      	mov	r0, r2
 8003e54:	f000 fb2c 	bl	80044b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d001      	beq.n	8003ecc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e046      	b.n	8003f5a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a23      	ldr	r2, [pc, #140]	; (8003f68 <HAL_TIM_Base_Start+0xb4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d022      	beq.n	8003f24 <HAL_TIM_Base_Start+0x70>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee6:	d01d      	beq.n	8003f24 <HAL_TIM_Base_Start+0x70>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1f      	ldr	r2, [pc, #124]	; (8003f6c <HAL_TIM_Base_Start+0xb8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d018      	beq.n	8003f24 <HAL_TIM_Base_Start+0x70>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1e      	ldr	r2, [pc, #120]	; (8003f70 <HAL_TIM_Base_Start+0xbc>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d013      	beq.n	8003f24 <HAL_TIM_Base_Start+0x70>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1c      	ldr	r2, [pc, #112]	; (8003f74 <HAL_TIM_Base_Start+0xc0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00e      	beq.n	8003f24 <HAL_TIM_Base_Start+0x70>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1b      	ldr	r2, [pc, #108]	; (8003f78 <HAL_TIM_Base_Start+0xc4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d009      	beq.n	8003f24 <HAL_TIM_Base_Start+0x70>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a19      	ldr	r2, [pc, #100]	; (8003f7c <HAL_TIM_Base_Start+0xc8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d004      	beq.n	8003f24 <HAL_TIM_Base_Start+0x70>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a18      	ldr	r2, [pc, #96]	; (8003f80 <HAL_TIM_Base_Start+0xcc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d111      	bne.n	8003f48 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b06      	cmp	r3, #6
 8003f34:	d010      	beq.n	8003f58 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0201 	orr.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f46:	e007      	b.n	8003f58 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40010000 	.word	0x40010000
 8003f6c:	40000400 	.word	0x40000400
 8003f70:	40000800 	.word	0x40000800
 8003f74:	40000c00 	.word	0x40000c00
 8003f78:	40010400 	.word	0x40010400
 8003f7c:	40014000 	.word	0x40014000
 8003f80:	40001800 	.word	0x40001800

08003f84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d001      	beq.n	8003f9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e04e      	b.n	800403a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0201 	orr.w	r2, r2, #1
 8003fb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a23      	ldr	r2, [pc, #140]	; (8004048 <HAL_TIM_Base_Start_IT+0xc4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d022      	beq.n	8004004 <HAL_TIM_Base_Start_IT+0x80>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc6:	d01d      	beq.n	8004004 <HAL_TIM_Base_Start_IT+0x80>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a1f      	ldr	r2, [pc, #124]	; (800404c <HAL_TIM_Base_Start_IT+0xc8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d018      	beq.n	8004004 <HAL_TIM_Base_Start_IT+0x80>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1e      	ldr	r2, [pc, #120]	; (8004050 <HAL_TIM_Base_Start_IT+0xcc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d013      	beq.n	8004004 <HAL_TIM_Base_Start_IT+0x80>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a1c      	ldr	r2, [pc, #112]	; (8004054 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00e      	beq.n	8004004 <HAL_TIM_Base_Start_IT+0x80>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a1b      	ldr	r2, [pc, #108]	; (8004058 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d009      	beq.n	8004004 <HAL_TIM_Base_Start_IT+0x80>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a19      	ldr	r2, [pc, #100]	; (800405c <HAL_TIM_Base_Start_IT+0xd8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d004      	beq.n	8004004 <HAL_TIM_Base_Start_IT+0x80>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a18      	ldr	r2, [pc, #96]	; (8004060 <HAL_TIM_Base_Start_IT+0xdc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d111      	bne.n	8004028 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b06      	cmp	r3, #6
 8004014:	d010      	beq.n	8004038 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 0201 	orr.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004026:	e007      	b.n	8004038 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40010000 	.word	0x40010000
 800404c:	40000400 	.word	0x40000400
 8004050:	40000800 	.word	0x40000800
 8004054:	40000c00 	.word	0x40000c00
 8004058:	40010400 	.word	0x40010400
 800405c:	40014000 	.word	0x40014000
 8004060:	40001800 	.word	0x40001800

08004064 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0201 	bic.w	r2, r2, #1
 800407a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6a1a      	ldr	r2, [r3, #32]
 8004082:	f241 1311 	movw	r3, #4369	; 0x1111
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10f      	bne.n	80040ac <HAL_TIM_Base_Stop_IT+0x48>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6a1a      	ldr	r2, [r3, #32]
 8004092:	f240 4344 	movw	r3, #1092	; 0x444
 8004096:	4013      	ands	r3, r2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d107      	bne.n	80040ac <HAL_TIM_Base_Stop_IT+0x48>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0201 	bic.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b082      	sub	sp, #8
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d122      	bne.n	800411e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d11b      	bne.n	800411e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f06f 0202 	mvn.w	r2, #2
 80040ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f9b5 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 800410a:	e005      	b.n	8004118 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f9a7 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f9b8 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b04      	cmp	r3, #4
 800412a:	d122      	bne.n	8004172 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b04      	cmp	r3, #4
 8004138:	d11b      	bne.n	8004172 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f06f 0204 	mvn.w	r2, #4
 8004142:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f98b 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 800415e:	e005      	b.n	800416c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f97d 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f98e 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	2b08      	cmp	r3, #8
 800417e:	d122      	bne.n	80041c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b08      	cmp	r3, #8
 800418c:	d11b      	bne.n	80041c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f06f 0208 	mvn.w	r2, #8
 8004196:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2204      	movs	r2, #4
 800419c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f961 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 80041b2:	e005      	b.n	80041c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f953 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f964 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f003 0310 	and.w	r3, r3, #16
 80041d0:	2b10      	cmp	r3, #16
 80041d2:	d122      	bne.n	800421a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f003 0310 	and.w	r3, r3, #16
 80041de:	2b10      	cmp	r3, #16
 80041e0:	d11b      	bne.n	800421a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f06f 0210 	mvn.w	r2, #16
 80041ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2208      	movs	r2, #8
 80041f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f937 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8004206:	e005      	b.n	8004214 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f929 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f93a 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b01      	cmp	r3, #1
 8004226:	d10e      	bne.n	8004246 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b01      	cmp	r3, #1
 8004234:	d107      	bne.n	8004246 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f06f 0201 	mvn.w	r2, #1
 800423e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7fd fe4b 	bl	8001edc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004250:	2b80      	cmp	r3, #128	; 0x80
 8004252:	d10e      	bne.n	8004272 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425e:	2b80      	cmp	r3, #128	; 0x80
 8004260:	d107      	bne.n	8004272 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800426a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fadf 	bl	8004830 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427c:	2b40      	cmp	r3, #64	; 0x40
 800427e:	d10e      	bne.n	800429e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428a:	2b40      	cmp	r3, #64	; 0x40
 800428c:	d107      	bne.n	800429e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f8ff 	bl	800449c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d10e      	bne.n	80042ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b20      	cmp	r3, #32
 80042b8:	d107      	bne.n	80042ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f06f 0220 	mvn.w	r2, #32
 80042c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 faa9 	bl	800481c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042ca:	bf00      	nop
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d101      	bne.n	80042ee <HAL_TIM_ConfigClockSource+0x1c>
 80042ea:	2302      	movs	r3, #2
 80042ec:	e0b4      	b.n	8004458 <HAL_TIM_ConfigClockSource+0x186>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2202      	movs	r2, #2
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800430c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004314:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004326:	d03e      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0xd4>
 8004328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800432c:	f200 8087 	bhi.w	800443e <HAL_TIM_ConfigClockSource+0x16c>
 8004330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004334:	f000 8086 	beq.w	8004444 <HAL_TIM_ConfigClockSource+0x172>
 8004338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433c:	d87f      	bhi.n	800443e <HAL_TIM_ConfigClockSource+0x16c>
 800433e:	2b70      	cmp	r3, #112	; 0x70
 8004340:	d01a      	beq.n	8004378 <HAL_TIM_ConfigClockSource+0xa6>
 8004342:	2b70      	cmp	r3, #112	; 0x70
 8004344:	d87b      	bhi.n	800443e <HAL_TIM_ConfigClockSource+0x16c>
 8004346:	2b60      	cmp	r3, #96	; 0x60
 8004348:	d050      	beq.n	80043ec <HAL_TIM_ConfigClockSource+0x11a>
 800434a:	2b60      	cmp	r3, #96	; 0x60
 800434c:	d877      	bhi.n	800443e <HAL_TIM_ConfigClockSource+0x16c>
 800434e:	2b50      	cmp	r3, #80	; 0x50
 8004350:	d03c      	beq.n	80043cc <HAL_TIM_ConfigClockSource+0xfa>
 8004352:	2b50      	cmp	r3, #80	; 0x50
 8004354:	d873      	bhi.n	800443e <HAL_TIM_ConfigClockSource+0x16c>
 8004356:	2b40      	cmp	r3, #64	; 0x40
 8004358:	d058      	beq.n	800440c <HAL_TIM_ConfigClockSource+0x13a>
 800435a:	2b40      	cmp	r3, #64	; 0x40
 800435c:	d86f      	bhi.n	800443e <HAL_TIM_ConfigClockSource+0x16c>
 800435e:	2b30      	cmp	r3, #48	; 0x30
 8004360:	d064      	beq.n	800442c <HAL_TIM_ConfigClockSource+0x15a>
 8004362:	2b30      	cmp	r3, #48	; 0x30
 8004364:	d86b      	bhi.n	800443e <HAL_TIM_ConfigClockSource+0x16c>
 8004366:	2b20      	cmp	r3, #32
 8004368:	d060      	beq.n	800442c <HAL_TIM_ConfigClockSource+0x15a>
 800436a:	2b20      	cmp	r3, #32
 800436c:	d867      	bhi.n	800443e <HAL_TIM_ConfigClockSource+0x16c>
 800436e:	2b00      	cmp	r3, #0
 8004370:	d05c      	beq.n	800442c <HAL_TIM_ConfigClockSource+0x15a>
 8004372:	2b10      	cmp	r3, #16
 8004374:	d05a      	beq.n	800442c <HAL_TIM_ConfigClockSource+0x15a>
 8004376:	e062      	b.n	800443e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	6899      	ldr	r1, [r3, #8]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f000 f9ac 	bl	80046e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800439a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	609a      	str	r2, [r3, #8]
      break;
 80043a4:	e04f      	b.n	8004446 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6899      	ldr	r1, [r3, #8]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f000 f995 	bl	80046e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043c8:	609a      	str	r2, [r3, #8]
      break;
 80043ca:	e03c      	b.n	8004446 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	6859      	ldr	r1, [r3, #4]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	461a      	mov	r2, r3
 80043da:	f000 f909 	bl	80045f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2150      	movs	r1, #80	; 0x50
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 f962 	bl	80046ae <TIM_ITRx_SetConfig>
      break;
 80043ea:	e02c      	b.n	8004446 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	6859      	ldr	r1, [r3, #4]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	461a      	mov	r2, r3
 80043fa:	f000 f928 	bl	800464e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2160      	movs	r1, #96	; 0x60
 8004404:	4618      	mov	r0, r3
 8004406:	f000 f952 	bl	80046ae <TIM_ITRx_SetConfig>
      break;
 800440a:	e01c      	b.n	8004446 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6818      	ldr	r0, [r3, #0]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	6859      	ldr	r1, [r3, #4]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	461a      	mov	r2, r3
 800441a:	f000 f8e9 	bl	80045f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2140      	movs	r1, #64	; 0x40
 8004424:	4618      	mov	r0, r3
 8004426:	f000 f942 	bl	80046ae <TIM_ITRx_SetConfig>
      break;
 800442a:	e00c      	b.n	8004446 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4619      	mov	r1, r3
 8004436:	4610      	mov	r0, r2
 8004438:	f000 f939 	bl	80046ae <TIM_ITRx_SetConfig>
      break;
 800443c:	e003      	b.n	8004446 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
      break;
 8004442:	e000      	b.n	8004446 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004444:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004456:	7bfb      	ldrb	r3, [r7, #15]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a40      	ldr	r2, [pc, #256]	; (80045c4 <TIM_Base_SetConfig+0x114>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d013      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ce:	d00f      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a3d      	ldr	r2, [pc, #244]	; (80045c8 <TIM_Base_SetConfig+0x118>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00b      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a3c      	ldr	r2, [pc, #240]	; (80045cc <TIM_Base_SetConfig+0x11c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d007      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a3b      	ldr	r2, [pc, #236]	; (80045d0 <TIM_Base_SetConfig+0x120>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d003      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a3a      	ldr	r2, [pc, #232]	; (80045d4 <TIM_Base_SetConfig+0x124>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d108      	bne.n	8004502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2f      	ldr	r2, [pc, #188]	; (80045c4 <TIM_Base_SetConfig+0x114>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d02b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004510:	d027      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2c      	ldr	r2, [pc, #176]	; (80045c8 <TIM_Base_SetConfig+0x118>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d023      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a2b      	ldr	r2, [pc, #172]	; (80045cc <TIM_Base_SetConfig+0x11c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01f      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a2a      	ldr	r2, [pc, #168]	; (80045d0 <TIM_Base_SetConfig+0x120>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d01b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a29      	ldr	r2, [pc, #164]	; (80045d4 <TIM_Base_SetConfig+0x124>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d017      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a28      	ldr	r2, [pc, #160]	; (80045d8 <TIM_Base_SetConfig+0x128>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d013      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a27      	ldr	r2, [pc, #156]	; (80045dc <TIM_Base_SetConfig+0x12c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00f      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a26      	ldr	r2, [pc, #152]	; (80045e0 <TIM_Base_SetConfig+0x130>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a25      	ldr	r2, [pc, #148]	; (80045e4 <TIM_Base_SetConfig+0x134>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d007      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a24      	ldr	r2, [pc, #144]	; (80045e8 <TIM_Base_SetConfig+0x138>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d003      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a23      	ldr	r2, [pc, #140]	; (80045ec <TIM_Base_SetConfig+0x13c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d108      	bne.n	8004574 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a0a      	ldr	r2, [pc, #40]	; (80045c4 <TIM_Base_SetConfig+0x114>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d003      	beq.n	80045a8 <TIM_Base_SetConfig+0xf8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a0c      	ldr	r2, [pc, #48]	; (80045d4 <TIM_Base_SetConfig+0x124>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d103      	bne.n	80045b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	615a      	str	r2, [r3, #20]
}
 80045b6:	bf00      	nop
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800
 80045d0:	40000c00 	.word	0x40000c00
 80045d4:	40010400 	.word	0x40010400
 80045d8:	40014000 	.word	0x40014000
 80045dc:	40014400 	.word	0x40014400
 80045e0:	40014800 	.word	0x40014800
 80045e4:	40001800 	.word	0x40001800
 80045e8:	40001c00 	.word	0x40001c00
 80045ec:	40002000 	.word	0x40002000

080045f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f023 0201 	bic.w	r2, r3, #1
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800461a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4313      	orrs	r3, r2
 8004624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f023 030a 	bic.w	r3, r3, #10
 800462c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4313      	orrs	r3, r2
 8004634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	621a      	str	r2, [r3, #32]
}
 8004642:	bf00      	nop
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800464e:	b480      	push	{r7}
 8004650:	b087      	sub	sp, #28
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f023 0210 	bic.w	r2, r3, #16
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004678:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	031b      	lsls	r3, r3, #12
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	4313      	orrs	r3, r2
 8004682:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800468a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	621a      	str	r2, [r3, #32]
}
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b085      	sub	sp, #20
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f043 0307 	orr.w	r3, r3, #7
 80046d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	609a      	str	r2, [r3, #8]
}
 80046d8:	bf00      	nop
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	021a      	lsls	r2, r3, #8
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	431a      	orrs	r2, r3
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4313      	orrs	r3, r2
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	609a      	str	r2, [r3, #8]
}
 8004718:	bf00      	nop
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004738:	2302      	movs	r3, #2
 800473a:	e05a      	b.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004762:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	4313      	orrs	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a21      	ldr	r2, [pc, #132]	; (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d022      	beq.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004788:	d01d      	beq.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a1d      	ldr	r2, [pc, #116]	; (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d018      	beq.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a1b      	ldr	r2, [pc, #108]	; (8004808 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d013      	beq.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a1a      	ldr	r2, [pc, #104]	; (800480c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00e      	beq.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a18      	ldr	r2, [pc, #96]	; (8004810 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d009      	beq.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a17      	ldr	r2, [pc, #92]	; (8004814 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d004      	beq.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a15      	ldr	r2, [pc, #84]	; (8004818 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d10c      	bne.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40010000 	.word	0x40010000
 8004804:	40000400 	.word	0x40000400
 8004808:	40000800 	.word	0x40000800
 800480c:	40000c00 	.word	0x40000c00
 8004810:	40010400 	.word	0x40010400
 8004814:	40014000 	.word	0x40014000
 8004818:	40001800 	.word	0x40001800

0800481c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <__errno>:
 8004844:	4b01      	ldr	r3, [pc, #4]	; (800484c <__errno+0x8>)
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	20000010 	.word	0x20000010

08004850 <__libc_init_array>:
 8004850:	b570      	push	{r4, r5, r6, lr}
 8004852:	4d0d      	ldr	r5, [pc, #52]	; (8004888 <__libc_init_array+0x38>)
 8004854:	4c0d      	ldr	r4, [pc, #52]	; (800488c <__libc_init_array+0x3c>)
 8004856:	1b64      	subs	r4, r4, r5
 8004858:	10a4      	asrs	r4, r4, #2
 800485a:	2600      	movs	r6, #0
 800485c:	42a6      	cmp	r6, r4
 800485e:	d109      	bne.n	8004874 <__libc_init_array+0x24>
 8004860:	4d0b      	ldr	r5, [pc, #44]	; (8004890 <__libc_init_array+0x40>)
 8004862:	4c0c      	ldr	r4, [pc, #48]	; (8004894 <__libc_init_array+0x44>)
 8004864:	f001 f948 	bl	8005af8 <_init>
 8004868:	1b64      	subs	r4, r4, r5
 800486a:	10a4      	asrs	r4, r4, #2
 800486c:	2600      	movs	r6, #0
 800486e:	42a6      	cmp	r6, r4
 8004870:	d105      	bne.n	800487e <__libc_init_array+0x2e>
 8004872:	bd70      	pop	{r4, r5, r6, pc}
 8004874:	f855 3b04 	ldr.w	r3, [r5], #4
 8004878:	4798      	blx	r3
 800487a:	3601      	adds	r6, #1
 800487c:	e7ee      	b.n	800485c <__libc_init_array+0xc>
 800487e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004882:	4798      	blx	r3
 8004884:	3601      	adds	r6, #1
 8004886:	e7f2      	b.n	800486e <__libc_init_array+0x1e>
 8004888:	08005c38 	.word	0x08005c38
 800488c:	08005c38 	.word	0x08005c38
 8004890:	08005c38 	.word	0x08005c38
 8004894:	08005c3c 	.word	0x08005c3c

08004898 <memset>:
 8004898:	4402      	add	r2, r0
 800489a:	4603      	mov	r3, r0
 800489c:	4293      	cmp	r3, r2
 800489e:	d100      	bne.n	80048a2 <memset+0xa>
 80048a0:	4770      	bx	lr
 80048a2:	f803 1b01 	strb.w	r1, [r3], #1
 80048a6:	e7f9      	b.n	800489c <memset+0x4>

080048a8 <iprintf>:
 80048a8:	b40f      	push	{r0, r1, r2, r3}
 80048aa:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <iprintf+0x2c>)
 80048ac:	b513      	push	{r0, r1, r4, lr}
 80048ae:	681c      	ldr	r4, [r3, #0]
 80048b0:	b124      	cbz	r4, 80048bc <iprintf+0x14>
 80048b2:	69a3      	ldr	r3, [r4, #24]
 80048b4:	b913      	cbnz	r3, 80048bc <iprintf+0x14>
 80048b6:	4620      	mov	r0, r4
 80048b8:	f000 f886 	bl	80049c8 <__sinit>
 80048bc:	ab05      	add	r3, sp, #20
 80048be:	9a04      	ldr	r2, [sp, #16]
 80048c0:	68a1      	ldr	r1, [r4, #8]
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	4620      	mov	r0, r4
 80048c6:	f000 faff 	bl	8004ec8 <_vfiprintf_r>
 80048ca:	b002      	add	sp, #8
 80048cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048d0:	b004      	add	sp, #16
 80048d2:	4770      	bx	lr
 80048d4:	20000010 	.word	0x20000010

080048d8 <siprintf>:
 80048d8:	b40e      	push	{r1, r2, r3}
 80048da:	b500      	push	{lr}
 80048dc:	b09c      	sub	sp, #112	; 0x70
 80048de:	ab1d      	add	r3, sp, #116	; 0x74
 80048e0:	9002      	str	r0, [sp, #8]
 80048e2:	9006      	str	r0, [sp, #24]
 80048e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048e8:	4809      	ldr	r0, [pc, #36]	; (8004910 <siprintf+0x38>)
 80048ea:	9107      	str	r1, [sp, #28]
 80048ec:	9104      	str	r1, [sp, #16]
 80048ee:	4909      	ldr	r1, [pc, #36]	; (8004914 <siprintf+0x3c>)
 80048f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80048f4:	9105      	str	r1, [sp, #20]
 80048f6:	6800      	ldr	r0, [r0, #0]
 80048f8:	9301      	str	r3, [sp, #4]
 80048fa:	a902      	add	r1, sp, #8
 80048fc:	f000 f9ba 	bl	8004c74 <_svfiprintf_r>
 8004900:	9b02      	ldr	r3, [sp, #8]
 8004902:	2200      	movs	r2, #0
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	b01c      	add	sp, #112	; 0x70
 8004908:	f85d eb04 	ldr.w	lr, [sp], #4
 800490c:	b003      	add	sp, #12
 800490e:	4770      	bx	lr
 8004910:	20000010 	.word	0x20000010
 8004914:	ffff0208 	.word	0xffff0208

08004918 <std>:
 8004918:	2300      	movs	r3, #0
 800491a:	b510      	push	{r4, lr}
 800491c:	4604      	mov	r4, r0
 800491e:	e9c0 3300 	strd	r3, r3, [r0]
 8004922:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004926:	6083      	str	r3, [r0, #8]
 8004928:	8181      	strh	r1, [r0, #12]
 800492a:	6643      	str	r3, [r0, #100]	; 0x64
 800492c:	81c2      	strh	r2, [r0, #14]
 800492e:	6183      	str	r3, [r0, #24]
 8004930:	4619      	mov	r1, r3
 8004932:	2208      	movs	r2, #8
 8004934:	305c      	adds	r0, #92	; 0x5c
 8004936:	f7ff ffaf 	bl	8004898 <memset>
 800493a:	4b05      	ldr	r3, [pc, #20]	; (8004950 <std+0x38>)
 800493c:	6263      	str	r3, [r4, #36]	; 0x24
 800493e:	4b05      	ldr	r3, [pc, #20]	; (8004954 <std+0x3c>)
 8004940:	62a3      	str	r3, [r4, #40]	; 0x28
 8004942:	4b05      	ldr	r3, [pc, #20]	; (8004958 <std+0x40>)
 8004944:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004946:	4b05      	ldr	r3, [pc, #20]	; (800495c <std+0x44>)
 8004948:	6224      	str	r4, [r4, #32]
 800494a:	6323      	str	r3, [r4, #48]	; 0x30
 800494c:	bd10      	pop	{r4, pc}
 800494e:	bf00      	nop
 8004950:	08005471 	.word	0x08005471
 8004954:	08005493 	.word	0x08005493
 8004958:	080054cb 	.word	0x080054cb
 800495c:	080054ef 	.word	0x080054ef

08004960 <_cleanup_r>:
 8004960:	4901      	ldr	r1, [pc, #4]	; (8004968 <_cleanup_r+0x8>)
 8004962:	f000 b8af 	b.w	8004ac4 <_fwalk_reent>
 8004966:	bf00      	nop
 8004968:	080057c9 	.word	0x080057c9

0800496c <__sfmoreglue>:
 800496c:	b570      	push	{r4, r5, r6, lr}
 800496e:	1e4a      	subs	r2, r1, #1
 8004970:	2568      	movs	r5, #104	; 0x68
 8004972:	4355      	muls	r5, r2
 8004974:	460e      	mov	r6, r1
 8004976:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800497a:	f000 f8c5 	bl	8004b08 <_malloc_r>
 800497e:	4604      	mov	r4, r0
 8004980:	b140      	cbz	r0, 8004994 <__sfmoreglue+0x28>
 8004982:	2100      	movs	r1, #0
 8004984:	e9c0 1600 	strd	r1, r6, [r0]
 8004988:	300c      	adds	r0, #12
 800498a:	60a0      	str	r0, [r4, #8]
 800498c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004990:	f7ff ff82 	bl	8004898 <memset>
 8004994:	4620      	mov	r0, r4
 8004996:	bd70      	pop	{r4, r5, r6, pc}

08004998 <__sfp_lock_acquire>:
 8004998:	4801      	ldr	r0, [pc, #4]	; (80049a0 <__sfp_lock_acquire+0x8>)
 800499a:	f000 b8b3 	b.w	8004b04 <__retarget_lock_acquire_recursive>
 800499e:	bf00      	nop
 80049a0:	200002e8 	.word	0x200002e8

080049a4 <__sfp_lock_release>:
 80049a4:	4801      	ldr	r0, [pc, #4]	; (80049ac <__sfp_lock_release+0x8>)
 80049a6:	f000 b8ae 	b.w	8004b06 <__retarget_lock_release_recursive>
 80049aa:	bf00      	nop
 80049ac:	200002e8 	.word	0x200002e8

080049b0 <__sinit_lock_acquire>:
 80049b0:	4801      	ldr	r0, [pc, #4]	; (80049b8 <__sinit_lock_acquire+0x8>)
 80049b2:	f000 b8a7 	b.w	8004b04 <__retarget_lock_acquire_recursive>
 80049b6:	bf00      	nop
 80049b8:	200002e3 	.word	0x200002e3

080049bc <__sinit_lock_release>:
 80049bc:	4801      	ldr	r0, [pc, #4]	; (80049c4 <__sinit_lock_release+0x8>)
 80049be:	f000 b8a2 	b.w	8004b06 <__retarget_lock_release_recursive>
 80049c2:	bf00      	nop
 80049c4:	200002e3 	.word	0x200002e3

080049c8 <__sinit>:
 80049c8:	b510      	push	{r4, lr}
 80049ca:	4604      	mov	r4, r0
 80049cc:	f7ff fff0 	bl	80049b0 <__sinit_lock_acquire>
 80049d0:	69a3      	ldr	r3, [r4, #24]
 80049d2:	b11b      	cbz	r3, 80049dc <__sinit+0x14>
 80049d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049d8:	f7ff bff0 	b.w	80049bc <__sinit_lock_release>
 80049dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80049e0:	6523      	str	r3, [r4, #80]	; 0x50
 80049e2:	4b13      	ldr	r3, [pc, #76]	; (8004a30 <__sinit+0x68>)
 80049e4:	4a13      	ldr	r2, [pc, #76]	; (8004a34 <__sinit+0x6c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80049ea:	42a3      	cmp	r3, r4
 80049ec:	bf04      	itt	eq
 80049ee:	2301      	moveq	r3, #1
 80049f0:	61a3      	streq	r3, [r4, #24]
 80049f2:	4620      	mov	r0, r4
 80049f4:	f000 f820 	bl	8004a38 <__sfp>
 80049f8:	6060      	str	r0, [r4, #4]
 80049fa:	4620      	mov	r0, r4
 80049fc:	f000 f81c 	bl	8004a38 <__sfp>
 8004a00:	60a0      	str	r0, [r4, #8]
 8004a02:	4620      	mov	r0, r4
 8004a04:	f000 f818 	bl	8004a38 <__sfp>
 8004a08:	2200      	movs	r2, #0
 8004a0a:	60e0      	str	r0, [r4, #12]
 8004a0c:	2104      	movs	r1, #4
 8004a0e:	6860      	ldr	r0, [r4, #4]
 8004a10:	f7ff ff82 	bl	8004918 <std>
 8004a14:	68a0      	ldr	r0, [r4, #8]
 8004a16:	2201      	movs	r2, #1
 8004a18:	2109      	movs	r1, #9
 8004a1a:	f7ff ff7d 	bl	8004918 <std>
 8004a1e:	68e0      	ldr	r0, [r4, #12]
 8004a20:	2202      	movs	r2, #2
 8004a22:	2112      	movs	r1, #18
 8004a24:	f7ff ff78 	bl	8004918 <std>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	61a3      	str	r3, [r4, #24]
 8004a2c:	e7d2      	b.n	80049d4 <__sinit+0xc>
 8004a2e:	bf00      	nop
 8004a30:	08005b98 	.word	0x08005b98
 8004a34:	08004961 	.word	0x08004961

08004a38 <__sfp>:
 8004a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3a:	4607      	mov	r7, r0
 8004a3c:	f7ff ffac 	bl	8004998 <__sfp_lock_acquire>
 8004a40:	4b1e      	ldr	r3, [pc, #120]	; (8004abc <__sfp+0x84>)
 8004a42:	681e      	ldr	r6, [r3, #0]
 8004a44:	69b3      	ldr	r3, [r6, #24]
 8004a46:	b913      	cbnz	r3, 8004a4e <__sfp+0x16>
 8004a48:	4630      	mov	r0, r6
 8004a4a:	f7ff ffbd 	bl	80049c8 <__sinit>
 8004a4e:	3648      	adds	r6, #72	; 0x48
 8004a50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	d503      	bpl.n	8004a60 <__sfp+0x28>
 8004a58:	6833      	ldr	r3, [r6, #0]
 8004a5a:	b30b      	cbz	r3, 8004aa0 <__sfp+0x68>
 8004a5c:	6836      	ldr	r6, [r6, #0]
 8004a5e:	e7f7      	b.n	8004a50 <__sfp+0x18>
 8004a60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a64:	b9d5      	cbnz	r5, 8004a9c <__sfp+0x64>
 8004a66:	4b16      	ldr	r3, [pc, #88]	; (8004ac0 <__sfp+0x88>)
 8004a68:	60e3      	str	r3, [r4, #12]
 8004a6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a6e:	6665      	str	r5, [r4, #100]	; 0x64
 8004a70:	f000 f847 	bl	8004b02 <__retarget_lock_init_recursive>
 8004a74:	f7ff ff96 	bl	80049a4 <__sfp_lock_release>
 8004a78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a80:	6025      	str	r5, [r4, #0]
 8004a82:	61a5      	str	r5, [r4, #24]
 8004a84:	2208      	movs	r2, #8
 8004a86:	4629      	mov	r1, r5
 8004a88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a8c:	f7ff ff04 	bl	8004898 <memset>
 8004a90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a98:	4620      	mov	r0, r4
 8004a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a9c:	3468      	adds	r4, #104	; 0x68
 8004a9e:	e7d9      	b.n	8004a54 <__sfp+0x1c>
 8004aa0:	2104      	movs	r1, #4
 8004aa2:	4638      	mov	r0, r7
 8004aa4:	f7ff ff62 	bl	800496c <__sfmoreglue>
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	6030      	str	r0, [r6, #0]
 8004aac:	2800      	cmp	r0, #0
 8004aae:	d1d5      	bne.n	8004a5c <__sfp+0x24>
 8004ab0:	f7ff ff78 	bl	80049a4 <__sfp_lock_release>
 8004ab4:	230c      	movs	r3, #12
 8004ab6:	603b      	str	r3, [r7, #0]
 8004ab8:	e7ee      	b.n	8004a98 <__sfp+0x60>
 8004aba:	bf00      	nop
 8004abc:	08005b98 	.word	0x08005b98
 8004ac0:	ffff0001 	.word	0xffff0001

08004ac4 <_fwalk_reent>:
 8004ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ac8:	4606      	mov	r6, r0
 8004aca:	4688      	mov	r8, r1
 8004acc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ad0:	2700      	movs	r7, #0
 8004ad2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ad6:	f1b9 0901 	subs.w	r9, r9, #1
 8004ada:	d505      	bpl.n	8004ae8 <_fwalk_reent+0x24>
 8004adc:	6824      	ldr	r4, [r4, #0]
 8004ade:	2c00      	cmp	r4, #0
 8004ae0:	d1f7      	bne.n	8004ad2 <_fwalk_reent+0xe>
 8004ae2:	4638      	mov	r0, r7
 8004ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ae8:	89ab      	ldrh	r3, [r5, #12]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d907      	bls.n	8004afe <_fwalk_reent+0x3a>
 8004aee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004af2:	3301      	adds	r3, #1
 8004af4:	d003      	beq.n	8004afe <_fwalk_reent+0x3a>
 8004af6:	4629      	mov	r1, r5
 8004af8:	4630      	mov	r0, r6
 8004afa:	47c0      	blx	r8
 8004afc:	4307      	orrs	r7, r0
 8004afe:	3568      	adds	r5, #104	; 0x68
 8004b00:	e7e9      	b.n	8004ad6 <_fwalk_reent+0x12>

08004b02 <__retarget_lock_init_recursive>:
 8004b02:	4770      	bx	lr

08004b04 <__retarget_lock_acquire_recursive>:
 8004b04:	4770      	bx	lr

08004b06 <__retarget_lock_release_recursive>:
 8004b06:	4770      	bx	lr

08004b08 <_malloc_r>:
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0a:	1ccd      	adds	r5, r1, #3
 8004b0c:	f025 0503 	bic.w	r5, r5, #3
 8004b10:	3508      	adds	r5, #8
 8004b12:	2d0c      	cmp	r5, #12
 8004b14:	bf38      	it	cc
 8004b16:	250c      	movcc	r5, #12
 8004b18:	2d00      	cmp	r5, #0
 8004b1a:	4606      	mov	r6, r0
 8004b1c:	db01      	blt.n	8004b22 <_malloc_r+0x1a>
 8004b1e:	42a9      	cmp	r1, r5
 8004b20:	d903      	bls.n	8004b2a <_malloc_r+0x22>
 8004b22:	230c      	movs	r3, #12
 8004b24:	6033      	str	r3, [r6, #0]
 8004b26:	2000      	movs	r0, #0
 8004b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b2a:	f000 ff27 	bl	800597c <__malloc_lock>
 8004b2e:	4921      	ldr	r1, [pc, #132]	; (8004bb4 <_malloc_r+0xac>)
 8004b30:	680a      	ldr	r2, [r1, #0]
 8004b32:	4614      	mov	r4, r2
 8004b34:	b99c      	cbnz	r4, 8004b5e <_malloc_r+0x56>
 8004b36:	4f20      	ldr	r7, [pc, #128]	; (8004bb8 <_malloc_r+0xb0>)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	b923      	cbnz	r3, 8004b46 <_malloc_r+0x3e>
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	4630      	mov	r0, r6
 8004b40:	f000 fc86 	bl	8005450 <_sbrk_r>
 8004b44:	6038      	str	r0, [r7, #0]
 8004b46:	4629      	mov	r1, r5
 8004b48:	4630      	mov	r0, r6
 8004b4a:	f000 fc81 	bl	8005450 <_sbrk_r>
 8004b4e:	1c43      	adds	r3, r0, #1
 8004b50:	d123      	bne.n	8004b9a <_malloc_r+0x92>
 8004b52:	230c      	movs	r3, #12
 8004b54:	6033      	str	r3, [r6, #0]
 8004b56:	4630      	mov	r0, r6
 8004b58:	f000 ff16 	bl	8005988 <__malloc_unlock>
 8004b5c:	e7e3      	b.n	8004b26 <_malloc_r+0x1e>
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	1b5b      	subs	r3, r3, r5
 8004b62:	d417      	bmi.n	8004b94 <_malloc_r+0x8c>
 8004b64:	2b0b      	cmp	r3, #11
 8004b66:	d903      	bls.n	8004b70 <_malloc_r+0x68>
 8004b68:	6023      	str	r3, [r4, #0]
 8004b6a:	441c      	add	r4, r3
 8004b6c:	6025      	str	r5, [r4, #0]
 8004b6e:	e004      	b.n	8004b7a <_malloc_r+0x72>
 8004b70:	6863      	ldr	r3, [r4, #4]
 8004b72:	42a2      	cmp	r2, r4
 8004b74:	bf0c      	ite	eq
 8004b76:	600b      	streq	r3, [r1, #0]
 8004b78:	6053      	strne	r3, [r2, #4]
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	f000 ff04 	bl	8005988 <__malloc_unlock>
 8004b80:	f104 000b 	add.w	r0, r4, #11
 8004b84:	1d23      	adds	r3, r4, #4
 8004b86:	f020 0007 	bic.w	r0, r0, #7
 8004b8a:	1ac2      	subs	r2, r0, r3
 8004b8c:	d0cc      	beq.n	8004b28 <_malloc_r+0x20>
 8004b8e:	1a1b      	subs	r3, r3, r0
 8004b90:	50a3      	str	r3, [r4, r2]
 8004b92:	e7c9      	b.n	8004b28 <_malloc_r+0x20>
 8004b94:	4622      	mov	r2, r4
 8004b96:	6864      	ldr	r4, [r4, #4]
 8004b98:	e7cc      	b.n	8004b34 <_malloc_r+0x2c>
 8004b9a:	1cc4      	adds	r4, r0, #3
 8004b9c:	f024 0403 	bic.w	r4, r4, #3
 8004ba0:	42a0      	cmp	r0, r4
 8004ba2:	d0e3      	beq.n	8004b6c <_malloc_r+0x64>
 8004ba4:	1a21      	subs	r1, r4, r0
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	f000 fc52 	bl	8005450 <_sbrk_r>
 8004bac:	3001      	adds	r0, #1
 8004bae:	d1dd      	bne.n	8004b6c <_malloc_r+0x64>
 8004bb0:	e7cf      	b.n	8004b52 <_malloc_r+0x4a>
 8004bb2:	bf00      	nop
 8004bb4:	200000c4 	.word	0x200000c4
 8004bb8:	200000c8 	.word	0x200000c8

08004bbc <__ssputs_r>:
 8004bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc0:	688e      	ldr	r6, [r1, #8]
 8004bc2:	429e      	cmp	r6, r3
 8004bc4:	4682      	mov	sl, r0
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	4690      	mov	r8, r2
 8004bca:	461f      	mov	r7, r3
 8004bcc:	d838      	bhi.n	8004c40 <__ssputs_r+0x84>
 8004bce:	898a      	ldrh	r2, [r1, #12]
 8004bd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bd4:	d032      	beq.n	8004c3c <__ssputs_r+0x80>
 8004bd6:	6825      	ldr	r5, [r4, #0]
 8004bd8:	6909      	ldr	r1, [r1, #16]
 8004bda:	eba5 0901 	sub.w	r9, r5, r1
 8004bde:	6965      	ldr	r5, [r4, #20]
 8004be0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004be4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004be8:	3301      	adds	r3, #1
 8004bea:	444b      	add	r3, r9
 8004bec:	106d      	asrs	r5, r5, #1
 8004bee:	429d      	cmp	r5, r3
 8004bf0:	bf38      	it	cc
 8004bf2:	461d      	movcc	r5, r3
 8004bf4:	0553      	lsls	r3, r2, #21
 8004bf6:	d531      	bpl.n	8004c5c <__ssputs_r+0xa0>
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	f7ff ff85 	bl	8004b08 <_malloc_r>
 8004bfe:	4606      	mov	r6, r0
 8004c00:	b950      	cbnz	r0, 8004c18 <__ssputs_r+0x5c>
 8004c02:	230c      	movs	r3, #12
 8004c04:	f8ca 3000 	str.w	r3, [sl]
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c0e:	81a3      	strh	r3, [r4, #12]
 8004c10:	f04f 30ff 	mov.w	r0, #4294967295
 8004c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c18:	6921      	ldr	r1, [r4, #16]
 8004c1a:	464a      	mov	r2, r9
 8004c1c:	f000 fe86 	bl	800592c <memcpy>
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c2a:	81a3      	strh	r3, [r4, #12]
 8004c2c:	6126      	str	r6, [r4, #16]
 8004c2e:	6165      	str	r5, [r4, #20]
 8004c30:	444e      	add	r6, r9
 8004c32:	eba5 0509 	sub.w	r5, r5, r9
 8004c36:	6026      	str	r6, [r4, #0]
 8004c38:	60a5      	str	r5, [r4, #8]
 8004c3a:	463e      	mov	r6, r7
 8004c3c:	42be      	cmp	r6, r7
 8004c3e:	d900      	bls.n	8004c42 <__ssputs_r+0x86>
 8004c40:	463e      	mov	r6, r7
 8004c42:	4632      	mov	r2, r6
 8004c44:	6820      	ldr	r0, [r4, #0]
 8004c46:	4641      	mov	r1, r8
 8004c48:	f000 fe7e 	bl	8005948 <memmove>
 8004c4c:	68a3      	ldr	r3, [r4, #8]
 8004c4e:	6822      	ldr	r2, [r4, #0]
 8004c50:	1b9b      	subs	r3, r3, r6
 8004c52:	4432      	add	r2, r6
 8004c54:	60a3      	str	r3, [r4, #8]
 8004c56:	6022      	str	r2, [r4, #0]
 8004c58:	2000      	movs	r0, #0
 8004c5a:	e7db      	b.n	8004c14 <__ssputs_r+0x58>
 8004c5c:	462a      	mov	r2, r5
 8004c5e:	f000 fee9 	bl	8005a34 <_realloc_r>
 8004c62:	4606      	mov	r6, r0
 8004c64:	2800      	cmp	r0, #0
 8004c66:	d1e1      	bne.n	8004c2c <__ssputs_r+0x70>
 8004c68:	6921      	ldr	r1, [r4, #16]
 8004c6a:	4650      	mov	r0, sl
 8004c6c:	f000 fe92 	bl	8005994 <_free_r>
 8004c70:	e7c7      	b.n	8004c02 <__ssputs_r+0x46>
	...

08004c74 <_svfiprintf_r>:
 8004c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c78:	4698      	mov	r8, r3
 8004c7a:	898b      	ldrh	r3, [r1, #12]
 8004c7c:	061b      	lsls	r3, r3, #24
 8004c7e:	b09d      	sub	sp, #116	; 0x74
 8004c80:	4607      	mov	r7, r0
 8004c82:	460d      	mov	r5, r1
 8004c84:	4614      	mov	r4, r2
 8004c86:	d50e      	bpl.n	8004ca6 <_svfiprintf_r+0x32>
 8004c88:	690b      	ldr	r3, [r1, #16]
 8004c8a:	b963      	cbnz	r3, 8004ca6 <_svfiprintf_r+0x32>
 8004c8c:	2140      	movs	r1, #64	; 0x40
 8004c8e:	f7ff ff3b 	bl	8004b08 <_malloc_r>
 8004c92:	6028      	str	r0, [r5, #0]
 8004c94:	6128      	str	r0, [r5, #16]
 8004c96:	b920      	cbnz	r0, 8004ca2 <_svfiprintf_r+0x2e>
 8004c98:	230c      	movs	r3, #12
 8004c9a:	603b      	str	r3, [r7, #0]
 8004c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca0:	e0d1      	b.n	8004e46 <_svfiprintf_r+0x1d2>
 8004ca2:	2340      	movs	r3, #64	; 0x40
 8004ca4:	616b      	str	r3, [r5, #20]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8004caa:	2320      	movs	r3, #32
 8004cac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cb4:	2330      	movs	r3, #48	; 0x30
 8004cb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004e60 <_svfiprintf_r+0x1ec>
 8004cba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cbe:	f04f 0901 	mov.w	r9, #1
 8004cc2:	4623      	mov	r3, r4
 8004cc4:	469a      	mov	sl, r3
 8004cc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cca:	b10a      	cbz	r2, 8004cd0 <_svfiprintf_r+0x5c>
 8004ccc:	2a25      	cmp	r2, #37	; 0x25
 8004cce:	d1f9      	bne.n	8004cc4 <_svfiprintf_r+0x50>
 8004cd0:	ebba 0b04 	subs.w	fp, sl, r4
 8004cd4:	d00b      	beq.n	8004cee <_svfiprintf_r+0x7a>
 8004cd6:	465b      	mov	r3, fp
 8004cd8:	4622      	mov	r2, r4
 8004cda:	4629      	mov	r1, r5
 8004cdc:	4638      	mov	r0, r7
 8004cde:	f7ff ff6d 	bl	8004bbc <__ssputs_r>
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	f000 80aa 	beq.w	8004e3c <_svfiprintf_r+0x1c8>
 8004ce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cea:	445a      	add	r2, fp
 8004cec:	9209      	str	r2, [sp, #36]	; 0x24
 8004cee:	f89a 3000 	ldrb.w	r3, [sl]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 80a2 	beq.w	8004e3c <_svfiprintf_r+0x1c8>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d02:	f10a 0a01 	add.w	sl, sl, #1
 8004d06:	9304      	str	r3, [sp, #16]
 8004d08:	9307      	str	r3, [sp, #28]
 8004d0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d0e:	931a      	str	r3, [sp, #104]	; 0x68
 8004d10:	4654      	mov	r4, sl
 8004d12:	2205      	movs	r2, #5
 8004d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d18:	4851      	ldr	r0, [pc, #324]	; (8004e60 <_svfiprintf_r+0x1ec>)
 8004d1a:	f7fb fa59 	bl	80001d0 <memchr>
 8004d1e:	9a04      	ldr	r2, [sp, #16]
 8004d20:	b9d8      	cbnz	r0, 8004d5a <_svfiprintf_r+0xe6>
 8004d22:	06d0      	lsls	r0, r2, #27
 8004d24:	bf44      	itt	mi
 8004d26:	2320      	movmi	r3, #32
 8004d28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d2c:	0711      	lsls	r1, r2, #28
 8004d2e:	bf44      	itt	mi
 8004d30:	232b      	movmi	r3, #43	; 0x2b
 8004d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d36:	f89a 3000 	ldrb.w	r3, [sl]
 8004d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d3c:	d015      	beq.n	8004d6a <_svfiprintf_r+0xf6>
 8004d3e:	9a07      	ldr	r2, [sp, #28]
 8004d40:	4654      	mov	r4, sl
 8004d42:	2000      	movs	r0, #0
 8004d44:	f04f 0c0a 	mov.w	ip, #10
 8004d48:	4621      	mov	r1, r4
 8004d4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d4e:	3b30      	subs	r3, #48	; 0x30
 8004d50:	2b09      	cmp	r3, #9
 8004d52:	d94e      	bls.n	8004df2 <_svfiprintf_r+0x17e>
 8004d54:	b1b0      	cbz	r0, 8004d84 <_svfiprintf_r+0x110>
 8004d56:	9207      	str	r2, [sp, #28]
 8004d58:	e014      	b.n	8004d84 <_svfiprintf_r+0x110>
 8004d5a:	eba0 0308 	sub.w	r3, r0, r8
 8004d5e:	fa09 f303 	lsl.w	r3, r9, r3
 8004d62:	4313      	orrs	r3, r2
 8004d64:	9304      	str	r3, [sp, #16]
 8004d66:	46a2      	mov	sl, r4
 8004d68:	e7d2      	b.n	8004d10 <_svfiprintf_r+0x9c>
 8004d6a:	9b03      	ldr	r3, [sp, #12]
 8004d6c:	1d19      	adds	r1, r3, #4
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	9103      	str	r1, [sp, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	bfbb      	ittet	lt
 8004d76:	425b      	neglt	r3, r3
 8004d78:	f042 0202 	orrlt.w	r2, r2, #2
 8004d7c:	9307      	strge	r3, [sp, #28]
 8004d7e:	9307      	strlt	r3, [sp, #28]
 8004d80:	bfb8      	it	lt
 8004d82:	9204      	strlt	r2, [sp, #16]
 8004d84:	7823      	ldrb	r3, [r4, #0]
 8004d86:	2b2e      	cmp	r3, #46	; 0x2e
 8004d88:	d10c      	bne.n	8004da4 <_svfiprintf_r+0x130>
 8004d8a:	7863      	ldrb	r3, [r4, #1]
 8004d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d8e:	d135      	bne.n	8004dfc <_svfiprintf_r+0x188>
 8004d90:	9b03      	ldr	r3, [sp, #12]
 8004d92:	1d1a      	adds	r2, r3, #4
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	9203      	str	r2, [sp, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	bfb8      	it	lt
 8004d9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004da0:	3402      	adds	r4, #2
 8004da2:	9305      	str	r3, [sp, #20]
 8004da4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e70 <_svfiprintf_r+0x1fc>
 8004da8:	7821      	ldrb	r1, [r4, #0]
 8004daa:	2203      	movs	r2, #3
 8004dac:	4650      	mov	r0, sl
 8004dae:	f7fb fa0f 	bl	80001d0 <memchr>
 8004db2:	b140      	cbz	r0, 8004dc6 <_svfiprintf_r+0x152>
 8004db4:	2340      	movs	r3, #64	; 0x40
 8004db6:	eba0 000a 	sub.w	r0, r0, sl
 8004dba:	fa03 f000 	lsl.w	r0, r3, r0
 8004dbe:	9b04      	ldr	r3, [sp, #16]
 8004dc0:	4303      	orrs	r3, r0
 8004dc2:	3401      	adds	r4, #1
 8004dc4:	9304      	str	r3, [sp, #16]
 8004dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dca:	4826      	ldr	r0, [pc, #152]	; (8004e64 <_svfiprintf_r+0x1f0>)
 8004dcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dd0:	2206      	movs	r2, #6
 8004dd2:	f7fb f9fd 	bl	80001d0 <memchr>
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	d038      	beq.n	8004e4c <_svfiprintf_r+0x1d8>
 8004dda:	4b23      	ldr	r3, [pc, #140]	; (8004e68 <_svfiprintf_r+0x1f4>)
 8004ddc:	bb1b      	cbnz	r3, 8004e26 <_svfiprintf_r+0x1b2>
 8004dde:	9b03      	ldr	r3, [sp, #12]
 8004de0:	3307      	adds	r3, #7
 8004de2:	f023 0307 	bic.w	r3, r3, #7
 8004de6:	3308      	adds	r3, #8
 8004de8:	9303      	str	r3, [sp, #12]
 8004dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dec:	4433      	add	r3, r6
 8004dee:	9309      	str	r3, [sp, #36]	; 0x24
 8004df0:	e767      	b.n	8004cc2 <_svfiprintf_r+0x4e>
 8004df2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004df6:	460c      	mov	r4, r1
 8004df8:	2001      	movs	r0, #1
 8004dfa:	e7a5      	b.n	8004d48 <_svfiprintf_r+0xd4>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	3401      	adds	r4, #1
 8004e00:	9305      	str	r3, [sp, #20]
 8004e02:	4619      	mov	r1, r3
 8004e04:	f04f 0c0a 	mov.w	ip, #10
 8004e08:	4620      	mov	r0, r4
 8004e0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e0e:	3a30      	subs	r2, #48	; 0x30
 8004e10:	2a09      	cmp	r2, #9
 8004e12:	d903      	bls.n	8004e1c <_svfiprintf_r+0x1a8>
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0c5      	beq.n	8004da4 <_svfiprintf_r+0x130>
 8004e18:	9105      	str	r1, [sp, #20]
 8004e1a:	e7c3      	b.n	8004da4 <_svfiprintf_r+0x130>
 8004e1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e20:	4604      	mov	r4, r0
 8004e22:	2301      	movs	r3, #1
 8004e24:	e7f0      	b.n	8004e08 <_svfiprintf_r+0x194>
 8004e26:	ab03      	add	r3, sp, #12
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	462a      	mov	r2, r5
 8004e2c:	4b0f      	ldr	r3, [pc, #60]	; (8004e6c <_svfiprintf_r+0x1f8>)
 8004e2e:	a904      	add	r1, sp, #16
 8004e30:	4638      	mov	r0, r7
 8004e32:	f3af 8000 	nop.w
 8004e36:	1c42      	adds	r2, r0, #1
 8004e38:	4606      	mov	r6, r0
 8004e3a:	d1d6      	bne.n	8004dea <_svfiprintf_r+0x176>
 8004e3c:	89ab      	ldrh	r3, [r5, #12]
 8004e3e:	065b      	lsls	r3, r3, #25
 8004e40:	f53f af2c 	bmi.w	8004c9c <_svfiprintf_r+0x28>
 8004e44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e46:	b01d      	add	sp, #116	; 0x74
 8004e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4c:	ab03      	add	r3, sp, #12
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	462a      	mov	r2, r5
 8004e52:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <_svfiprintf_r+0x1f8>)
 8004e54:	a904      	add	r1, sp, #16
 8004e56:	4638      	mov	r0, r7
 8004e58:	f000 f9d4 	bl	8005204 <_printf_i>
 8004e5c:	e7eb      	b.n	8004e36 <_svfiprintf_r+0x1c2>
 8004e5e:	bf00      	nop
 8004e60:	08005bfc 	.word	0x08005bfc
 8004e64:	08005c06 	.word	0x08005c06
 8004e68:	00000000 	.word	0x00000000
 8004e6c:	08004bbd 	.word	0x08004bbd
 8004e70:	08005c02 	.word	0x08005c02

08004e74 <__sfputc_r>:
 8004e74:	6893      	ldr	r3, [r2, #8]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	b410      	push	{r4}
 8004e7c:	6093      	str	r3, [r2, #8]
 8004e7e:	da08      	bge.n	8004e92 <__sfputc_r+0x1e>
 8004e80:	6994      	ldr	r4, [r2, #24]
 8004e82:	42a3      	cmp	r3, r4
 8004e84:	db01      	blt.n	8004e8a <__sfputc_r+0x16>
 8004e86:	290a      	cmp	r1, #10
 8004e88:	d103      	bne.n	8004e92 <__sfputc_r+0x1e>
 8004e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e8e:	f000 bb33 	b.w	80054f8 <__swbuf_r>
 8004e92:	6813      	ldr	r3, [r2, #0]
 8004e94:	1c58      	adds	r0, r3, #1
 8004e96:	6010      	str	r0, [r2, #0]
 8004e98:	7019      	strb	r1, [r3, #0]
 8004e9a:	4608      	mov	r0, r1
 8004e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <__sfputs_r>:
 8004ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea4:	4606      	mov	r6, r0
 8004ea6:	460f      	mov	r7, r1
 8004ea8:	4614      	mov	r4, r2
 8004eaa:	18d5      	adds	r5, r2, r3
 8004eac:	42ac      	cmp	r4, r5
 8004eae:	d101      	bne.n	8004eb4 <__sfputs_r+0x12>
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	e007      	b.n	8004ec4 <__sfputs_r+0x22>
 8004eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eb8:	463a      	mov	r2, r7
 8004eba:	4630      	mov	r0, r6
 8004ebc:	f7ff ffda 	bl	8004e74 <__sfputc_r>
 8004ec0:	1c43      	adds	r3, r0, #1
 8004ec2:	d1f3      	bne.n	8004eac <__sfputs_r+0xa>
 8004ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ec8 <_vfiprintf_r>:
 8004ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ecc:	460d      	mov	r5, r1
 8004ece:	b09d      	sub	sp, #116	; 0x74
 8004ed0:	4614      	mov	r4, r2
 8004ed2:	4698      	mov	r8, r3
 8004ed4:	4606      	mov	r6, r0
 8004ed6:	b118      	cbz	r0, 8004ee0 <_vfiprintf_r+0x18>
 8004ed8:	6983      	ldr	r3, [r0, #24]
 8004eda:	b90b      	cbnz	r3, 8004ee0 <_vfiprintf_r+0x18>
 8004edc:	f7ff fd74 	bl	80049c8 <__sinit>
 8004ee0:	4b89      	ldr	r3, [pc, #548]	; (8005108 <_vfiprintf_r+0x240>)
 8004ee2:	429d      	cmp	r5, r3
 8004ee4:	d11b      	bne.n	8004f1e <_vfiprintf_r+0x56>
 8004ee6:	6875      	ldr	r5, [r6, #4]
 8004ee8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004eea:	07d9      	lsls	r1, r3, #31
 8004eec:	d405      	bmi.n	8004efa <_vfiprintf_r+0x32>
 8004eee:	89ab      	ldrh	r3, [r5, #12]
 8004ef0:	059a      	lsls	r2, r3, #22
 8004ef2:	d402      	bmi.n	8004efa <_vfiprintf_r+0x32>
 8004ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ef6:	f7ff fe05 	bl	8004b04 <__retarget_lock_acquire_recursive>
 8004efa:	89ab      	ldrh	r3, [r5, #12]
 8004efc:	071b      	lsls	r3, r3, #28
 8004efe:	d501      	bpl.n	8004f04 <_vfiprintf_r+0x3c>
 8004f00:	692b      	ldr	r3, [r5, #16]
 8004f02:	b9eb      	cbnz	r3, 8004f40 <_vfiprintf_r+0x78>
 8004f04:	4629      	mov	r1, r5
 8004f06:	4630      	mov	r0, r6
 8004f08:	f000 fb5a 	bl	80055c0 <__swsetup_r>
 8004f0c:	b1c0      	cbz	r0, 8004f40 <_vfiprintf_r+0x78>
 8004f0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f10:	07dc      	lsls	r4, r3, #31
 8004f12:	d50e      	bpl.n	8004f32 <_vfiprintf_r+0x6a>
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295
 8004f18:	b01d      	add	sp, #116	; 0x74
 8004f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1e:	4b7b      	ldr	r3, [pc, #492]	; (800510c <_vfiprintf_r+0x244>)
 8004f20:	429d      	cmp	r5, r3
 8004f22:	d101      	bne.n	8004f28 <_vfiprintf_r+0x60>
 8004f24:	68b5      	ldr	r5, [r6, #8]
 8004f26:	e7df      	b.n	8004ee8 <_vfiprintf_r+0x20>
 8004f28:	4b79      	ldr	r3, [pc, #484]	; (8005110 <_vfiprintf_r+0x248>)
 8004f2a:	429d      	cmp	r5, r3
 8004f2c:	bf08      	it	eq
 8004f2e:	68f5      	ldreq	r5, [r6, #12]
 8004f30:	e7da      	b.n	8004ee8 <_vfiprintf_r+0x20>
 8004f32:	89ab      	ldrh	r3, [r5, #12]
 8004f34:	0598      	lsls	r0, r3, #22
 8004f36:	d4ed      	bmi.n	8004f14 <_vfiprintf_r+0x4c>
 8004f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f3a:	f7ff fde4 	bl	8004b06 <__retarget_lock_release_recursive>
 8004f3e:	e7e9      	b.n	8004f14 <_vfiprintf_r+0x4c>
 8004f40:	2300      	movs	r3, #0
 8004f42:	9309      	str	r3, [sp, #36]	; 0x24
 8004f44:	2320      	movs	r3, #32
 8004f46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f4e:	2330      	movs	r3, #48	; 0x30
 8004f50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005114 <_vfiprintf_r+0x24c>
 8004f54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f58:	f04f 0901 	mov.w	r9, #1
 8004f5c:	4623      	mov	r3, r4
 8004f5e:	469a      	mov	sl, r3
 8004f60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f64:	b10a      	cbz	r2, 8004f6a <_vfiprintf_r+0xa2>
 8004f66:	2a25      	cmp	r2, #37	; 0x25
 8004f68:	d1f9      	bne.n	8004f5e <_vfiprintf_r+0x96>
 8004f6a:	ebba 0b04 	subs.w	fp, sl, r4
 8004f6e:	d00b      	beq.n	8004f88 <_vfiprintf_r+0xc0>
 8004f70:	465b      	mov	r3, fp
 8004f72:	4622      	mov	r2, r4
 8004f74:	4629      	mov	r1, r5
 8004f76:	4630      	mov	r0, r6
 8004f78:	f7ff ff93 	bl	8004ea2 <__sfputs_r>
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	f000 80aa 	beq.w	80050d6 <_vfiprintf_r+0x20e>
 8004f82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f84:	445a      	add	r2, fp
 8004f86:	9209      	str	r2, [sp, #36]	; 0x24
 8004f88:	f89a 3000 	ldrb.w	r3, [sl]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 80a2 	beq.w	80050d6 <_vfiprintf_r+0x20e>
 8004f92:	2300      	movs	r3, #0
 8004f94:	f04f 32ff 	mov.w	r2, #4294967295
 8004f98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f9c:	f10a 0a01 	add.w	sl, sl, #1
 8004fa0:	9304      	str	r3, [sp, #16]
 8004fa2:	9307      	str	r3, [sp, #28]
 8004fa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fa8:	931a      	str	r3, [sp, #104]	; 0x68
 8004faa:	4654      	mov	r4, sl
 8004fac:	2205      	movs	r2, #5
 8004fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb2:	4858      	ldr	r0, [pc, #352]	; (8005114 <_vfiprintf_r+0x24c>)
 8004fb4:	f7fb f90c 	bl	80001d0 <memchr>
 8004fb8:	9a04      	ldr	r2, [sp, #16]
 8004fba:	b9d8      	cbnz	r0, 8004ff4 <_vfiprintf_r+0x12c>
 8004fbc:	06d1      	lsls	r1, r2, #27
 8004fbe:	bf44      	itt	mi
 8004fc0:	2320      	movmi	r3, #32
 8004fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fc6:	0713      	lsls	r3, r2, #28
 8004fc8:	bf44      	itt	mi
 8004fca:	232b      	movmi	r3, #43	; 0x2b
 8004fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8004fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8004fd6:	d015      	beq.n	8005004 <_vfiprintf_r+0x13c>
 8004fd8:	9a07      	ldr	r2, [sp, #28]
 8004fda:	4654      	mov	r4, sl
 8004fdc:	2000      	movs	r0, #0
 8004fde:	f04f 0c0a 	mov.w	ip, #10
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fe8:	3b30      	subs	r3, #48	; 0x30
 8004fea:	2b09      	cmp	r3, #9
 8004fec:	d94e      	bls.n	800508c <_vfiprintf_r+0x1c4>
 8004fee:	b1b0      	cbz	r0, 800501e <_vfiprintf_r+0x156>
 8004ff0:	9207      	str	r2, [sp, #28]
 8004ff2:	e014      	b.n	800501e <_vfiprintf_r+0x156>
 8004ff4:	eba0 0308 	sub.w	r3, r0, r8
 8004ff8:	fa09 f303 	lsl.w	r3, r9, r3
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	9304      	str	r3, [sp, #16]
 8005000:	46a2      	mov	sl, r4
 8005002:	e7d2      	b.n	8004faa <_vfiprintf_r+0xe2>
 8005004:	9b03      	ldr	r3, [sp, #12]
 8005006:	1d19      	adds	r1, r3, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	9103      	str	r1, [sp, #12]
 800500c:	2b00      	cmp	r3, #0
 800500e:	bfbb      	ittet	lt
 8005010:	425b      	neglt	r3, r3
 8005012:	f042 0202 	orrlt.w	r2, r2, #2
 8005016:	9307      	strge	r3, [sp, #28]
 8005018:	9307      	strlt	r3, [sp, #28]
 800501a:	bfb8      	it	lt
 800501c:	9204      	strlt	r2, [sp, #16]
 800501e:	7823      	ldrb	r3, [r4, #0]
 8005020:	2b2e      	cmp	r3, #46	; 0x2e
 8005022:	d10c      	bne.n	800503e <_vfiprintf_r+0x176>
 8005024:	7863      	ldrb	r3, [r4, #1]
 8005026:	2b2a      	cmp	r3, #42	; 0x2a
 8005028:	d135      	bne.n	8005096 <_vfiprintf_r+0x1ce>
 800502a:	9b03      	ldr	r3, [sp, #12]
 800502c:	1d1a      	adds	r2, r3, #4
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	9203      	str	r2, [sp, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	bfb8      	it	lt
 8005036:	f04f 33ff 	movlt.w	r3, #4294967295
 800503a:	3402      	adds	r4, #2
 800503c:	9305      	str	r3, [sp, #20]
 800503e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005124 <_vfiprintf_r+0x25c>
 8005042:	7821      	ldrb	r1, [r4, #0]
 8005044:	2203      	movs	r2, #3
 8005046:	4650      	mov	r0, sl
 8005048:	f7fb f8c2 	bl	80001d0 <memchr>
 800504c:	b140      	cbz	r0, 8005060 <_vfiprintf_r+0x198>
 800504e:	2340      	movs	r3, #64	; 0x40
 8005050:	eba0 000a 	sub.w	r0, r0, sl
 8005054:	fa03 f000 	lsl.w	r0, r3, r0
 8005058:	9b04      	ldr	r3, [sp, #16]
 800505a:	4303      	orrs	r3, r0
 800505c:	3401      	adds	r4, #1
 800505e:	9304      	str	r3, [sp, #16]
 8005060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005064:	482c      	ldr	r0, [pc, #176]	; (8005118 <_vfiprintf_r+0x250>)
 8005066:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800506a:	2206      	movs	r2, #6
 800506c:	f7fb f8b0 	bl	80001d0 <memchr>
 8005070:	2800      	cmp	r0, #0
 8005072:	d03f      	beq.n	80050f4 <_vfiprintf_r+0x22c>
 8005074:	4b29      	ldr	r3, [pc, #164]	; (800511c <_vfiprintf_r+0x254>)
 8005076:	bb1b      	cbnz	r3, 80050c0 <_vfiprintf_r+0x1f8>
 8005078:	9b03      	ldr	r3, [sp, #12]
 800507a:	3307      	adds	r3, #7
 800507c:	f023 0307 	bic.w	r3, r3, #7
 8005080:	3308      	adds	r3, #8
 8005082:	9303      	str	r3, [sp, #12]
 8005084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005086:	443b      	add	r3, r7
 8005088:	9309      	str	r3, [sp, #36]	; 0x24
 800508a:	e767      	b.n	8004f5c <_vfiprintf_r+0x94>
 800508c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005090:	460c      	mov	r4, r1
 8005092:	2001      	movs	r0, #1
 8005094:	e7a5      	b.n	8004fe2 <_vfiprintf_r+0x11a>
 8005096:	2300      	movs	r3, #0
 8005098:	3401      	adds	r4, #1
 800509a:	9305      	str	r3, [sp, #20]
 800509c:	4619      	mov	r1, r3
 800509e:	f04f 0c0a 	mov.w	ip, #10
 80050a2:	4620      	mov	r0, r4
 80050a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050a8:	3a30      	subs	r2, #48	; 0x30
 80050aa:	2a09      	cmp	r2, #9
 80050ac:	d903      	bls.n	80050b6 <_vfiprintf_r+0x1ee>
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0c5      	beq.n	800503e <_vfiprintf_r+0x176>
 80050b2:	9105      	str	r1, [sp, #20]
 80050b4:	e7c3      	b.n	800503e <_vfiprintf_r+0x176>
 80050b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80050ba:	4604      	mov	r4, r0
 80050bc:	2301      	movs	r3, #1
 80050be:	e7f0      	b.n	80050a2 <_vfiprintf_r+0x1da>
 80050c0:	ab03      	add	r3, sp, #12
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	462a      	mov	r2, r5
 80050c6:	4b16      	ldr	r3, [pc, #88]	; (8005120 <_vfiprintf_r+0x258>)
 80050c8:	a904      	add	r1, sp, #16
 80050ca:	4630      	mov	r0, r6
 80050cc:	f3af 8000 	nop.w
 80050d0:	4607      	mov	r7, r0
 80050d2:	1c78      	adds	r0, r7, #1
 80050d4:	d1d6      	bne.n	8005084 <_vfiprintf_r+0x1bc>
 80050d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050d8:	07d9      	lsls	r1, r3, #31
 80050da:	d405      	bmi.n	80050e8 <_vfiprintf_r+0x220>
 80050dc:	89ab      	ldrh	r3, [r5, #12]
 80050de:	059a      	lsls	r2, r3, #22
 80050e0:	d402      	bmi.n	80050e8 <_vfiprintf_r+0x220>
 80050e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050e4:	f7ff fd0f 	bl	8004b06 <__retarget_lock_release_recursive>
 80050e8:	89ab      	ldrh	r3, [r5, #12]
 80050ea:	065b      	lsls	r3, r3, #25
 80050ec:	f53f af12 	bmi.w	8004f14 <_vfiprintf_r+0x4c>
 80050f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050f2:	e711      	b.n	8004f18 <_vfiprintf_r+0x50>
 80050f4:	ab03      	add	r3, sp, #12
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	462a      	mov	r2, r5
 80050fa:	4b09      	ldr	r3, [pc, #36]	; (8005120 <_vfiprintf_r+0x258>)
 80050fc:	a904      	add	r1, sp, #16
 80050fe:	4630      	mov	r0, r6
 8005100:	f000 f880 	bl	8005204 <_printf_i>
 8005104:	e7e4      	b.n	80050d0 <_vfiprintf_r+0x208>
 8005106:	bf00      	nop
 8005108:	08005bbc 	.word	0x08005bbc
 800510c:	08005bdc 	.word	0x08005bdc
 8005110:	08005b9c 	.word	0x08005b9c
 8005114:	08005bfc 	.word	0x08005bfc
 8005118:	08005c06 	.word	0x08005c06
 800511c:	00000000 	.word	0x00000000
 8005120:	08004ea3 	.word	0x08004ea3
 8005124:	08005c02 	.word	0x08005c02

08005128 <_printf_common>:
 8005128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800512c:	4616      	mov	r6, r2
 800512e:	4699      	mov	r9, r3
 8005130:	688a      	ldr	r2, [r1, #8]
 8005132:	690b      	ldr	r3, [r1, #16]
 8005134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005138:	4293      	cmp	r3, r2
 800513a:	bfb8      	it	lt
 800513c:	4613      	movlt	r3, r2
 800513e:	6033      	str	r3, [r6, #0]
 8005140:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005144:	4607      	mov	r7, r0
 8005146:	460c      	mov	r4, r1
 8005148:	b10a      	cbz	r2, 800514e <_printf_common+0x26>
 800514a:	3301      	adds	r3, #1
 800514c:	6033      	str	r3, [r6, #0]
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	0699      	lsls	r1, r3, #26
 8005152:	bf42      	ittt	mi
 8005154:	6833      	ldrmi	r3, [r6, #0]
 8005156:	3302      	addmi	r3, #2
 8005158:	6033      	strmi	r3, [r6, #0]
 800515a:	6825      	ldr	r5, [r4, #0]
 800515c:	f015 0506 	ands.w	r5, r5, #6
 8005160:	d106      	bne.n	8005170 <_printf_common+0x48>
 8005162:	f104 0a19 	add.w	sl, r4, #25
 8005166:	68e3      	ldr	r3, [r4, #12]
 8005168:	6832      	ldr	r2, [r6, #0]
 800516a:	1a9b      	subs	r3, r3, r2
 800516c:	42ab      	cmp	r3, r5
 800516e:	dc26      	bgt.n	80051be <_printf_common+0x96>
 8005170:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005174:	1e13      	subs	r3, r2, #0
 8005176:	6822      	ldr	r2, [r4, #0]
 8005178:	bf18      	it	ne
 800517a:	2301      	movne	r3, #1
 800517c:	0692      	lsls	r2, r2, #26
 800517e:	d42b      	bmi.n	80051d8 <_printf_common+0xb0>
 8005180:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005184:	4649      	mov	r1, r9
 8005186:	4638      	mov	r0, r7
 8005188:	47c0      	blx	r8
 800518a:	3001      	adds	r0, #1
 800518c:	d01e      	beq.n	80051cc <_printf_common+0xa4>
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	68e5      	ldr	r5, [r4, #12]
 8005192:	6832      	ldr	r2, [r6, #0]
 8005194:	f003 0306 	and.w	r3, r3, #6
 8005198:	2b04      	cmp	r3, #4
 800519a:	bf08      	it	eq
 800519c:	1aad      	subeq	r5, r5, r2
 800519e:	68a3      	ldr	r3, [r4, #8]
 80051a0:	6922      	ldr	r2, [r4, #16]
 80051a2:	bf0c      	ite	eq
 80051a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051a8:	2500      	movne	r5, #0
 80051aa:	4293      	cmp	r3, r2
 80051ac:	bfc4      	itt	gt
 80051ae:	1a9b      	subgt	r3, r3, r2
 80051b0:	18ed      	addgt	r5, r5, r3
 80051b2:	2600      	movs	r6, #0
 80051b4:	341a      	adds	r4, #26
 80051b6:	42b5      	cmp	r5, r6
 80051b8:	d11a      	bne.n	80051f0 <_printf_common+0xc8>
 80051ba:	2000      	movs	r0, #0
 80051bc:	e008      	b.n	80051d0 <_printf_common+0xa8>
 80051be:	2301      	movs	r3, #1
 80051c0:	4652      	mov	r2, sl
 80051c2:	4649      	mov	r1, r9
 80051c4:	4638      	mov	r0, r7
 80051c6:	47c0      	blx	r8
 80051c8:	3001      	adds	r0, #1
 80051ca:	d103      	bne.n	80051d4 <_printf_common+0xac>
 80051cc:	f04f 30ff 	mov.w	r0, #4294967295
 80051d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d4:	3501      	adds	r5, #1
 80051d6:	e7c6      	b.n	8005166 <_printf_common+0x3e>
 80051d8:	18e1      	adds	r1, r4, r3
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	2030      	movs	r0, #48	; 0x30
 80051de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051e2:	4422      	add	r2, r4
 80051e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051ec:	3302      	adds	r3, #2
 80051ee:	e7c7      	b.n	8005180 <_printf_common+0x58>
 80051f0:	2301      	movs	r3, #1
 80051f2:	4622      	mov	r2, r4
 80051f4:	4649      	mov	r1, r9
 80051f6:	4638      	mov	r0, r7
 80051f8:	47c0      	blx	r8
 80051fa:	3001      	adds	r0, #1
 80051fc:	d0e6      	beq.n	80051cc <_printf_common+0xa4>
 80051fe:	3601      	adds	r6, #1
 8005200:	e7d9      	b.n	80051b6 <_printf_common+0x8e>
	...

08005204 <_printf_i>:
 8005204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005208:	460c      	mov	r4, r1
 800520a:	4691      	mov	r9, r2
 800520c:	7e27      	ldrb	r7, [r4, #24]
 800520e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005210:	2f78      	cmp	r7, #120	; 0x78
 8005212:	4680      	mov	r8, r0
 8005214:	469a      	mov	sl, r3
 8005216:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800521a:	d807      	bhi.n	800522c <_printf_i+0x28>
 800521c:	2f62      	cmp	r7, #98	; 0x62
 800521e:	d80a      	bhi.n	8005236 <_printf_i+0x32>
 8005220:	2f00      	cmp	r7, #0
 8005222:	f000 80d8 	beq.w	80053d6 <_printf_i+0x1d2>
 8005226:	2f58      	cmp	r7, #88	; 0x58
 8005228:	f000 80a3 	beq.w	8005372 <_printf_i+0x16e>
 800522c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005230:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005234:	e03a      	b.n	80052ac <_printf_i+0xa8>
 8005236:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800523a:	2b15      	cmp	r3, #21
 800523c:	d8f6      	bhi.n	800522c <_printf_i+0x28>
 800523e:	a001      	add	r0, pc, #4	; (adr r0, 8005244 <_printf_i+0x40>)
 8005240:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005244:	0800529d 	.word	0x0800529d
 8005248:	080052b1 	.word	0x080052b1
 800524c:	0800522d 	.word	0x0800522d
 8005250:	0800522d 	.word	0x0800522d
 8005254:	0800522d 	.word	0x0800522d
 8005258:	0800522d 	.word	0x0800522d
 800525c:	080052b1 	.word	0x080052b1
 8005260:	0800522d 	.word	0x0800522d
 8005264:	0800522d 	.word	0x0800522d
 8005268:	0800522d 	.word	0x0800522d
 800526c:	0800522d 	.word	0x0800522d
 8005270:	080053bd 	.word	0x080053bd
 8005274:	080052e1 	.word	0x080052e1
 8005278:	0800539f 	.word	0x0800539f
 800527c:	0800522d 	.word	0x0800522d
 8005280:	0800522d 	.word	0x0800522d
 8005284:	080053df 	.word	0x080053df
 8005288:	0800522d 	.word	0x0800522d
 800528c:	080052e1 	.word	0x080052e1
 8005290:	0800522d 	.word	0x0800522d
 8005294:	0800522d 	.word	0x0800522d
 8005298:	080053a7 	.word	0x080053a7
 800529c:	680b      	ldr	r3, [r1, #0]
 800529e:	1d1a      	adds	r2, r3, #4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	600a      	str	r2, [r1, #0]
 80052a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052ac:	2301      	movs	r3, #1
 80052ae:	e0a3      	b.n	80053f8 <_printf_i+0x1f4>
 80052b0:	6825      	ldr	r5, [r4, #0]
 80052b2:	6808      	ldr	r0, [r1, #0]
 80052b4:	062e      	lsls	r6, r5, #24
 80052b6:	f100 0304 	add.w	r3, r0, #4
 80052ba:	d50a      	bpl.n	80052d2 <_printf_i+0xce>
 80052bc:	6805      	ldr	r5, [r0, #0]
 80052be:	600b      	str	r3, [r1, #0]
 80052c0:	2d00      	cmp	r5, #0
 80052c2:	da03      	bge.n	80052cc <_printf_i+0xc8>
 80052c4:	232d      	movs	r3, #45	; 0x2d
 80052c6:	426d      	negs	r5, r5
 80052c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052cc:	485e      	ldr	r0, [pc, #376]	; (8005448 <_printf_i+0x244>)
 80052ce:	230a      	movs	r3, #10
 80052d0:	e019      	b.n	8005306 <_printf_i+0x102>
 80052d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80052d6:	6805      	ldr	r5, [r0, #0]
 80052d8:	600b      	str	r3, [r1, #0]
 80052da:	bf18      	it	ne
 80052dc:	b22d      	sxthne	r5, r5
 80052de:	e7ef      	b.n	80052c0 <_printf_i+0xbc>
 80052e0:	680b      	ldr	r3, [r1, #0]
 80052e2:	6825      	ldr	r5, [r4, #0]
 80052e4:	1d18      	adds	r0, r3, #4
 80052e6:	6008      	str	r0, [r1, #0]
 80052e8:	0628      	lsls	r0, r5, #24
 80052ea:	d501      	bpl.n	80052f0 <_printf_i+0xec>
 80052ec:	681d      	ldr	r5, [r3, #0]
 80052ee:	e002      	b.n	80052f6 <_printf_i+0xf2>
 80052f0:	0669      	lsls	r1, r5, #25
 80052f2:	d5fb      	bpl.n	80052ec <_printf_i+0xe8>
 80052f4:	881d      	ldrh	r5, [r3, #0]
 80052f6:	4854      	ldr	r0, [pc, #336]	; (8005448 <_printf_i+0x244>)
 80052f8:	2f6f      	cmp	r7, #111	; 0x6f
 80052fa:	bf0c      	ite	eq
 80052fc:	2308      	moveq	r3, #8
 80052fe:	230a      	movne	r3, #10
 8005300:	2100      	movs	r1, #0
 8005302:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005306:	6866      	ldr	r6, [r4, #4]
 8005308:	60a6      	str	r6, [r4, #8]
 800530a:	2e00      	cmp	r6, #0
 800530c:	bfa2      	ittt	ge
 800530e:	6821      	ldrge	r1, [r4, #0]
 8005310:	f021 0104 	bicge.w	r1, r1, #4
 8005314:	6021      	strge	r1, [r4, #0]
 8005316:	b90d      	cbnz	r5, 800531c <_printf_i+0x118>
 8005318:	2e00      	cmp	r6, #0
 800531a:	d04d      	beq.n	80053b8 <_printf_i+0x1b4>
 800531c:	4616      	mov	r6, r2
 800531e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005322:	fb03 5711 	mls	r7, r3, r1, r5
 8005326:	5dc7      	ldrb	r7, [r0, r7]
 8005328:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800532c:	462f      	mov	r7, r5
 800532e:	42bb      	cmp	r3, r7
 8005330:	460d      	mov	r5, r1
 8005332:	d9f4      	bls.n	800531e <_printf_i+0x11a>
 8005334:	2b08      	cmp	r3, #8
 8005336:	d10b      	bne.n	8005350 <_printf_i+0x14c>
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	07df      	lsls	r7, r3, #31
 800533c:	d508      	bpl.n	8005350 <_printf_i+0x14c>
 800533e:	6923      	ldr	r3, [r4, #16]
 8005340:	6861      	ldr	r1, [r4, #4]
 8005342:	4299      	cmp	r1, r3
 8005344:	bfde      	ittt	le
 8005346:	2330      	movle	r3, #48	; 0x30
 8005348:	f806 3c01 	strble.w	r3, [r6, #-1]
 800534c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005350:	1b92      	subs	r2, r2, r6
 8005352:	6122      	str	r2, [r4, #16]
 8005354:	f8cd a000 	str.w	sl, [sp]
 8005358:	464b      	mov	r3, r9
 800535a:	aa03      	add	r2, sp, #12
 800535c:	4621      	mov	r1, r4
 800535e:	4640      	mov	r0, r8
 8005360:	f7ff fee2 	bl	8005128 <_printf_common>
 8005364:	3001      	adds	r0, #1
 8005366:	d14c      	bne.n	8005402 <_printf_i+0x1fe>
 8005368:	f04f 30ff 	mov.w	r0, #4294967295
 800536c:	b004      	add	sp, #16
 800536e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005372:	4835      	ldr	r0, [pc, #212]	; (8005448 <_printf_i+0x244>)
 8005374:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	680e      	ldr	r6, [r1, #0]
 800537c:	061f      	lsls	r7, r3, #24
 800537e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005382:	600e      	str	r6, [r1, #0]
 8005384:	d514      	bpl.n	80053b0 <_printf_i+0x1ac>
 8005386:	07d9      	lsls	r1, r3, #31
 8005388:	bf44      	itt	mi
 800538a:	f043 0320 	orrmi.w	r3, r3, #32
 800538e:	6023      	strmi	r3, [r4, #0]
 8005390:	b91d      	cbnz	r5, 800539a <_printf_i+0x196>
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	f023 0320 	bic.w	r3, r3, #32
 8005398:	6023      	str	r3, [r4, #0]
 800539a:	2310      	movs	r3, #16
 800539c:	e7b0      	b.n	8005300 <_printf_i+0xfc>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	f043 0320 	orr.w	r3, r3, #32
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	2378      	movs	r3, #120	; 0x78
 80053a8:	4828      	ldr	r0, [pc, #160]	; (800544c <_printf_i+0x248>)
 80053aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053ae:	e7e3      	b.n	8005378 <_printf_i+0x174>
 80053b0:	065e      	lsls	r6, r3, #25
 80053b2:	bf48      	it	mi
 80053b4:	b2ad      	uxthmi	r5, r5
 80053b6:	e7e6      	b.n	8005386 <_printf_i+0x182>
 80053b8:	4616      	mov	r6, r2
 80053ba:	e7bb      	b.n	8005334 <_printf_i+0x130>
 80053bc:	680b      	ldr	r3, [r1, #0]
 80053be:	6826      	ldr	r6, [r4, #0]
 80053c0:	6960      	ldr	r0, [r4, #20]
 80053c2:	1d1d      	adds	r5, r3, #4
 80053c4:	600d      	str	r5, [r1, #0]
 80053c6:	0635      	lsls	r5, r6, #24
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	d501      	bpl.n	80053d0 <_printf_i+0x1cc>
 80053cc:	6018      	str	r0, [r3, #0]
 80053ce:	e002      	b.n	80053d6 <_printf_i+0x1d2>
 80053d0:	0671      	lsls	r1, r6, #25
 80053d2:	d5fb      	bpl.n	80053cc <_printf_i+0x1c8>
 80053d4:	8018      	strh	r0, [r3, #0]
 80053d6:	2300      	movs	r3, #0
 80053d8:	6123      	str	r3, [r4, #16]
 80053da:	4616      	mov	r6, r2
 80053dc:	e7ba      	b.n	8005354 <_printf_i+0x150>
 80053de:	680b      	ldr	r3, [r1, #0]
 80053e0:	1d1a      	adds	r2, r3, #4
 80053e2:	600a      	str	r2, [r1, #0]
 80053e4:	681e      	ldr	r6, [r3, #0]
 80053e6:	6862      	ldr	r2, [r4, #4]
 80053e8:	2100      	movs	r1, #0
 80053ea:	4630      	mov	r0, r6
 80053ec:	f7fa fef0 	bl	80001d0 <memchr>
 80053f0:	b108      	cbz	r0, 80053f6 <_printf_i+0x1f2>
 80053f2:	1b80      	subs	r0, r0, r6
 80053f4:	6060      	str	r0, [r4, #4]
 80053f6:	6863      	ldr	r3, [r4, #4]
 80053f8:	6123      	str	r3, [r4, #16]
 80053fa:	2300      	movs	r3, #0
 80053fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005400:	e7a8      	b.n	8005354 <_printf_i+0x150>
 8005402:	6923      	ldr	r3, [r4, #16]
 8005404:	4632      	mov	r2, r6
 8005406:	4649      	mov	r1, r9
 8005408:	4640      	mov	r0, r8
 800540a:	47d0      	blx	sl
 800540c:	3001      	adds	r0, #1
 800540e:	d0ab      	beq.n	8005368 <_printf_i+0x164>
 8005410:	6823      	ldr	r3, [r4, #0]
 8005412:	079b      	lsls	r3, r3, #30
 8005414:	d413      	bmi.n	800543e <_printf_i+0x23a>
 8005416:	68e0      	ldr	r0, [r4, #12]
 8005418:	9b03      	ldr	r3, [sp, #12]
 800541a:	4298      	cmp	r0, r3
 800541c:	bfb8      	it	lt
 800541e:	4618      	movlt	r0, r3
 8005420:	e7a4      	b.n	800536c <_printf_i+0x168>
 8005422:	2301      	movs	r3, #1
 8005424:	4632      	mov	r2, r6
 8005426:	4649      	mov	r1, r9
 8005428:	4640      	mov	r0, r8
 800542a:	47d0      	blx	sl
 800542c:	3001      	adds	r0, #1
 800542e:	d09b      	beq.n	8005368 <_printf_i+0x164>
 8005430:	3501      	adds	r5, #1
 8005432:	68e3      	ldr	r3, [r4, #12]
 8005434:	9903      	ldr	r1, [sp, #12]
 8005436:	1a5b      	subs	r3, r3, r1
 8005438:	42ab      	cmp	r3, r5
 800543a:	dcf2      	bgt.n	8005422 <_printf_i+0x21e>
 800543c:	e7eb      	b.n	8005416 <_printf_i+0x212>
 800543e:	2500      	movs	r5, #0
 8005440:	f104 0619 	add.w	r6, r4, #25
 8005444:	e7f5      	b.n	8005432 <_printf_i+0x22e>
 8005446:	bf00      	nop
 8005448:	08005c0d 	.word	0x08005c0d
 800544c:	08005c1e 	.word	0x08005c1e

08005450 <_sbrk_r>:
 8005450:	b538      	push	{r3, r4, r5, lr}
 8005452:	4d06      	ldr	r5, [pc, #24]	; (800546c <_sbrk_r+0x1c>)
 8005454:	2300      	movs	r3, #0
 8005456:	4604      	mov	r4, r0
 8005458:	4608      	mov	r0, r1
 800545a:	602b      	str	r3, [r5, #0]
 800545c:	f7fc ffe8 	bl	8002430 <_sbrk>
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	d102      	bne.n	800546a <_sbrk_r+0x1a>
 8005464:	682b      	ldr	r3, [r5, #0]
 8005466:	b103      	cbz	r3, 800546a <_sbrk_r+0x1a>
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	bd38      	pop	{r3, r4, r5, pc}
 800546c:	200002ec 	.word	0x200002ec

08005470 <__sread>:
 8005470:	b510      	push	{r4, lr}
 8005472:	460c      	mov	r4, r1
 8005474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005478:	f000 fb02 	bl	8005a80 <_read_r>
 800547c:	2800      	cmp	r0, #0
 800547e:	bfab      	itete	ge
 8005480:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005482:	89a3      	ldrhlt	r3, [r4, #12]
 8005484:	181b      	addge	r3, r3, r0
 8005486:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800548a:	bfac      	ite	ge
 800548c:	6563      	strge	r3, [r4, #84]	; 0x54
 800548e:	81a3      	strhlt	r3, [r4, #12]
 8005490:	bd10      	pop	{r4, pc}

08005492 <__swrite>:
 8005492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005496:	461f      	mov	r7, r3
 8005498:	898b      	ldrh	r3, [r1, #12]
 800549a:	05db      	lsls	r3, r3, #23
 800549c:	4605      	mov	r5, r0
 800549e:	460c      	mov	r4, r1
 80054a0:	4616      	mov	r6, r2
 80054a2:	d505      	bpl.n	80054b0 <__swrite+0x1e>
 80054a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a8:	2302      	movs	r3, #2
 80054aa:	2200      	movs	r2, #0
 80054ac:	f000 f9c8 	bl	8005840 <_lseek_r>
 80054b0:	89a3      	ldrh	r3, [r4, #12]
 80054b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054ba:	81a3      	strh	r3, [r4, #12]
 80054bc:	4632      	mov	r2, r6
 80054be:	463b      	mov	r3, r7
 80054c0:	4628      	mov	r0, r5
 80054c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054c6:	f000 b869 	b.w	800559c <_write_r>

080054ca <__sseek>:
 80054ca:	b510      	push	{r4, lr}
 80054cc:	460c      	mov	r4, r1
 80054ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d2:	f000 f9b5 	bl	8005840 <_lseek_r>
 80054d6:	1c43      	adds	r3, r0, #1
 80054d8:	89a3      	ldrh	r3, [r4, #12]
 80054da:	bf15      	itete	ne
 80054dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80054de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054e6:	81a3      	strheq	r3, [r4, #12]
 80054e8:	bf18      	it	ne
 80054ea:	81a3      	strhne	r3, [r4, #12]
 80054ec:	bd10      	pop	{r4, pc}

080054ee <__sclose>:
 80054ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f2:	f000 b8d3 	b.w	800569c <_close_r>
	...

080054f8 <__swbuf_r>:
 80054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fa:	460e      	mov	r6, r1
 80054fc:	4614      	mov	r4, r2
 80054fe:	4605      	mov	r5, r0
 8005500:	b118      	cbz	r0, 800550a <__swbuf_r+0x12>
 8005502:	6983      	ldr	r3, [r0, #24]
 8005504:	b90b      	cbnz	r3, 800550a <__swbuf_r+0x12>
 8005506:	f7ff fa5f 	bl	80049c8 <__sinit>
 800550a:	4b21      	ldr	r3, [pc, #132]	; (8005590 <__swbuf_r+0x98>)
 800550c:	429c      	cmp	r4, r3
 800550e:	d12b      	bne.n	8005568 <__swbuf_r+0x70>
 8005510:	686c      	ldr	r4, [r5, #4]
 8005512:	69a3      	ldr	r3, [r4, #24]
 8005514:	60a3      	str	r3, [r4, #8]
 8005516:	89a3      	ldrh	r3, [r4, #12]
 8005518:	071a      	lsls	r2, r3, #28
 800551a:	d52f      	bpl.n	800557c <__swbuf_r+0x84>
 800551c:	6923      	ldr	r3, [r4, #16]
 800551e:	b36b      	cbz	r3, 800557c <__swbuf_r+0x84>
 8005520:	6923      	ldr	r3, [r4, #16]
 8005522:	6820      	ldr	r0, [r4, #0]
 8005524:	1ac0      	subs	r0, r0, r3
 8005526:	6963      	ldr	r3, [r4, #20]
 8005528:	b2f6      	uxtb	r6, r6
 800552a:	4283      	cmp	r3, r0
 800552c:	4637      	mov	r7, r6
 800552e:	dc04      	bgt.n	800553a <__swbuf_r+0x42>
 8005530:	4621      	mov	r1, r4
 8005532:	4628      	mov	r0, r5
 8005534:	f000 f948 	bl	80057c8 <_fflush_r>
 8005538:	bb30      	cbnz	r0, 8005588 <__swbuf_r+0x90>
 800553a:	68a3      	ldr	r3, [r4, #8]
 800553c:	3b01      	subs	r3, #1
 800553e:	60a3      	str	r3, [r4, #8]
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	6022      	str	r2, [r4, #0]
 8005546:	701e      	strb	r6, [r3, #0]
 8005548:	6963      	ldr	r3, [r4, #20]
 800554a:	3001      	adds	r0, #1
 800554c:	4283      	cmp	r3, r0
 800554e:	d004      	beq.n	800555a <__swbuf_r+0x62>
 8005550:	89a3      	ldrh	r3, [r4, #12]
 8005552:	07db      	lsls	r3, r3, #31
 8005554:	d506      	bpl.n	8005564 <__swbuf_r+0x6c>
 8005556:	2e0a      	cmp	r6, #10
 8005558:	d104      	bne.n	8005564 <__swbuf_r+0x6c>
 800555a:	4621      	mov	r1, r4
 800555c:	4628      	mov	r0, r5
 800555e:	f000 f933 	bl	80057c8 <_fflush_r>
 8005562:	b988      	cbnz	r0, 8005588 <__swbuf_r+0x90>
 8005564:	4638      	mov	r0, r7
 8005566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005568:	4b0a      	ldr	r3, [pc, #40]	; (8005594 <__swbuf_r+0x9c>)
 800556a:	429c      	cmp	r4, r3
 800556c:	d101      	bne.n	8005572 <__swbuf_r+0x7a>
 800556e:	68ac      	ldr	r4, [r5, #8]
 8005570:	e7cf      	b.n	8005512 <__swbuf_r+0x1a>
 8005572:	4b09      	ldr	r3, [pc, #36]	; (8005598 <__swbuf_r+0xa0>)
 8005574:	429c      	cmp	r4, r3
 8005576:	bf08      	it	eq
 8005578:	68ec      	ldreq	r4, [r5, #12]
 800557a:	e7ca      	b.n	8005512 <__swbuf_r+0x1a>
 800557c:	4621      	mov	r1, r4
 800557e:	4628      	mov	r0, r5
 8005580:	f000 f81e 	bl	80055c0 <__swsetup_r>
 8005584:	2800      	cmp	r0, #0
 8005586:	d0cb      	beq.n	8005520 <__swbuf_r+0x28>
 8005588:	f04f 37ff 	mov.w	r7, #4294967295
 800558c:	e7ea      	b.n	8005564 <__swbuf_r+0x6c>
 800558e:	bf00      	nop
 8005590:	08005bbc 	.word	0x08005bbc
 8005594:	08005bdc 	.word	0x08005bdc
 8005598:	08005b9c 	.word	0x08005b9c

0800559c <_write_r>:
 800559c:	b538      	push	{r3, r4, r5, lr}
 800559e:	4d07      	ldr	r5, [pc, #28]	; (80055bc <_write_r+0x20>)
 80055a0:	4604      	mov	r4, r0
 80055a2:	4608      	mov	r0, r1
 80055a4:	4611      	mov	r1, r2
 80055a6:	2200      	movs	r2, #0
 80055a8:	602a      	str	r2, [r5, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	f7fc feef 	bl	800238e <_write>
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	d102      	bne.n	80055ba <_write_r+0x1e>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	b103      	cbz	r3, 80055ba <_write_r+0x1e>
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	bd38      	pop	{r3, r4, r5, pc}
 80055bc:	200002ec 	.word	0x200002ec

080055c0 <__swsetup_r>:
 80055c0:	4b32      	ldr	r3, [pc, #200]	; (800568c <__swsetup_r+0xcc>)
 80055c2:	b570      	push	{r4, r5, r6, lr}
 80055c4:	681d      	ldr	r5, [r3, #0]
 80055c6:	4606      	mov	r6, r0
 80055c8:	460c      	mov	r4, r1
 80055ca:	b125      	cbz	r5, 80055d6 <__swsetup_r+0x16>
 80055cc:	69ab      	ldr	r3, [r5, #24]
 80055ce:	b913      	cbnz	r3, 80055d6 <__swsetup_r+0x16>
 80055d0:	4628      	mov	r0, r5
 80055d2:	f7ff f9f9 	bl	80049c8 <__sinit>
 80055d6:	4b2e      	ldr	r3, [pc, #184]	; (8005690 <__swsetup_r+0xd0>)
 80055d8:	429c      	cmp	r4, r3
 80055da:	d10f      	bne.n	80055fc <__swsetup_r+0x3c>
 80055dc:	686c      	ldr	r4, [r5, #4]
 80055de:	89a3      	ldrh	r3, [r4, #12]
 80055e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055e4:	0719      	lsls	r1, r3, #28
 80055e6:	d42c      	bmi.n	8005642 <__swsetup_r+0x82>
 80055e8:	06dd      	lsls	r5, r3, #27
 80055ea:	d411      	bmi.n	8005610 <__swsetup_r+0x50>
 80055ec:	2309      	movs	r3, #9
 80055ee:	6033      	str	r3, [r6, #0]
 80055f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80055f4:	81a3      	strh	r3, [r4, #12]
 80055f6:	f04f 30ff 	mov.w	r0, #4294967295
 80055fa:	e03e      	b.n	800567a <__swsetup_r+0xba>
 80055fc:	4b25      	ldr	r3, [pc, #148]	; (8005694 <__swsetup_r+0xd4>)
 80055fe:	429c      	cmp	r4, r3
 8005600:	d101      	bne.n	8005606 <__swsetup_r+0x46>
 8005602:	68ac      	ldr	r4, [r5, #8]
 8005604:	e7eb      	b.n	80055de <__swsetup_r+0x1e>
 8005606:	4b24      	ldr	r3, [pc, #144]	; (8005698 <__swsetup_r+0xd8>)
 8005608:	429c      	cmp	r4, r3
 800560a:	bf08      	it	eq
 800560c:	68ec      	ldreq	r4, [r5, #12]
 800560e:	e7e6      	b.n	80055de <__swsetup_r+0x1e>
 8005610:	0758      	lsls	r0, r3, #29
 8005612:	d512      	bpl.n	800563a <__swsetup_r+0x7a>
 8005614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005616:	b141      	cbz	r1, 800562a <__swsetup_r+0x6a>
 8005618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800561c:	4299      	cmp	r1, r3
 800561e:	d002      	beq.n	8005626 <__swsetup_r+0x66>
 8005620:	4630      	mov	r0, r6
 8005622:	f000 f9b7 	bl	8005994 <_free_r>
 8005626:	2300      	movs	r3, #0
 8005628:	6363      	str	r3, [r4, #52]	; 0x34
 800562a:	89a3      	ldrh	r3, [r4, #12]
 800562c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005630:	81a3      	strh	r3, [r4, #12]
 8005632:	2300      	movs	r3, #0
 8005634:	6063      	str	r3, [r4, #4]
 8005636:	6923      	ldr	r3, [r4, #16]
 8005638:	6023      	str	r3, [r4, #0]
 800563a:	89a3      	ldrh	r3, [r4, #12]
 800563c:	f043 0308 	orr.w	r3, r3, #8
 8005640:	81a3      	strh	r3, [r4, #12]
 8005642:	6923      	ldr	r3, [r4, #16]
 8005644:	b94b      	cbnz	r3, 800565a <__swsetup_r+0x9a>
 8005646:	89a3      	ldrh	r3, [r4, #12]
 8005648:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800564c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005650:	d003      	beq.n	800565a <__swsetup_r+0x9a>
 8005652:	4621      	mov	r1, r4
 8005654:	4630      	mov	r0, r6
 8005656:	f000 f929 	bl	80058ac <__smakebuf_r>
 800565a:	89a0      	ldrh	r0, [r4, #12]
 800565c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005660:	f010 0301 	ands.w	r3, r0, #1
 8005664:	d00a      	beq.n	800567c <__swsetup_r+0xbc>
 8005666:	2300      	movs	r3, #0
 8005668:	60a3      	str	r3, [r4, #8]
 800566a:	6963      	ldr	r3, [r4, #20]
 800566c:	425b      	negs	r3, r3
 800566e:	61a3      	str	r3, [r4, #24]
 8005670:	6923      	ldr	r3, [r4, #16]
 8005672:	b943      	cbnz	r3, 8005686 <__swsetup_r+0xc6>
 8005674:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005678:	d1ba      	bne.n	80055f0 <__swsetup_r+0x30>
 800567a:	bd70      	pop	{r4, r5, r6, pc}
 800567c:	0781      	lsls	r1, r0, #30
 800567e:	bf58      	it	pl
 8005680:	6963      	ldrpl	r3, [r4, #20]
 8005682:	60a3      	str	r3, [r4, #8]
 8005684:	e7f4      	b.n	8005670 <__swsetup_r+0xb0>
 8005686:	2000      	movs	r0, #0
 8005688:	e7f7      	b.n	800567a <__swsetup_r+0xba>
 800568a:	bf00      	nop
 800568c:	20000010 	.word	0x20000010
 8005690:	08005bbc 	.word	0x08005bbc
 8005694:	08005bdc 	.word	0x08005bdc
 8005698:	08005b9c 	.word	0x08005b9c

0800569c <_close_r>:
 800569c:	b538      	push	{r3, r4, r5, lr}
 800569e:	4d06      	ldr	r5, [pc, #24]	; (80056b8 <_close_r+0x1c>)
 80056a0:	2300      	movs	r3, #0
 80056a2:	4604      	mov	r4, r0
 80056a4:	4608      	mov	r0, r1
 80056a6:	602b      	str	r3, [r5, #0]
 80056a8:	f7fc fe8d 	bl	80023c6 <_close>
 80056ac:	1c43      	adds	r3, r0, #1
 80056ae:	d102      	bne.n	80056b6 <_close_r+0x1a>
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	b103      	cbz	r3, 80056b6 <_close_r+0x1a>
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	bd38      	pop	{r3, r4, r5, pc}
 80056b8:	200002ec 	.word	0x200002ec

080056bc <__sflush_r>:
 80056bc:	898a      	ldrh	r2, [r1, #12]
 80056be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056c2:	4605      	mov	r5, r0
 80056c4:	0710      	lsls	r0, r2, #28
 80056c6:	460c      	mov	r4, r1
 80056c8:	d458      	bmi.n	800577c <__sflush_r+0xc0>
 80056ca:	684b      	ldr	r3, [r1, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	dc05      	bgt.n	80056dc <__sflush_r+0x20>
 80056d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	dc02      	bgt.n	80056dc <__sflush_r+0x20>
 80056d6:	2000      	movs	r0, #0
 80056d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056de:	2e00      	cmp	r6, #0
 80056e0:	d0f9      	beq.n	80056d6 <__sflush_r+0x1a>
 80056e2:	2300      	movs	r3, #0
 80056e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80056e8:	682f      	ldr	r7, [r5, #0]
 80056ea:	602b      	str	r3, [r5, #0]
 80056ec:	d032      	beq.n	8005754 <__sflush_r+0x98>
 80056ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80056f0:	89a3      	ldrh	r3, [r4, #12]
 80056f2:	075a      	lsls	r2, r3, #29
 80056f4:	d505      	bpl.n	8005702 <__sflush_r+0x46>
 80056f6:	6863      	ldr	r3, [r4, #4]
 80056f8:	1ac0      	subs	r0, r0, r3
 80056fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056fc:	b10b      	cbz	r3, 8005702 <__sflush_r+0x46>
 80056fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005700:	1ac0      	subs	r0, r0, r3
 8005702:	2300      	movs	r3, #0
 8005704:	4602      	mov	r2, r0
 8005706:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005708:	6a21      	ldr	r1, [r4, #32]
 800570a:	4628      	mov	r0, r5
 800570c:	47b0      	blx	r6
 800570e:	1c43      	adds	r3, r0, #1
 8005710:	89a3      	ldrh	r3, [r4, #12]
 8005712:	d106      	bne.n	8005722 <__sflush_r+0x66>
 8005714:	6829      	ldr	r1, [r5, #0]
 8005716:	291d      	cmp	r1, #29
 8005718:	d82c      	bhi.n	8005774 <__sflush_r+0xb8>
 800571a:	4a2a      	ldr	r2, [pc, #168]	; (80057c4 <__sflush_r+0x108>)
 800571c:	40ca      	lsrs	r2, r1
 800571e:	07d6      	lsls	r6, r2, #31
 8005720:	d528      	bpl.n	8005774 <__sflush_r+0xb8>
 8005722:	2200      	movs	r2, #0
 8005724:	6062      	str	r2, [r4, #4]
 8005726:	04d9      	lsls	r1, r3, #19
 8005728:	6922      	ldr	r2, [r4, #16]
 800572a:	6022      	str	r2, [r4, #0]
 800572c:	d504      	bpl.n	8005738 <__sflush_r+0x7c>
 800572e:	1c42      	adds	r2, r0, #1
 8005730:	d101      	bne.n	8005736 <__sflush_r+0x7a>
 8005732:	682b      	ldr	r3, [r5, #0]
 8005734:	b903      	cbnz	r3, 8005738 <__sflush_r+0x7c>
 8005736:	6560      	str	r0, [r4, #84]	; 0x54
 8005738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800573a:	602f      	str	r7, [r5, #0]
 800573c:	2900      	cmp	r1, #0
 800573e:	d0ca      	beq.n	80056d6 <__sflush_r+0x1a>
 8005740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005744:	4299      	cmp	r1, r3
 8005746:	d002      	beq.n	800574e <__sflush_r+0x92>
 8005748:	4628      	mov	r0, r5
 800574a:	f000 f923 	bl	8005994 <_free_r>
 800574e:	2000      	movs	r0, #0
 8005750:	6360      	str	r0, [r4, #52]	; 0x34
 8005752:	e7c1      	b.n	80056d8 <__sflush_r+0x1c>
 8005754:	6a21      	ldr	r1, [r4, #32]
 8005756:	2301      	movs	r3, #1
 8005758:	4628      	mov	r0, r5
 800575a:	47b0      	blx	r6
 800575c:	1c41      	adds	r1, r0, #1
 800575e:	d1c7      	bne.n	80056f0 <__sflush_r+0x34>
 8005760:	682b      	ldr	r3, [r5, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0c4      	beq.n	80056f0 <__sflush_r+0x34>
 8005766:	2b1d      	cmp	r3, #29
 8005768:	d001      	beq.n	800576e <__sflush_r+0xb2>
 800576a:	2b16      	cmp	r3, #22
 800576c:	d101      	bne.n	8005772 <__sflush_r+0xb6>
 800576e:	602f      	str	r7, [r5, #0]
 8005770:	e7b1      	b.n	80056d6 <__sflush_r+0x1a>
 8005772:	89a3      	ldrh	r3, [r4, #12]
 8005774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005778:	81a3      	strh	r3, [r4, #12]
 800577a:	e7ad      	b.n	80056d8 <__sflush_r+0x1c>
 800577c:	690f      	ldr	r7, [r1, #16]
 800577e:	2f00      	cmp	r7, #0
 8005780:	d0a9      	beq.n	80056d6 <__sflush_r+0x1a>
 8005782:	0793      	lsls	r3, r2, #30
 8005784:	680e      	ldr	r6, [r1, #0]
 8005786:	bf08      	it	eq
 8005788:	694b      	ldreq	r3, [r1, #20]
 800578a:	600f      	str	r7, [r1, #0]
 800578c:	bf18      	it	ne
 800578e:	2300      	movne	r3, #0
 8005790:	eba6 0807 	sub.w	r8, r6, r7
 8005794:	608b      	str	r3, [r1, #8]
 8005796:	f1b8 0f00 	cmp.w	r8, #0
 800579a:	dd9c      	ble.n	80056d6 <__sflush_r+0x1a>
 800579c:	6a21      	ldr	r1, [r4, #32]
 800579e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057a0:	4643      	mov	r3, r8
 80057a2:	463a      	mov	r2, r7
 80057a4:	4628      	mov	r0, r5
 80057a6:	47b0      	blx	r6
 80057a8:	2800      	cmp	r0, #0
 80057aa:	dc06      	bgt.n	80057ba <__sflush_r+0xfe>
 80057ac:	89a3      	ldrh	r3, [r4, #12]
 80057ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057b2:	81a3      	strh	r3, [r4, #12]
 80057b4:	f04f 30ff 	mov.w	r0, #4294967295
 80057b8:	e78e      	b.n	80056d8 <__sflush_r+0x1c>
 80057ba:	4407      	add	r7, r0
 80057bc:	eba8 0800 	sub.w	r8, r8, r0
 80057c0:	e7e9      	b.n	8005796 <__sflush_r+0xda>
 80057c2:	bf00      	nop
 80057c4:	20400001 	.word	0x20400001

080057c8 <_fflush_r>:
 80057c8:	b538      	push	{r3, r4, r5, lr}
 80057ca:	690b      	ldr	r3, [r1, #16]
 80057cc:	4605      	mov	r5, r0
 80057ce:	460c      	mov	r4, r1
 80057d0:	b913      	cbnz	r3, 80057d8 <_fflush_r+0x10>
 80057d2:	2500      	movs	r5, #0
 80057d4:	4628      	mov	r0, r5
 80057d6:	bd38      	pop	{r3, r4, r5, pc}
 80057d8:	b118      	cbz	r0, 80057e2 <_fflush_r+0x1a>
 80057da:	6983      	ldr	r3, [r0, #24]
 80057dc:	b90b      	cbnz	r3, 80057e2 <_fflush_r+0x1a>
 80057de:	f7ff f8f3 	bl	80049c8 <__sinit>
 80057e2:	4b14      	ldr	r3, [pc, #80]	; (8005834 <_fflush_r+0x6c>)
 80057e4:	429c      	cmp	r4, r3
 80057e6:	d11b      	bne.n	8005820 <_fflush_r+0x58>
 80057e8:	686c      	ldr	r4, [r5, #4]
 80057ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0ef      	beq.n	80057d2 <_fflush_r+0xa>
 80057f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80057f4:	07d0      	lsls	r0, r2, #31
 80057f6:	d404      	bmi.n	8005802 <_fflush_r+0x3a>
 80057f8:	0599      	lsls	r1, r3, #22
 80057fa:	d402      	bmi.n	8005802 <_fflush_r+0x3a>
 80057fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057fe:	f7ff f981 	bl	8004b04 <__retarget_lock_acquire_recursive>
 8005802:	4628      	mov	r0, r5
 8005804:	4621      	mov	r1, r4
 8005806:	f7ff ff59 	bl	80056bc <__sflush_r>
 800580a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800580c:	07da      	lsls	r2, r3, #31
 800580e:	4605      	mov	r5, r0
 8005810:	d4e0      	bmi.n	80057d4 <_fflush_r+0xc>
 8005812:	89a3      	ldrh	r3, [r4, #12]
 8005814:	059b      	lsls	r3, r3, #22
 8005816:	d4dd      	bmi.n	80057d4 <_fflush_r+0xc>
 8005818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800581a:	f7ff f974 	bl	8004b06 <__retarget_lock_release_recursive>
 800581e:	e7d9      	b.n	80057d4 <_fflush_r+0xc>
 8005820:	4b05      	ldr	r3, [pc, #20]	; (8005838 <_fflush_r+0x70>)
 8005822:	429c      	cmp	r4, r3
 8005824:	d101      	bne.n	800582a <_fflush_r+0x62>
 8005826:	68ac      	ldr	r4, [r5, #8]
 8005828:	e7df      	b.n	80057ea <_fflush_r+0x22>
 800582a:	4b04      	ldr	r3, [pc, #16]	; (800583c <_fflush_r+0x74>)
 800582c:	429c      	cmp	r4, r3
 800582e:	bf08      	it	eq
 8005830:	68ec      	ldreq	r4, [r5, #12]
 8005832:	e7da      	b.n	80057ea <_fflush_r+0x22>
 8005834:	08005bbc 	.word	0x08005bbc
 8005838:	08005bdc 	.word	0x08005bdc
 800583c:	08005b9c 	.word	0x08005b9c

08005840 <_lseek_r>:
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	4d07      	ldr	r5, [pc, #28]	; (8005860 <_lseek_r+0x20>)
 8005844:	4604      	mov	r4, r0
 8005846:	4608      	mov	r0, r1
 8005848:	4611      	mov	r1, r2
 800584a:	2200      	movs	r2, #0
 800584c:	602a      	str	r2, [r5, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	f7fc fde0 	bl	8002414 <_lseek>
 8005854:	1c43      	adds	r3, r0, #1
 8005856:	d102      	bne.n	800585e <_lseek_r+0x1e>
 8005858:	682b      	ldr	r3, [r5, #0]
 800585a:	b103      	cbz	r3, 800585e <_lseek_r+0x1e>
 800585c:	6023      	str	r3, [r4, #0]
 800585e:	bd38      	pop	{r3, r4, r5, pc}
 8005860:	200002ec 	.word	0x200002ec

08005864 <__swhatbuf_r>:
 8005864:	b570      	push	{r4, r5, r6, lr}
 8005866:	460e      	mov	r6, r1
 8005868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800586c:	2900      	cmp	r1, #0
 800586e:	b096      	sub	sp, #88	; 0x58
 8005870:	4614      	mov	r4, r2
 8005872:	461d      	mov	r5, r3
 8005874:	da07      	bge.n	8005886 <__swhatbuf_r+0x22>
 8005876:	2300      	movs	r3, #0
 8005878:	602b      	str	r3, [r5, #0]
 800587a:	89b3      	ldrh	r3, [r6, #12]
 800587c:	061a      	lsls	r2, r3, #24
 800587e:	d410      	bmi.n	80058a2 <__swhatbuf_r+0x3e>
 8005880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005884:	e00e      	b.n	80058a4 <__swhatbuf_r+0x40>
 8005886:	466a      	mov	r2, sp
 8005888:	f000 f90c 	bl	8005aa4 <_fstat_r>
 800588c:	2800      	cmp	r0, #0
 800588e:	dbf2      	blt.n	8005876 <__swhatbuf_r+0x12>
 8005890:	9a01      	ldr	r2, [sp, #4]
 8005892:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005896:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800589a:	425a      	negs	r2, r3
 800589c:	415a      	adcs	r2, r3
 800589e:	602a      	str	r2, [r5, #0]
 80058a0:	e7ee      	b.n	8005880 <__swhatbuf_r+0x1c>
 80058a2:	2340      	movs	r3, #64	; 0x40
 80058a4:	2000      	movs	r0, #0
 80058a6:	6023      	str	r3, [r4, #0]
 80058a8:	b016      	add	sp, #88	; 0x58
 80058aa:	bd70      	pop	{r4, r5, r6, pc}

080058ac <__smakebuf_r>:
 80058ac:	898b      	ldrh	r3, [r1, #12]
 80058ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058b0:	079d      	lsls	r5, r3, #30
 80058b2:	4606      	mov	r6, r0
 80058b4:	460c      	mov	r4, r1
 80058b6:	d507      	bpl.n	80058c8 <__smakebuf_r+0x1c>
 80058b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	6123      	str	r3, [r4, #16]
 80058c0:	2301      	movs	r3, #1
 80058c2:	6163      	str	r3, [r4, #20]
 80058c4:	b002      	add	sp, #8
 80058c6:	bd70      	pop	{r4, r5, r6, pc}
 80058c8:	ab01      	add	r3, sp, #4
 80058ca:	466a      	mov	r2, sp
 80058cc:	f7ff ffca 	bl	8005864 <__swhatbuf_r>
 80058d0:	9900      	ldr	r1, [sp, #0]
 80058d2:	4605      	mov	r5, r0
 80058d4:	4630      	mov	r0, r6
 80058d6:	f7ff f917 	bl	8004b08 <_malloc_r>
 80058da:	b948      	cbnz	r0, 80058f0 <__smakebuf_r+0x44>
 80058dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058e0:	059a      	lsls	r2, r3, #22
 80058e2:	d4ef      	bmi.n	80058c4 <__smakebuf_r+0x18>
 80058e4:	f023 0303 	bic.w	r3, r3, #3
 80058e8:	f043 0302 	orr.w	r3, r3, #2
 80058ec:	81a3      	strh	r3, [r4, #12]
 80058ee:	e7e3      	b.n	80058b8 <__smakebuf_r+0xc>
 80058f0:	4b0d      	ldr	r3, [pc, #52]	; (8005928 <__smakebuf_r+0x7c>)
 80058f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80058f4:	89a3      	ldrh	r3, [r4, #12]
 80058f6:	6020      	str	r0, [r4, #0]
 80058f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058fc:	81a3      	strh	r3, [r4, #12]
 80058fe:	9b00      	ldr	r3, [sp, #0]
 8005900:	6163      	str	r3, [r4, #20]
 8005902:	9b01      	ldr	r3, [sp, #4]
 8005904:	6120      	str	r0, [r4, #16]
 8005906:	b15b      	cbz	r3, 8005920 <__smakebuf_r+0x74>
 8005908:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800590c:	4630      	mov	r0, r6
 800590e:	f000 f8db 	bl	8005ac8 <_isatty_r>
 8005912:	b128      	cbz	r0, 8005920 <__smakebuf_r+0x74>
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	f023 0303 	bic.w	r3, r3, #3
 800591a:	f043 0301 	orr.w	r3, r3, #1
 800591e:	81a3      	strh	r3, [r4, #12]
 8005920:	89a0      	ldrh	r0, [r4, #12]
 8005922:	4305      	orrs	r5, r0
 8005924:	81a5      	strh	r5, [r4, #12]
 8005926:	e7cd      	b.n	80058c4 <__smakebuf_r+0x18>
 8005928:	08004961 	.word	0x08004961

0800592c <memcpy>:
 800592c:	440a      	add	r2, r1
 800592e:	4291      	cmp	r1, r2
 8005930:	f100 33ff 	add.w	r3, r0, #4294967295
 8005934:	d100      	bne.n	8005938 <memcpy+0xc>
 8005936:	4770      	bx	lr
 8005938:	b510      	push	{r4, lr}
 800593a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800593e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005942:	4291      	cmp	r1, r2
 8005944:	d1f9      	bne.n	800593a <memcpy+0xe>
 8005946:	bd10      	pop	{r4, pc}

08005948 <memmove>:
 8005948:	4288      	cmp	r0, r1
 800594a:	b510      	push	{r4, lr}
 800594c:	eb01 0402 	add.w	r4, r1, r2
 8005950:	d902      	bls.n	8005958 <memmove+0x10>
 8005952:	4284      	cmp	r4, r0
 8005954:	4623      	mov	r3, r4
 8005956:	d807      	bhi.n	8005968 <memmove+0x20>
 8005958:	1e43      	subs	r3, r0, #1
 800595a:	42a1      	cmp	r1, r4
 800595c:	d008      	beq.n	8005970 <memmove+0x28>
 800595e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005962:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005966:	e7f8      	b.n	800595a <memmove+0x12>
 8005968:	4402      	add	r2, r0
 800596a:	4601      	mov	r1, r0
 800596c:	428a      	cmp	r2, r1
 800596e:	d100      	bne.n	8005972 <memmove+0x2a>
 8005970:	bd10      	pop	{r4, pc}
 8005972:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005976:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800597a:	e7f7      	b.n	800596c <memmove+0x24>

0800597c <__malloc_lock>:
 800597c:	4801      	ldr	r0, [pc, #4]	; (8005984 <__malloc_lock+0x8>)
 800597e:	f7ff b8c1 	b.w	8004b04 <__retarget_lock_acquire_recursive>
 8005982:	bf00      	nop
 8005984:	200002e4 	.word	0x200002e4

08005988 <__malloc_unlock>:
 8005988:	4801      	ldr	r0, [pc, #4]	; (8005990 <__malloc_unlock+0x8>)
 800598a:	f7ff b8bc 	b.w	8004b06 <__retarget_lock_release_recursive>
 800598e:	bf00      	nop
 8005990:	200002e4 	.word	0x200002e4

08005994 <_free_r>:
 8005994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005996:	2900      	cmp	r1, #0
 8005998:	d048      	beq.n	8005a2c <_free_r+0x98>
 800599a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800599e:	9001      	str	r0, [sp, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f1a1 0404 	sub.w	r4, r1, #4
 80059a6:	bfb8      	it	lt
 80059a8:	18e4      	addlt	r4, r4, r3
 80059aa:	f7ff ffe7 	bl	800597c <__malloc_lock>
 80059ae:	4a20      	ldr	r2, [pc, #128]	; (8005a30 <_free_r+0x9c>)
 80059b0:	9801      	ldr	r0, [sp, #4]
 80059b2:	6813      	ldr	r3, [r2, #0]
 80059b4:	4615      	mov	r5, r2
 80059b6:	b933      	cbnz	r3, 80059c6 <_free_r+0x32>
 80059b8:	6063      	str	r3, [r4, #4]
 80059ba:	6014      	str	r4, [r2, #0]
 80059bc:	b003      	add	sp, #12
 80059be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059c2:	f7ff bfe1 	b.w	8005988 <__malloc_unlock>
 80059c6:	42a3      	cmp	r3, r4
 80059c8:	d90b      	bls.n	80059e2 <_free_r+0x4e>
 80059ca:	6821      	ldr	r1, [r4, #0]
 80059cc:	1862      	adds	r2, r4, r1
 80059ce:	4293      	cmp	r3, r2
 80059d0:	bf04      	itt	eq
 80059d2:	681a      	ldreq	r2, [r3, #0]
 80059d4:	685b      	ldreq	r3, [r3, #4]
 80059d6:	6063      	str	r3, [r4, #4]
 80059d8:	bf04      	itt	eq
 80059da:	1852      	addeq	r2, r2, r1
 80059dc:	6022      	streq	r2, [r4, #0]
 80059de:	602c      	str	r4, [r5, #0]
 80059e0:	e7ec      	b.n	80059bc <_free_r+0x28>
 80059e2:	461a      	mov	r2, r3
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	b10b      	cbz	r3, 80059ec <_free_r+0x58>
 80059e8:	42a3      	cmp	r3, r4
 80059ea:	d9fa      	bls.n	80059e2 <_free_r+0x4e>
 80059ec:	6811      	ldr	r1, [r2, #0]
 80059ee:	1855      	adds	r5, r2, r1
 80059f0:	42a5      	cmp	r5, r4
 80059f2:	d10b      	bne.n	8005a0c <_free_r+0x78>
 80059f4:	6824      	ldr	r4, [r4, #0]
 80059f6:	4421      	add	r1, r4
 80059f8:	1854      	adds	r4, r2, r1
 80059fa:	42a3      	cmp	r3, r4
 80059fc:	6011      	str	r1, [r2, #0]
 80059fe:	d1dd      	bne.n	80059bc <_free_r+0x28>
 8005a00:	681c      	ldr	r4, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	6053      	str	r3, [r2, #4]
 8005a06:	4421      	add	r1, r4
 8005a08:	6011      	str	r1, [r2, #0]
 8005a0a:	e7d7      	b.n	80059bc <_free_r+0x28>
 8005a0c:	d902      	bls.n	8005a14 <_free_r+0x80>
 8005a0e:	230c      	movs	r3, #12
 8005a10:	6003      	str	r3, [r0, #0]
 8005a12:	e7d3      	b.n	80059bc <_free_r+0x28>
 8005a14:	6825      	ldr	r5, [r4, #0]
 8005a16:	1961      	adds	r1, r4, r5
 8005a18:	428b      	cmp	r3, r1
 8005a1a:	bf04      	itt	eq
 8005a1c:	6819      	ldreq	r1, [r3, #0]
 8005a1e:	685b      	ldreq	r3, [r3, #4]
 8005a20:	6063      	str	r3, [r4, #4]
 8005a22:	bf04      	itt	eq
 8005a24:	1949      	addeq	r1, r1, r5
 8005a26:	6021      	streq	r1, [r4, #0]
 8005a28:	6054      	str	r4, [r2, #4]
 8005a2a:	e7c7      	b.n	80059bc <_free_r+0x28>
 8005a2c:	b003      	add	sp, #12
 8005a2e:	bd30      	pop	{r4, r5, pc}
 8005a30:	200000c4 	.word	0x200000c4

08005a34 <_realloc_r>:
 8005a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a36:	4607      	mov	r7, r0
 8005a38:	4614      	mov	r4, r2
 8005a3a:	460e      	mov	r6, r1
 8005a3c:	b921      	cbnz	r1, 8005a48 <_realloc_r+0x14>
 8005a3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a42:	4611      	mov	r1, r2
 8005a44:	f7ff b860 	b.w	8004b08 <_malloc_r>
 8005a48:	b922      	cbnz	r2, 8005a54 <_realloc_r+0x20>
 8005a4a:	f7ff ffa3 	bl	8005994 <_free_r>
 8005a4e:	4625      	mov	r5, r4
 8005a50:	4628      	mov	r0, r5
 8005a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a54:	f000 f848 	bl	8005ae8 <_malloc_usable_size_r>
 8005a58:	42a0      	cmp	r0, r4
 8005a5a:	d20f      	bcs.n	8005a7c <_realloc_r+0x48>
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	4638      	mov	r0, r7
 8005a60:	f7ff f852 	bl	8004b08 <_malloc_r>
 8005a64:	4605      	mov	r5, r0
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d0f2      	beq.n	8005a50 <_realloc_r+0x1c>
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	4622      	mov	r2, r4
 8005a6e:	f7ff ff5d 	bl	800592c <memcpy>
 8005a72:	4631      	mov	r1, r6
 8005a74:	4638      	mov	r0, r7
 8005a76:	f7ff ff8d 	bl	8005994 <_free_r>
 8005a7a:	e7e9      	b.n	8005a50 <_realloc_r+0x1c>
 8005a7c:	4635      	mov	r5, r6
 8005a7e:	e7e7      	b.n	8005a50 <_realloc_r+0x1c>

08005a80 <_read_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	4d07      	ldr	r5, [pc, #28]	; (8005aa0 <_read_r+0x20>)
 8005a84:	4604      	mov	r4, r0
 8005a86:	4608      	mov	r0, r1
 8005a88:	4611      	mov	r1, r2
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	602a      	str	r2, [r5, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f7fc fc60 	bl	8002354 <_read>
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	d102      	bne.n	8005a9e <_read_r+0x1e>
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	b103      	cbz	r3, 8005a9e <_read_r+0x1e>
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	bd38      	pop	{r3, r4, r5, pc}
 8005aa0:	200002ec 	.word	0x200002ec

08005aa4 <_fstat_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	4d07      	ldr	r5, [pc, #28]	; (8005ac4 <_fstat_r+0x20>)
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	4604      	mov	r4, r0
 8005aac:	4608      	mov	r0, r1
 8005aae:	4611      	mov	r1, r2
 8005ab0:	602b      	str	r3, [r5, #0]
 8005ab2:	f7fc fc94 	bl	80023de <_fstat>
 8005ab6:	1c43      	adds	r3, r0, #1
 8005ab8:	d102      	bne.n	8005ac0 <_fstat_r+0x1c>
 8005aba:	682b      	ldr	r3, [r5, #0]
 8005abc:	b103      	cbz	r3, 8005ac0 <_fstat_r+0x1c>
 8005abe:	6023      	str	r3, [r4, #0]
 8005ac0:	bd38      	pop	{r3, r4, r5, pc}
 8005ac2:	bf00      	nop
 8005ac4:	200002ec 	.word	0x200002ec

08005ac8 <_isatty_r>:
 8005ac8:	b538      	push	{r3, r4, r5, lr}
 8005aca:	4d06      	ldr	r5, [pc, #24]	; (8005ae4 <_isatty_r+0x1c>)
 8005acc:	2300      	movs	r3, #0
 8005ace:	4604      	mov	r4, r0
 8005ad0:	4608      	mov	r0, r1
 8005ad2:	602b      	str	r3, [r5, #0]
 8005ad4:	f7fc fc93 	bl	80023fe <_isatty>
 8005ad8:	1c43      	adds	r3, r0, #1
 8005ada:	d102      	bne.n	8005ae2 <_isatty_r+0x1a>
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	b103      	cbz	r3, 8005ae2 <_isatty_r+0x1a>
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	bd38      	pop	{r3, r4, r5, pc}
 8005ae4:	200002ec 	.word	0x200002ec

08005ae8 <_malloc_usable_size_r>:
 8005ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aec:	1f18      	subs	r0, r3, #4
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	bfbc      	itt	lt
 8005af2:	580b      	ldrlt	r3, [r1, r0]
 8005af4:	18c0      	addlt	r0, r0, r3
 8005af6:	4770      	bx	lr

08005af8 <_init>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	bf00      	nop
 8005afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afe:	bc08      	pop	{r3}
 8005b00:	469e      	mov	lr, r3
 8005b02:	4770      	bx	lr

08005b04 <_fini>:
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b06:	bf00      	nop
 8005b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0a:	bc08      	pop	{r3}
 8005b0c:	469e      	mov	lr, r3
 8005b0e:	4770      	bx	lr
